<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpecBind</name>
    </assembly>
    <members>
        <member name="T:SpecBind.ActionPipeline.ActionContext">
            <summary>
            A class that defines the data that is needed to perform the action.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ActionContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:SpecBind.ActionPipeline.ActionContext.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:SpecBind.ActionPipeline.ActionRepository">
            <summary>
            The action repository for plugins in the pipeline.
            </summary>
        </member>
        <member name="T:SpecBind.ActionPipeline.IActionRepository">
            <summary>
            Contains a cache of available actions, pre-actions and post-actions.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.IActionRepository.CreateAction``1">
            <summary>
            Creates the action.
            </summary>
            <typeparam name="TAction">The type of the action.</typeparam>
            <returns>The created action object.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.IActionRepository.GetPostActions">
            <summary>
            Gets the post-execute actions.
            </summary>
            <returns>An enumerable collection of actions.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.IActionRepository.GetPreActions">
            <summary>
            Gets the pre-execute actions.
            </summary>
            <returns>An enumerable collection of actions.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.IActionRepository.GetLocatorActions">
            <summary>
            Gets the locator actions.
            </summary>
            <returns>An enumerable collection of actions.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.IActionRepository.GetComparisonTypes">
            <summary>
            Gets the comparison actions used to process various types.
            </summary>
            <returns>An enumerable collection of actions.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.#ctor(BoDi.IObjectContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ActionRepository"/> class.
            </summary>
            <param name="objectContainer">The object container.</param>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.CreateAction``1">
            <summary>
            Creates the action.
            </summary>
            <typeparam name="TAction">The type of the action.</typeparam>
            <returns>The created action object.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.GetPostActions">
            <summary>
            Gets the post-execute actions.
            </summary>
            <returns>An enumerable collection of actions.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.GetPreActions">
            <summary>
            Gets the pre-execute actions.
            </summary>
            <returns>An enumerable collection of actions.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.GetComparisonTypes">
            <summary>
            Gets the comparison actions used to process various types.
            </summary>
            <returns>An enumerable collection of actions.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.GetLocatorActions">
            <summary>
            Gets the locator actions.
            </summary>
            <returns>An enumerable collection of actions.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.RegisterType(System.Type)">
            <summary>
            Registers the type in the pipeline.
            </summary>
            <param name="type">The type to register in the pipeline.</param>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionRepository.CreateItem``1(System.Type)">
            <summary>
            Creates the item through the DI container.
            </summary>
            <typeparam name="T">The type of the created item.</typeparam>
            <param name="concreteType">Type of the concrete.</param>
            <returns>The created item.</returns>
        </member>
        <member name="T:SpecBind.ActionPipeline.ActionResult">
            <summary>
            Contains the result of the action after it has completed.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionResult.#ctor(System.Boolean,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ActionResult"/> class.
            </summary>
            <param name="success">if set to <c>true</c> the action was successful.</param>
            <param name="result">The result.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionResult.Failure(System.Exception)">
            <summary>
            Creates a failure action result.
            </summary>
            <param name="exception">The optional exception.</param>
            <returns>A new <see cref="T:SpecBind.ActionPipeline.ActionResult"/> object.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionResult.Successful(System.Object)">
            <summary>
            Creates a successful action result.
            </summary>
            <param name="result">The optional resulting value.</param>
            <returns>A new <see cref="T:SpecBind.ActionPipeline.ActionResult"/> object.</returns>
        </member>
        <member name="P:SpecBind.ActionPipeline.ActionResult.Exception">
            <summary>
            Gets the exception if the action fails.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:SpecBind.ActionPipeline.ActionResult.Result">
            <summary>
            Gets the result of the action.
            </summary>
            <value>The result of the action.</value>
        </member>
        <member name="P:SpecBind.ActionPipeline.ActionResult.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:SpecBind.ActionPipeline.ActionResult"/> was successful.
            </summary>
            <value><c>true</c> was successful; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SpecBind.ActionPipeline.ElementLocator">
            <summary>
            An implementation of <see cref="T:SpecBind.ActionPipeline.IElementLocator"/> that uses the page model
            to locate the element but ties in plugins.
            </summary>
        </member>
        <member name="T:SpecBind.ActionPipeline.IElementLocator">
            <summary>
            A locator for elements to return a given item based on the current context.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.IElementLocator.GetElement(System.String)">
            <summary>
            Gets the element from the context.
            </summary>
            <param name="propertyName">The property name to locate.</param>
            <returns>The resulting property data.</returns>
            <exception cref="T:SpecBind.Pages.ElementExecuteException">Thrown when the element could not be found.</exception>
        </member>
        <member name="M:SpecBind.ActionPipeline.IElementLocator.GetProperty(System.String)">
            <summary>
            Gets the property from the context.
            </summary>
            <param name="propertyName">The property name to locate.</param>
            <returns>The resulting property data.</returns>
            <exception cref="T:SpecBind.Pages.ElementExecuteException">Thrown when the element could not be found.</exception>
        </member>
        <member name="M:SpecBind.ActionPipeline.IElementLocator.TryGetElement(System.String,SpecBind.Pages.IPropertyData@)">
            <summary>
            Tries the get the element.
            </summary>
            <param name="propertyName">The key.</param>
            <param name="propertyData">The property data.</param>
            <returns><c>true</c> if the element exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.IElementLocator.TryGetProperty(System.String,SpecBind.Pages.IPropertyData@)">
            <summary>
            Tries the get the property on the page.
            </summary>
            <param name="propertyName">The key.</param>
            <param name="propertyData">The property data.</param>
            <returns><c>true</c> if the element exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ElementLocator.#ctor(SpecBind.Pages.IPage,System.Collections.Generic.IEnumerable{SpecBind.ActionPipeline.ILocatorAction})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ElementLocator"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="filterActions">The filter actions.</param>
        </member>
        <member name="M:SpecBind.ActionPipeline.ElementLocator.GetElement(System.String)">
            <summary>
            Gets the element from the context.
            </summary>
            <param name="propertyName">The property name to locate.</param>
            <returns>The resulting property data.</returns>
            <exception cref="T:SpecBind.Pages.ElementExecuteException">Thrown when the element could not be found.</exception>
        </member>
        <member name="M:SpecBind.ActionPipeline.ElementLocator.GetProperty(System.String)">
            <summary>
            Gets the property from the context.
            </summary>
            <param name="propertyName">The property name to locate.</param>
            <returns>The resulting property data.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ElementLocator.TryGetElement(System.String,SpecBind.Pages.IPropertyData@)">
            <summary>
            Tries the get the element.
            </summary>
            <param name="propertyName">The key.</param>
            <param name="propertyData">The property data.</param>
            <returns><c>true</c> if the element exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ElementLocator.TryGetProperty(System.String,SpecBind.Pages.IPropertyData@)">
            <summary>
            Tries the get the property.
            </summary>
            <param name="propertyName">The key.</param>
            <param name="propertyData">The property data.</param>
            <returns><c>true</c> if the element exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ElementLocator.GetElementNotFoundException(SpecBind.Pages.IPage,System.String,System.Func{SpecBind.Pages.IPropertyData,System.Boolean})">
            <summary>
            Gets the element not found exception.
            </summary>
            <param name="page">The page.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="filter">The filter.</param>
            <returns>
            The created exception.
            </returns>
        </member>
        <member name="T:SpecBind.ActionPipeline.IAction">
            <summary>
            Represents an action in the system.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.IAction.Execute(SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="P:SpecBind.ActionPipeline.IAction.Name">
            <summary>
            Gets the action name.
            </summary>
            <value>The action name.</value>
        </member>
        <member name="P:SpecBind.ActionPipeline.IAction.ElementLocator">
            <summary>
            Sets the element locator.
            </summary>
            <value>The element locator.</value>
        </member>
        <member name="T:SpecBind.ActionPipeline.IActionPipelineService">
            <summary>
            Represents the action pipeline that performs actions.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.IActionPipelineService.PerformAction``1(SpecBind.Pages.IPage,SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Performs the action.
            </summary>
            <typeparam name="TAction">The type of the action that inherits from <see cref="T:SpecBind.ActionPipeline.IAction"/>.</typeparam>
            <param name="page">The page.</param>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.IActionPipelineService.PerformAction(SpecBind.Pages.IPage,SpecBind.ActionPipeline.IAction,SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Performs the action.
            </summary>
            <param name="page">The page.</param>
            <param name="action">The action.</param>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.ActionPipeline.ILocatorAction">
            <summary>
            An interface that allows a plugin to participate in the
            location of an element.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.ILocatorAction.OnLocate(System.String)">
            <summary>
            Called when an element is about to be located.
            </summary>
            <param name="key">The element key.</param>
        </member>
        <member name="M:SpecBind.ActionPipeline.ILocatorAction.OnLocateComplete(System.String,SpecBind.Pages.IPropertyData)">
            <summary>
            Called when an element is completed.
            </summary>
            <param name="key">The element key.</param>
            <param name="item">The item if located; otherwise <c>null</c>.</param>
        </member>
        <member name="T:SpecBind.ActionPipeline.IPostAction">
            <summary>
            An extension that can interact with an action after it occurs.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.IPostAction.PerformPostAction(SpecBind.ActionPipeline.IAction,SpecBind.ActionPipeline.ActionContext,SpecBind.ActionPipeline.ActionResult)">
            <summary>
            Performs the post-execute action.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The action context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:SpecBind.ActionPipeline.IPreAction">
            <summary>
            An extension that can interact with an action before it occurs.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.IPreAction.PerformPreAction(SpecBind.ActionPipeline.IAction,SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Performs the pre-execute action.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The action context.</param>
        </member>
        <member name="T:SpecBind.ActionPipeline.ActionResultExtensions">
            <summary>
            A set of extension methods for the <see cref="T:SpecBind.ActionPipeline.ActionResult"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionResultExtensions.CheckResult``1(SpecBind.ActionPipeline.ActionResult)">
            <summary>
            Checks the result to ensure there are no errors and returns the value.
            </summary>
            <typeparam name="T">The type the result should be converted to.</typeparam>
            <param name="result">The action result.</param>
            <returns>The resulting object.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionResultExtensions.CheckResult(SpecBind.ActionPipeline.ActionResult)">
            <summary>
            Checks the result to ensure there are no errors.
            </summary>
            <param name="result">The action result.</param>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionResultExtensions.CheckActionResult(SpecBind.ActionPipeline.ActionResult)">
            <summary>
            Checks the action result.
            </summary>
            <param name="result">The result.</param>
            <returns>The value of the result.</returns>
        </member>
        <member name="T:SpecBind.Actions.ActionBase">
            <summary>
            A base class for an action in the pipeline.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ActionBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ActionBase"/> class.
            </summary>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:SpecBind.Actions.ActionBase.Execute(SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="P:SpecBind.Actions.ActionBase.Name">
            <summary>
            Gets the action name.
            </summary>
            <value>The action name.</value>
        </member>
        <member name="P:SpecBind.Actions.ActionBase.ElementLocator">
            <summary>
            Gets or sets the element locator.
            </summary>
            <value>The element locator.</value>
        </member>
        <member name="T:SpecBind.Actions.BasicValidationChecksActionBase">
            <summary>
            A base class for the basic checks like items existing and are enabled.
            </summary>
        </member>
        <member name="T:SpecBind.Actions.ContextActionBase`1">
            <summary>
            A base class for actions that converts the context to the desired override type.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:SpecBind.Actions.ContextActionBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ActionBase"/> class.
            </summary>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:SpecBind.Actions.ContextActionBase`1.Execute(SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the context could not be converted to the desired type.</exception>
        </member>
        <member name="M:SpecBind.Actions.ContextActionBase`1.Execute(`0)">
            <summary>
            Executes the action using the specified <paramref name="context"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:SpecBind.Actions.BasicValidationChecksActionBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.BasicValidationChecksActionBase"/> class.
            </summary>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:SpecBind.Actions.BasicValidationChecksActionBase.CheckElement(SpecBind.Pages.IPropertyData)">
            <summary>
            Checks the element.
            </summary>
            <param name="propertyData">The property data.</param>
            <returns><c>true</c> if the element passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Actions.BasicValidationChecksActionBase.Execute(SpecBind.Actions.ValidationCheckContext)">
            <summary>
            Executes the specified action using the context.
            </summary>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="P:SpecBind.Actions.BasicValidationChecksActionBase.FalseErrorMessage">
            <summary>
            Gets the false error message.
            </summary>
            <value>The false error message.</value>
        </member>
        <member name="P:SpecBind.Actions.BasicValidationChecksActionBase.TrueErrorMessage">
            <summary>
            Gets the true error message.
            </summary>
            <value>The true error message.</value>
        </member>
        <member name="T:SpecBind.Actions.ButtonClickAction">
            <summary>
            An action that performs a button click
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ButtonClickAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ButtonClickAction"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ButtonClickAction.Execute(SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Actions.DismissDialogAction">
            <summary>
            An action that dismisses a dialog on the screen.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.DismissDialogAction.#ctor(SpecBind.BrowserSupport.IBrowser)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.DismissDialogAction"/> class.
            </summary>
            <param name="browser">The browser.</param>
        </member>
        <member name="M:SpecBind.Actions.DismissDialogAction.Execute(SpecBind.Actions.DismissDialogAction.DismissDialogContext)">
            <summary>
            Executes the specified action using the context.
            </summary>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:SpecBind.Actions.DismissDialogAction.ParseAction(System.String)">
            <summary>
            Parses the action.
            </summary>
            <param name="buttonName">Name of the button.</param>
            <returns>The parsed action name.</returns>
        </member>
        <member name="T:SpecBind.Actions.DismissDialogAction.DismissDialogContext">
            <summary>
            Class DismissDialogContext.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.DismissDialogAction.DismissDialogContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.DismissDialogAction.DismissDialogContext"/> class.
            </summary>
            <param name="buttonName">Name of the button.</param>
        </member>
        <member name="M:SpecBind.Actions.DismissDialogAction.DismissDialogContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.DismissDialogAction.DismissDialogContext"/> class.
            </summary>
            <param name="buttonName">Name of the button.</param>
            <param name="text">The text.</param>
        </member>
        <member name="P:SpecBind.Actions.DismissDialogAction.DismissDialogContext.IsTextEntered">
            <summary>
            Gets a value indicating whether this instance is text entered.
            </summary>
            <value><c>true</c> if this instance is text entered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Actions.DismissDialogAction.DismissDialogContext.ButtonName">
            <summary>
            Gets the name of the button to choose.
            </summary>
            <value>The name of the button.</value>
        </member>
        <member name="P:SpecBind.Actions.DismissDialogAction.DismissDialogContext.Text">
            <summary>
            Gets the text to input.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:SpecBind.Actions.EnterDataAction">
            <summary>
            An action that enters data into a field.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.EnterDataAction.#ctor(SpecBind.Helpers.ITokenManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.EnterDataAction"/> class.
            </summary>
            <param name="tokenManager">The token manager.</param>
        </member>
        <member name="M:SpecBind.Actions.EnterDataAction.Execute(SpecBind.Actions.EnterDataAction.EnterDataContext)">
            <summary>
            Executes the specified action using the context.
            </summary>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Actions.EnterDataAction.EnterDataContext">
            <summary>
            An extended context class to pass fill data.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.EnterDataAction.EnterDataContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.EnterDataAction.EnterDataContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:SpecBind.Actions.EnterDataAction.EnterDataContext.Data">
            <summary>
            Gets the data that should be entered.
            </summary>
            <value>The data that should be entered.</value>
        </member>
        <member name="T:SpecBind.Actions.GetElementAsPageAction">
            <summary>
            An action that returns a property as a new page child scope.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.GetElementAsPageAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.GetElementAsPageAction"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.GetElementAsPageAction.Execute(SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Actions.GetListItemByCriteriaAction">
            <summary>
            An action that gets an item in the list by some given criteria.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.GetListItemByCriteriaAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.GetListItemByCriteriaAction"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.GetListItemByCriteriaAction.Execute(SpecBind.Actions.GetListItemByCriteriaAction.ListItemByCriteriaContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Actions.GetListItemByCriteriaAction.ListItemByCriteriaContext">
            <summary>
            A context for the class.
            </summary>
        </member>
        <member name="T:SpecBind.Validation.IValidationTable">
            <summary>
            An interface that indicates that an action has a validation table as part of it.
            </summary>
        </member>
        <member name="P:SpecBind.Validation.IValidationTable.ValidationTable">
            <summary>
            Gets the validation table.
            </summary>
            <value>The validation table.</value>
        </member>
        <member name="M:SpecBind.Actions.GetListItemByCriteriaAction.ListItemByCriteriaContext.#ctor(System.String,SpecBind.Validation.ValidationTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ActionContext"/> class.
            </summary>
            <param name="listName">Name of the list.</param>
            <param name="validationTable">The validation table.</param>
        </member>
        <member name="P:SpecBind.Actions.GetListItemByCriteriaAction.ListItemByCriteriaContext.ValidationTable">
            <summary>
            Gets the validation table.
            </summary>
            <value>The validation table.</value>
        </member>
        <member name="T:SpecBind.Actions.GetListItemByIndexAction">
            <summary>
            An action that gets the list item by the requested index in the list.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.GetListItemByIndexAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.GetListItemByIndexAction"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.GetListItemByIndexAction.Execute(SpecBind.Actions.GetListItemByIndexAction.ListItemByIndexContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Actions.GetListItemByIndexAction.ListItemByIndexContext">
            <summary>
            A context for the get list by index action.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.GetListItemByIndexAction.ListItemByIndexContext.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.GetListItemByIndexAction.ListItemByIndexContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="itemNumber">The item number.</param>
        </member>
        <member name="P:SpecBind.Actions.GetListItemByIndexAction.ListItemByIndexContext.ItemNumber">
            <summary>
            Gets the item number.
            </summary>
            <value>The item number.</value>
        </member>
        <member name="T:SpecBind.Actions.ILogger">
            <summary>
            A logger for marking diagnostics in the system.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the debug level message.
            </summary>
            <param name="format">The format for the message.</param>
            <param name="args">The arguments for the message.</param>
        </member>
        <member name="M:SpecBind.Actions.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs the information level message.
            </summary>
            <param name="format">The format for the message.</param>
            <param name="args">The arguments for the message.</param>
        </member>
        <member name="T:SpecBind.Actions.NavigationPostAction">
            <summary>
            A post-action base class that only triggers when navigation is successful.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.NavigationPostAction.PerformPostAction(SpecBind.ActionPipeline.IAction,SpecBind.ActionPipeline.ActionContext,SpecBind.ActionPipeline.ActionResult)">
            <summary>
            Performs the post-execute action.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The action context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:SpecBind.Actions.NavigationPostAction.OnPageNavigate(SpecBind.Pages.IPage,SpecBind.Actions.PageNavigationAction.PageAction,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Called when page navigation has occurred.
            </summary>
            <param name="page">The page that has been navigated to.</param>
            <param name="actionType">Type of the action.</param>
            <param name="pageArguments">The page arguments.</param>
        </member>
        <member name="T:SpecBind.Actions.PageNavigationAction">
            <summary>
            An action that performs any necessary navigation actions.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.PageNavigationAction.#ctor(SpecBind.BrowserSupport.IBrowser,SpecBind.Actions.ILogger,SpecBind.Pages.IPageMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.PageNavigationAction"/> class.
            </summary>
            <param name="browser">The browser.</param>
            <param name="logger">The logger.</param>
            <param name="pageMapper">The page mapper.</param>
        </member>
        <member name="M:SpecBind.Actions.PageNavigationAction.Execute(SpecBind.Actions.PageNavigationAction.PageNavigationActionContext)">
            <summary>
            Executes the action.
            </summary>
            <param name="context">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Actions.PageNavigationAction.PageAction">
            <summary>
            Enumerates the type of page action to be performed.
            </summary>
        </member>
        <member name="F:SpecBind.Actions.PageNavigationAction.PageAction.NavigateToPage">
            <summary>
            Navigate to a page
            </summary>
        </member>
        <member name="F:SpecBind.Actions.PageNavigationAction.PageAction.EnsureOnPage">
            <summary>
            The ensure on page
            </summary>
        </member>
        <member name="T:SpecBind.Actions.PageNavigationAction.PageNavigationActionContext">
            <summary>
            The action context for passing in page arguments
            </summary>
        </member>
        <member name="M:SpecBind.Actions.PageNavigationAction.PageNavigationActionContext.#ctor(System.String,SpecBind.Actions.PageNavigationAction.PageAction,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ActionContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="pageAction">The page action.</param>
            <param name="pageArguments">The page arguments.</param>
        </member>
        <member name="P:SpecBind.Actions.PageNavigationAction.PageNavigationActionContext.PageAction">
            <summary>
            Gets the page action.
            </summary>
            <value>The page action.</value>
        </member>
        <member name="P:SpecBind.Actions.PageNavigationAction.PageNavigationActionContext.PageArguments">
            <summary>
            Gets the page arguments.
            </summary>
            <value>The page arguments.</value>
        </member>
        <member name="T:SpecBind.Actions.SetTokenFromValueAction">
            <summary>
            An action that gets the content of an item.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.SetTokenFromValueAction.#ctor(SpecBind.Helpers.ITokenManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.SetTokenFromValueAction"/> class.
            </summary>
            <param name="tokenManager">The token manager.</param>
        </member>
        <member name="M:SpecBind.Actions.SetTokenFromValueAction.Execute(SpecBind.Actions.SetTokenFromValueAction.TokenFieldContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Actions.SetTokenFromValueAction.TokenFieldContext">
            <summary>
            An extended context that holds the token name.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.SetTokenFromValueAction.TokenFieldContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.SetTokenFromValueAction.TokenFieldContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="tokenName">Name of the token.</param>
        </member>
        <member name="P:SpecBind.Actions.SetTokenFromValueAction.TokenFieldContext.TokenName">
            <summary>
            Gets the name of the token.
            </summary>
            <value>The name of the token.</value>
        </member>
        <member name="T:SpecBind.Actions.HighlightLocatorAction">
            <summary>
            A pre-action that highlights elements when enabled.
            </summary>
        </member>
        <member name="F:SpecBind.Actions.HighlightLocatorAction.HighlightMode">
            <summary>
            The highlight mode tag constant.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.HighlightLocatorAction.#ctor(SpecBind.Helpers.IScenarioContextHelper,SpecBind.Helpers.ISettingHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.HighlightLocatorAction"/> class.
            </summary>
            <param name="contextHelper">The context helper.</param>
            <param name="settingHelper">The setting helper.</param>
        </member>
        <member name="M:SpecBind.Actions.HighlightLocatorAction.OnLocate(System.String)">
            <summary>
            Called when an element is about to be located.
            </summary>
            <param name="key">The element key.</param>
        </member>
        <member name="M:SpecBind.Actions.HighlightLocatorAction.OnLocateComplete(System.String,SpecBind.Pages.IPropertyData)">
            <summary>
            Called when an element is completed.
            </summary>
            <param name="key">The element key.</param>
            <param name="item">The item if located; otherwise <c>null</c>.</param>
        </member>
        <member name="M:SpecBind.Actions.HighlightLocatorAction.HighlightModeEnabled">
            <summary>
            Checks to see if highlighting mode is enabled
            </summary>
            <returns><c>true</c> if the mode is enabled; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:SpecBind.Actions.ValidateElementEnabledAction">
            <summary>
            An action that validates that the element exists.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateElementEnabledAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ValidateElementEnabledAction"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateElementEnabledAction.CheckElement(SpecBind.Pages.IPropertyData)">
            <summary>
            Checks the element.
            </summary>
            <param name="propertyData">The property data.</param>
            <returns><c>true</c> if the element exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SpecBind.Actions.ValidateElementEnabledAction.FalseErrorMessage">
            <summary>
            Gets the false error message.
            </summary>
            <value>The false error message.</value>
        </member>
        <member name="P:SpecBind.Actions.ValidateElementEnabledAction.TrueErrorMessage">
            <summary>
            Gets the true error message.
            </summary>
            <value>The true error message.</value>
        </member>
        <member name="T:SpecBind.Actions.ValidateElementExistsAction">
            <summary>
            An action that validates that the element exists.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateElementExistsAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.BasicValidationChecksActionBase"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateElementExistsAction.CheckElement(SpecBind.Pages.IPropertyData)">
            <summary>
            Checks the element.
            </summary>
            <param name="propertyData">The property data.</param>
            <returns><c>true</c> if the element exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SpecBind.Actions.ValidateElementExistsAction.FalseErrorMessage">
            <summary>
            Gets the false error message.
            </summary>
            <value>The false error message.</value>
        </member>
        <member name="P:SpecBind.Actions.ValidateElementExistsAction.TrueErrorMessage">
            <summary>
            Gets the true error message.
            </summary>
            <value>The true error message.</value>
        </member>
        <member name="T:SpecBind.Actions.ValidateItemAction">
            <summary>
            An action that helps perform item validation.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateItemAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ValidateItemAction"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateItemAction.Execute(SpecBind.Actions.ValidateItemAction.ValidateItemContext)">
            <summary>
            Executes the specified action based on the context.
            </summary>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:SpecBind.Actions.ValidateItemAction.ValidateProperty(SpecBind.Validation.ItemValidation,SpecBind.Pages.ValidationItemResult)">
            <summary>
            Validates the property.
            </summary>
            <param name="validation">The validation.</param>
            <param name="itemResult">The item result.</param>
            <returns><c>true</c> if the validation is successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Actions.ValidateItemAction.ValidateItemContext">
            <summary>
            The data context for validating an item.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateItemAction.ValidateItemContext.#ctor(SpecBind.Validation.ValidationTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ValidateItemAction.ValidateItemContext"/> class.
            </summary>
            <param name="validationTable">The validation table.</param>
        </member>
        <member name="P:SpecBind.Actions.ValidateItemAction.ValidateItemContext.ValidationTable">
            <summary>
            Gets the validation table.
            </summary>
            <value>The validation table.</value>
        </member>
        <member name="T:SpecBind.Actions.ValidateListAction">
            <summary>
            An action that validates a list of items for specific actions.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateListAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ValidateListAction"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateListAction.Execute(SpecBind.Actions.ValidateListAction.ValidateListContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Actions.ValidateListAction.ValidateListContext">
            <summary>
            A context for list validation.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateListAction.ValidateListContext.#ctor(System.String,SpecBind.Pages.ComparisonType,SpecBind.Validation.ValidationTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ValidateListAction.ValidateListContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="compareType">Type of the compare.</param>
            <param name="validations">The validations.</param>
        </member>
        <member name="P:SpecBind.Actions.ValidateListAction.ValidateListContext.CompareType">
            <summary>
            Gets the type of the compare.
            </summary>
            <value>The type of the compare.</value>
        </member>
        <member name="P:SpecBind.Actions.ValidateListAction.ValidateListContext.ValidationTable">
            <summary>
            Gets the validation table.
            </summary>
            <value>The validation table.</value>
        </member>
        <member name="T:SpecBind.Actions.ValidateTokenAction">
            <summary>
            An action that validates a token value.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateTokenAction.#ctor(SpecBind.Helpers.ITokenManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ValidateTokenAction"/> class.
            </summary>
            <param name="tokenManager">The token manager.</param>
        </member>
        <member name="M:SpecBind.Actions.ValidateTokenAction.Execute(SpecBind.Actions.ValidateTokenAction.ValidateTokenActionContext)">
            <summary>
            Executes the action.
            </summary>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:SpecBind.Actions.ValidateTokenAction.ValidateToken(SpecBind.Validation.ItemValidation,SpecBind.Pages.ValidationItemResult)">
            <summary>
            Validates the token.
            </summary>
            <param name="validation">The validation.</param>
            <param name="itemResult">The validation item result.</param>
            <returns><c>true</c> if the validation is successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Actions.ValidateTokenAction.ValidateTokenActionContext">
            <summary>
            The token validation context.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidateTokenAction.ValidateTokenActionContext.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ValidateTokenAction.ValidateTokenActionContext"/> class.
            </summary>
            <param name="tokenName">Name of the token.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <param name="comparisonValue">The comparison value.</param>
        </member>
        <member name="P:SpecBind.Actions.ValidateTokenAction.ValidateTokenActionContext.ValidationTable">
            <summary>
            Gets the validation table.
            </summary>
            <value>The validation table.</value>
        </member>
        <member name="T:SpecBind.Actions.ValidationCheckContext">
            <summary>
            Class ValidationCheckContext.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.ValidationCheckContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.ValidationCheckContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="shouldExist">if set to <c>true</c> the element should exist.</param>
        </member>
        <member name="P:SpecBind.Actions.ValidationCheckContext.ShouldExist">
            <summary>
            Gets a value indicating whether the should exist or have a positive outcome.
            </summary>
            <value><c>true</c> if  it should should exist; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SpecBind.Actions.WaitConditions">
            <summary>
            Enumerates the different conditions to wait for on a control.
            </summary>
        </member>
        <member name="F:SpecBind.Actions.WaitConditions.Exists">
            <summary>
            Checks that the control exists and is visible.
            </summary>
        </member>
        <member name="F:SpecBind.Actions.WaitConditions.NotExists">
            <summary>
            Checks that the control does not exist.
            </summary>
        </member>
        <member name="F:SpecBind.Actions.WaitConditions.Enabled">
            <summary>
            Checks that the control is enabled.
            </summary>
        </member>
        <member name="F:SpecBind.Actions.WaitConditions.NotEnabled">
            <summary>
            Checks that the control is not enabled.
            </summary>
        </member>
        <member name="T:SpecBind.Actions.WaitForElementAction">
            <summary>
            An action that waits for an element to be in a certain condition.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.WaitForElementAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.WaitForElementAction"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.WaitForElementAction.Execute(SpecBind.Actions.WaitForElementAction.WaitForElementContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The action result.</returns>
        </member>
        <member name="T:SpecBind.Actions.WaitForElementAction.WaitForElementContext">
            <summary>
            The action context for the <see cref="T:SpecBind.Actions.WaitForElementAction"/>.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.WaitForElementAction.WaitForElementContext.#ctor(System.String,SpecBind.Actions.WaitConditions,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.WaitForElementAction.WaitForElementContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="condition">The condition.</param>
            <param name="timeout">The timeout for waiting.</param>
        </member>
        <member name="P:SpecBind.Actions.WaitForElementAction.WaitForElementContext.Condition">
            <summary>
            Gets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:SpecBind.Actions.WaitForElementAction.WaitForElementContext.Timeout">
            <summary>
            Gets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:SpecBind.Actions.WaitForListItemsAction">
            <summary>
            An action that waits for a list element to contain items.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.WaitForListItemsAction.#ctor(SpecBind.Actions.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.WaitForListItemsAction"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:SpecBind.Actions.WaitForListItemsAction.Execute(SpecBind.Actions.WaitForListItemsAction.WaitForListItemsContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:SpecBind.Actions.WaitForListItemsAction.CheckForPage(SpecBind.Pages.IPropertyData,System.Threading.CancellationToken)">
            <summary>
            Checks for page.
            </summary>
            <param name="listElement">the list element.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="T:SpecBind.Actions.WaitForListItemsAction.WaitForListItemsContext">
            <summary>
            An action context for the action.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.WaitForListItemsAction.WaitForListItemsContext.#ctor(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ActionContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:SpecBind.Actions.WaitForListItemsAction.WaitForListItemsContext.Timeout">
            <summary>
            Gets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:SpecBind.Actions.WaitForPageAction">
            <summary>
            An action that waits for the framework url to resolve to a certain page.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.WaitForPageAction.#ctor(SpecBind.Pages.IPageMapper,SpecBind.BrowserSupport.IBrowser,SpecBind.Actions.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Actions.WaitForPageAction"/> class.
            </summary>
            <param name="pageMapper">The page mapper.</param>
            <param name="browser">The browser.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:SpecBind.Actions.WaitForPageAction.Execute(SpecBind.Actions.WaitForPageAction.WaitForPageActionContext)">
            <summary>
            Executes this instance action.
            </summary>
            <param name="actionContext">The action context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:SpecBind.Actions.WaitForPageAction.CheckForPage(System.Type,System.Threading.CancellationToken)">
            <summary>
            Checks for page.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="token">The token.</param>
            <returns>The page object once the item is located.</returns>
        </member>
        <member name="T:SpecBind.Actions.WaitForPageAction.WaitForPageActionContext">
            <summary>
            An action context for the action.
            </summary>
        </member>
        <member name="M:SpecBind.Actions.WaitForPageAction.WaitForPageActionContext.#ctor(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ActionContext"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:SpecBind.Actions.WaitForPageAction.WaitForPageActionContext.Timeout">
            <summary>
            Gets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:SpecBind.AlertBoxSteps">
            <summary>
            A set of SpecFlow steps that assist with browser dialog manipulation.
            </summary>
        </member>
        <member name="T:SpecBind.PageStepBase">
            <summary>
            A base class for any steps that need to get a page from the current context.
            </summary>
        </member>
        <member name="F:SpecBind.PageStepBase.CurrentPageKey">
            <summary>
            The scenario context key for holding the current page.
            </summary>
        </member>
        <member name="M:SpecBind.PageStepBase.#ctor(SpecBind.Helpers.IScenarioContextHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.PageStepBase"/> class.
            </summary>
            <param name="scenarioContext">The scenario context.</param>
        </member>
        <member name="M:SpecBind.PageStepBase.GetPageFromContext">
            <summary>
            Gets the page from the scenario context.
            </summary>
            <returns>The current page.</returns>
        </member>
        <member name="M:SpecBind.PageStepBase.UpdatePageContext(SpecBind.Pages.IPage)">
            <summary>
            Updates the page context with the given <paramref name="page"/>.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:SpecBind.AlertBoxSteps.#ctor(SpecBind.ActionPipeline.IActionPipelineService,SpecBind.Helpers.IScenarioContextHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.AlertBoxSteps"/> class.
            </summary>
            <param name="actionPipelineService">The action pipeline service.</param>
            <param name="scenarioContext">The scenario context.</param>
        </member>
        <member name="M:SpecBind.AlertBoxSteps.SeeAlertAndSelectButton(System.String)">
            <summary>
            A step for seeing a dialog box and selecting an action.
            </summary>
            <param name="buttonName">Name of the button.</param>
        </member>
        <member name="M:SpecBind.AlertBoxSteps.SeeAlertEnterTextAndSelectButton(System.String,System.String)">
            <summary>
            A step for seeing a dialog box, entering some text and selecting an action.
            </summary>
            <param name="text">The text.</param>
            <param name="buttonName">Name of the button.</param>
        </member>
        <member name="M:SpecBind.AlertBoxSteps.CallDialogAction(SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Calls the dialog action in the pipeline service.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:SpecBind.BrowserSupport.AlertBoxAction">
            <summary>
            Enumerates the available alert box actions.
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.AlertBoxAction.Cancel">
            <summary>
            An action that represents clicking Cancel.
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.AlertBoxAction.Close">
            <summary>
            An action that represents clicking Close.
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.AlertBoxAction.Ignore">
            <summary>
            An action that represents clicking Ignore.
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.AlertBoxAction.No">
            <summary>
            An action that represents clicking No.
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.AlertBoxAction.Ok">
            <summary>
            An action that represents clicking OK.
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.AlertBoxAction.Retry">
            <summary>
            An action that represents clicking Retry.
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.AlertBoxAction.Yes">
            <summary>
            An action that represents clicking Yes.
            </summary>
        </member>
        <member name="T:SpecBind.BrowserSupport.BrowserBase">
            <summary>
            A set of extension methods for the <see cref="T:SpecBind.BrowserSupport.IBrowser"/> interface.
            </summary>
        </member>
        <member name="T:SpecBind.BrowserSupport.IBrowser">
            <summary>
            An interface to describe browser methods.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.DismissAlert(SpecBind.BrowserSupport.AlertBoxAction,System.String)">
            <summary>
            Dismisses the alert.
            </summary>
            <param name="action">The action.</param>
            <param name="text">The text to enter.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.EnsureOnPage(SpecBind.Pages.IPage)">
            <summary>
            Ensures the on page.
            </summary>
            <param name="page">The page.</param>
            <exception cref="T:SpecBind.Pages.PageNavigationException">Thrown if the page is not on the current page.</exception>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.GetUriForPageType(System.Type)">
            <summary>
            Gets the URI for the page if supported by the browser.
            </summary>
            <param name="pageType">Type of the page.</param>
            <returns>The URI partial string if found.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.GoTo(System.Uri)">
            <summary>
            Navigates the browser to the given <paramref name="url"/>.
            </summary>
            <param name="url">The URL specified as a well formed Uri.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.GoToPage(System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Navigates to the specified URL defined by the page.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="parameters">The parameters to fill it in.</param>
            <returns>The page object when navigated to.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.Page(System.Type)">
            <summary>
            Gets the page instance from the browser.
            </summary>
            <param name="pageType">Type of the page.</param>
            <returns>
            The page object.
            </returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.TakeScreenshot(System.String,System.String)">
            <summary>
            Takes the screenshot from the native browser.
            </summary>
            <param name="imageFolder">The image folder.</param>
            <param name="fileNameBase">The file name base.</param>
            <returns>The full path of the image file.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.SaveHtml(System.String,System.String)">
            <summary>
            Save the html from the native browser.
            </summary>
            <param name="destinationFolder">The destination folder.</param>
            <param name="fileNameBase">The file name base.</param>
            <returns>The complete file path if created; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.ExecuteScript(System.String,System.Object[])">
            <summary>
            Executes the script.
            </summary>
            <param name="script">The script to execute.</param>
            <param name="args">The arguments.</param>
            <returns>The result of the script if needed.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.IBrowser.DeleteAllCookies">
            <summary>
            Deletes all cookies stored for the current page setting up the browser for the next test
            </summary>
        </member>
        <member name="P:SpecBind.BrowserSupport.IBrowser.BasePageType">
            <summary>
            Gets the type of the base page.
            </summary>
            <value>
            The type of the base page.
            </value>
        </member>
        <member name="P:SpecBind.BrowserSupport.IBrowser.Url">
            <summary>
            Gets the url of the current page.
            </summary>
            <value>
            The url of the base page.
            </value>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.#ctor(SpecBind.Actions.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.BrowserSupport.BrowserBase"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.DismissAlert(SpecBind.BrowserSupport.AlertBoxAction,System.String)">
            <summary>
            Dismisses the alert.
            </summary>
            <param name="action">The action.</param>
            <param name="text">The text to enter.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.GoTo(System.Uri)">
            <summary>
            Navigates the browser to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL specified as a well formed Uri.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.EnsureOnPage(SpecBind.Pages.IPage)">
            <summary>
            Ensures the page is current in the browser window.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.ExecuteScript(System.String,System.Object[])">
            <summary>
            Executes the script.
            </summary>
            <param name="script">The script to execute.</param>
            <param name="args">The arguments.</param>
            <returns>The result of the script if needed.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.DeleteAllCookies">
            <summary>
            Deletes all cookies stored for the current page setting up the browser for the next test
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.GetUriForPageType(System.Type)">
            <summary>
            Gets the URI for the page if supported by the browser.
            </summary>
            <param name="pageType">Type of the page.</param>
            <returns>
            The URI partial string if found.
            </returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.GoToPage(System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Navigates to the specified URL defined by the page.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="parameters">The parameters to fill in any blanks.</param>
            <returns>
            The page object when navigated to.
            </returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.Page``1">
            <summary>
            Pages this instance.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <returns>A new page object.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.Page(System.Type)">
            <summary>
            Gets the page instance from the browser.
            </summary>
            <param name="pageType">Type of the page.</param>
            <returns>
            The page object.
            </returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.TakeScreenshot(System.String,System.String)">
            <summary>
            Takes the screenshot from the native browser.
            </summary>
            <param name="imageFolder">The image folder.</param>
            <param name="fileNameBase">The file name base.</param>
            <returns>The complete file path if created; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.SaveHtml(System.String,System.String)">
            <summary>
            Save the html from the native browser.
            </summary>
            <param name="destinationFolder">The destination folder.</param>
            <param name="fileNameBase">The file name base.</param>
            <returns>The complete file path if created; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.CheckIsOnPage(System.Type,SpecBind.Pages.IPage,System.String@,System.String@)">
            <summary>
            Checks wither the page matches the current browser URL.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="page">The page to do further testing if it exists.</param>
            <param name="actualPath">The actual path.</param>
            <param name="expectedPath">The expected path.</param>
            <returns><c>true</c> if it is a match.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.GetNativePageLocation(SpecBind.Pages.IPage)">
            <summary>
            Gets the native page location.
            </summary>
            <param name="page">The page interface.</param>
            <returns>A collection of URIs to validate.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserBase.CreateNativePage(System.Type,System.Boolean)">
            <summary>
            Creates the native page.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="verifyPageValidity">if set to <c>true</c> verify the page's validity.</param>
            <returns>A page interface.</returns>
        </member>
        <member name="P:SpecBind.BrowserSupport.BrowserBase.BasePageType">
            <summary>
            Gets the type of the base page.
            </summary>
            <value>The type of the base page.</value>
        </member>
        <member name="P:SpecBind.BrowserSupport.BrowserBase.Url">
            <summary>
            Gets the url of the current page.
            </summary>
            <value>
            The url of the base page.
            </value>
        </member>
        <member name="T:SpecBind.BrowserSupport.BrowserExtensions">
            <summary>
            A set of extension methods for <see cref="T:SpecBind.BrowserSupport.IBrowser"/> to assist with navigation.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserExtensions.EnsureOnPage``1(SpecBind.BrowserSupport.IBrowser)">
            <summary>
            Ensures the browser is on the given page.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <param name="browser">The browser.</param>
            <exception cref="T:SpecBind.Pages.PageNavigationException">Thrown if the page is not the current page.</exception>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserExtensions.EnsureOnPage(SpecBind.BrowserSupport.IBrowser,System.Type,SpecBind.Pages.IPage@)">
            <summary>
            Ensures the browser is on the given page.
            </summary>
            <param name="browser">The browser.</param>
            <param name="pageType">Type of the page.</param>
            <param name="page">The page.</param>
            <exception cref="T:SpecBind.Pages.PageNavigationException">Thrown if the page is not the current page.</exception>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserExtensions.GoToPage``1(SpecBind.BrowserSupport.IBrowser)">
            <summary>
            Ensures the browser is on the given page. If not, it navigates to the page.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <param name="browser">The browser.</param>
            <returns>The page that was navigated to.</returns>
        </member>
        <member name="T:SpecBind.BrowserSupport.BrowserFactory">
            <summary>
            A factory class that helps create a browser instance.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.BrowserSupport.BrowserFactory"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.GetBrowser">
            <summary>
            Gets the browser for the test run.
            </summary>
            <returns>A new browser object.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.GetBrowserFactory(SpecBind.Actions.ILogger)">
            <summary>
            Gets the browser factory.
            </summary>
            <param name="logger">The logger.</param>
            <returns>A created browser factory.</returns>
            <exception cref="T:System.InvalidOperationException">
            The specBind config section must have a browser factor with a provider configured.
            </exception>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.ValidateDriverSetup">
            <summary>
            Validates the driver setup.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.CreateBrowser(SpecBind.BrowserSupport.BrowserType,SpecBind.Configuration.BrowserFactoryConfigurationElement,SpecBind.Actions.ILogger)">
            <summary>
            Creates the browser.
            </summary>
            <param name="browserType">Type of the browser.</param>
            <param name="browserFactoryConfiguration">The browser factory configuration.</param>
            <param name="logger">The logger.</param>
            <returns>A browser object.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.GetBrowserType(SpecBind.Configuration.BrowserFactoryConfigurationElement)">
            <summary>
            Gets the type of the browser to leverage.
            </summary>
            <param name="section">The configuration section.</param>
            <returns>The browser type.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.ValidateDriverSetup(SpecBind.BrowserSupport.BrowserType,SpecBind.Configuration.BrowserFactoryConfigurationElement)">
            <summary>
            Validates the driver setup.
            </summary>
            <param name="browserType">Type of the browser.</param>
            <param name="browserFactoryConfiguration">The browser factory configuration.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.LoadConfigurationAndCreateBrowser(System.Func{SpecBind.BrowserSupport.BrowserType,SpecBind.Configuration.BrowserFactoryConfigurationElement,SpecBind.Actions.ILogger,SpecBind.BrowserSupport.IBrowser})">
            <summary>
            Loads the configuration and creates the browser object.
            </summary>
            <param name="createMethod">The create method.</param>
            <returns>The <see cref="T:SpecBind.BrowserSupport.IBrowser"/> object.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.OnAssemblyCheck(System.Reflection.AssemblyName)">
            <summary>
            Called when an assembly load failure occurs, this will try to load it from the same directory as the main assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>The resolved assembly.</returns>
        </member>
        <member name="M:SpecBind.BrowserSupport.BrowserFactory.OnGetType(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Called when The type should be resolved.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="typeName">The type name.</param>
            <param name="ignoreCase">if set to <c>true</c> ignore the case.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="P:SpecBind.BrowserSupport.BrowserFactory.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:SpecBind.BrowserSupport.BrowserType">
            <summary>
            Enumerates the various supported browsers.
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.IE">
            <summary>
            Internet Explorer
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.FireFox">
            <summary>
            FireFox browser
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.Chrome">
            <summary>
            Chrome Browser
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.Safari">
            <summary>
            Safari Browser
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.Opera">
            <summary>
            Opera Browser
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.Android">
            <summary>
            Android Emulator
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.iPhone">
            <summary>
            iOS iPhone Emulator
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.iPad">
            <summary>
            iOS iPad Emulator
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.PhantomJS">
            <summary>
            PhantomJS Browser
            </summary>
        </member>
        <member name="F:SpecBind.BrowserSupport.BrowserType.ChromeCanary">
            <summary>
            Chrome Canary Browser
            </summary>
        </member>
        <member name="T:SpecBind.BrowserSupport.NullLogger">
            <summary>
            A logger class that does nothing.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.NullLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the debug level message.
            </summary>
            <param name="format">The format for the message.</param>
            <param name="args">The arguments for the message.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.NullLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the information level message.
            </summary>
            <param name="format">The format for the message.</param>
            <param name="args">The arguments for the message.</param>
        </member>
        <member name="T:SpecBind.BrowserSupport.ReusableBrowser">
            <summary>
            Wraps an IBrowser instance allowing it to survive the disposal of the SpecFlow IObjectContainer
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.ReusableBrowser.#ctor(SpecBind.BrowserSupport.IBrowser)">
            <summary>
            Constructs a Reusable Browser wrapper for a concrete IBrowser instance
            </summary>
            <param name="browser">The concrete IBrowser instance</param>
        </member>
        <member name="T:SpecBind.BrowserSupport.TestRunContext">
            <summary>
            Spec Flow Context that survives the entire test run
            </summary>
        </member>
        <member name="T:SpecBind.Configuration.ApplicationConfigurationElement">
            <summary>
            A configuration element that handles settings for the application.
            </summary>
        </member>
        <member name="P:SpecBind.Configuration.ApplicationConfigurationElement.StartUrl">
            <summary>
            Gets or sets the application's start URL setting.
            </summary>
            <value>The application's start URL setting.</value>
        </member>
        <member name="T:SpecBind.Configuration.BrowserFactoryConfigurationElement">
            <summary>
            A configuration element for the browser factory.
            </summary>
        </member>
        <member name="P:SpecBind.Configuration.BrowserFactoryConfigurationElement.BrowserType">
            <summary>
            Gets or sets the type of the browser to use for testing.
            </summary>
            <value>The type of the browser to use for testing.</value>
        </member>
        <member name="P:SpecBind.Configuration.BrowserFactoryConfigurationElement.ElementLocateTimeout">
            <summary>
            Gets or sets the timeout for waiting to locate an element.
            </summary>
            <value>The timeout for waiting for waiting to locate an element.</value>
        </member>
        <member name="P:SpecBind.Configuration.BrowserFactoryConfigurationElement.EnsureCleanSession">
            <summary>
            Gets or sets a value indicating whether the session cache and cookies should be cleared before starting.
            </summary>
            <value><c>true</c> if the session should be cleared; otherwise <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Configuration.BrowserFactoryConfigurationElement.Provider">
            <summary>
            Gets or sets the provider for the element.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:SpecBind.Configuration.BrowserFactoryConfigurationElement.PageLoadTimeout">
            <summary>
            Gets or sets the timeout for waiting for a page to load.
            </summary>
            <value>The timeout for waiting for a page to load.</value>
        </member>
        <member name="P:SpecBind.Configuration.BrowserFactoryConfigurationElement.DriverNeedsValidation">
            <summary>
            Gets or sets a value indicating whether the chosen browser should be tested to verify it is installed and working befor starting test run.
            </summary>
            <value><c>true</c> if the browser should be tested; otherwise <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Configuration.BrowserFactoryConfigurationElement.ReuseBrowser">
            <summary>
            Gets or sets a value indicating whether the chosen browser should be reused across all tests.
            </summary>
            <value><c>true</c> if the browser should be tested; otherwise <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Configuration.BrowserFactoryConfigurationElement.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:SpecBind.Configuration.ConfigurationSectionHandler">
            <summary>
            Handles the SpecBind configuration section to obtain settings.
            </summary>
        </member>
        <member name="M:SpecBind.Configuration.ConfigurationSectionHandler.CreateFromXml(System.String)">
            <summary>
            Creates the configuration node from XML.
            </summary>
            <param name="xmlContent">Content of the XML.</param>
            <returns>The created configuration section.</returns>
        </member>
        <member name="P:SpecBind.Configuration.ConfigurationSectionHandler.Application">
            <summary>
            Gets or sets the application configuration element.
            </summary>
            <value>The application configuration element.</value>
        </member>
        <member name="P:SpecBind.Configuration.ConfigurationSectionHandler.BrowserFactory">
            <summary>
            Gets or sets the browser factory configuration element.
            </summary>
            <value>The browser factory configuration element.</value>
        </member>
        <member name="T:SpecBind.ActionPipeline.ActionPipelineService">
            <summary>
            A class that manages actions that should be taken during parts of the process
            </summary>
            <remarks>
            The pipeline works as follows:
            1. Populate the element locater, this is an extension of this class and can this call actions.
            2. Perform any pre actions (current use is unknown but may be helpful)
            3. Perform the main action and acquire the result
            4. Perform any post actions (current use is unknown but may be helpful)
            5. Return result
            </remarks>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionPipelineService.#ctor(SpecBind.ActionPipeline.IActionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.ActionPipeline.ActionPipelineService"/> class.
            </summary>
            <param name="actionRepository">The action repository.</param>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionPipelineService.PerformAction``1(SpecBind.Pages.IPage,SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Performs the action.
            </summary>
            <typeparam name="TAction">The type of the action.</typeparam>
            <param name="page">The page.</param>
            <param name="context">The context.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionPipelineService.PerformAction(SpecBind.Pages.IPage,SpecBind.ActionPipeline.IAction,SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Performs the action.
            </summary>
            <param name="page">The page.</param>
            <param name="action">The action.</param>
            <param name="context">The context.</param>
            <returns>The result of the action</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionPipelineService.CreateElementLocater(SpecBind.Pages.IPage)">
            <summary>
            Creates the element locater.
            </summary>
            <param name="page">The page.</param>
            <returns>The element locater interface.</returns>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionPipelineService.PerformPreAction(SpecBind.ActionPipeline.IAction,SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Performs any actions ahead of the actual action.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The action context.</param>
        </member>
        <member name="M:SpecBind.ActionPipeline.ActionPipelineService.PerformPostAction(SpecBind.ActionPipeline.IAction,SpecBind.ActionPipeline.ActionContext,SpecBind.ActionPipeline.ActionResult)">
            <summary>
            Performs any actions after the actual action.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The action context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:SpecBind.DataSteps">
            <summary>
            Step bindings related to entering or validating data.
            </summary>
        </member>
        <member name="M:SpecBind.DataSteps.#ctor(SpecBind.Helpers.IScenarioContextHelper,SpecBind.ActionPipeline.IActionPipelineService)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.DataSteps"/> class.
            </summary>
            <param name="scenarioContext">The scenario context.</param>
            <param name="actionPipelineService">The action pipeline service.</param>
        </member>
        <member name="M:SpecBind.DataSteps.WhenIEnterDataInFieldsStep(TechTalk.SpecFlow.Table)">
            <summary>
            A When step for entering data into fields.
            </summary>
            <param name="data">The field data.</param>
        </member>
        <member name="M:SpecBind.DataSteps.ThenISeeStep(TechTalk.SpecFlow.Table)">
            <summary>
            A Then step
            </summary>
            <param name="data">The field data.</param>
        </member>
        <member name="M:SpecBind.DataSteps.ThenISeeListStep(System.String,System.String,TechTalk.SpecFlow.Table)">
            <summary>
            A Then step for validating items in a list.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="rule">The rule.</param>
            <param name="data">The field data.</param>
            <exception cref="T:SpecBind.Pages.ElementExecuteException">A table must be specified for this step with the columns 'Field', 'Rule' and 'Value'</exception>
        </member>
        <member name="T:SpecBind.Helpers.AttributeExtensions">
            <summary>
            An extension class to help get attributes from a type.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.AttributeExtensions.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type to check.</param>
            <param name="inherit">if set to <c>true</c> inherit from base classes.</param>
            <returns>
            The attribute if located; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Helpers.AttributeExtensions.TryGetAttribute``1(System.Type,``0@,System.Boolean)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type to check.</param>
            <param name="attribute">The returned attribute.</param>
            <param name="inherit">if set to <c>true</c> inherit from base classes.</param>
            <returns>
              <c>true</c> If the attribute if located; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:SpecBind.Helpers.FileUploadHelper">
            <summary>
            A helper class for uploading files to the server.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.FileUploadHelper.UploadFile(System.String,System.Action{System.String})">
            <summary>
            Uploads the file, finding the resource and creating a temporary path for it.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="uploadAction">The upload action, passing in the temporary file path.</param>
        </member>
        <member name="T:SpecBind.Helpers.ISettingHelper">
            <summary>
            An interface that allows classes access to configuration settings.
            </summary>
        </member>
        <member name="P:SpecBind.Helpers.ISettingHelper.HighlightModeEnabled">
            <summary>
            Gets a value indicating whether highlight mode is enabled in configuration or app settings.
            </summary>
            <returns><c>true</c> if highlight mode is enabled, <c>false</c> otherwise</returns>
        </member>
        <member name="T:SpecBind.Helpers.ITokenManager">
            <summary>
            A token manager for getting or setting tokens.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.ITokenManager.GetToken(System.String)">
            <summary>
            Gets the token from the field if it exists and is on the context.
            </summary>
            <param name="fieldValue">The field value.</param>
            <returns>The original value if not a token; otherwise the parsed token.</returns>
        </member>
        <member name="M:SpecBind.Helpers.ITokenManager.GetTokenByKey(System.String)">
            <summary>
            Gets the token by key.
            </summary>
            <param name="key">The key.</param>
            <returns>The token value; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.Helpers.ITokenManager.SetToken(System.String)">
            <summary>
            Parses a token if it exists and sets the value on the context.
            </summary>
            <param name="fieldValue">The field value.</param>
            <returns>The original value if not a token; otherwise the parsed token.</returns>
        </member>
        <member name="M:SpecBind.Helpers.ITokenManager.SetToken(System.String,System.String)">
            <summary>
            Sets the token into the context.
            </summary>
            <param name="tokenName">Name of the token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpecBind.BrowserSupport.ProxyLogger">
            <summary>
            A logger class that proxies values to the SpecFlow infrastructure.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.ProxyLogger.#ctor(TechTalk.SpecFlow.Tracing.ITraceListener)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.BrowserSupport.ProxyLogger"/> class.
            </summary>
            <param name="traceListener">The trace listener.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.ProxyLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the debug level message.
            </summary>
            <param name="format">The format for the message.</param>
            <param name="args">The arguments for the message.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.ProxyLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the information level message.
            </summary>
            <param name="format">The format for the message.</param>
            <param name="args">The arguments for the message.</param>
        </member>
        <member name="T:SpecBind.Helpers.ResourceLocator">
            <summary>
            A class that assists in locating resources in the project.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.ResourceLocator.GetResource(System.String)">
            <summary>
            Gets the resource.
            </summary>
            <param name="itemName">Name of the item.</param>
            <returns>The data if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.Helpers.ResourceLocator.GetResourceNames">
            <summary>
            Gets the resource names.
            </summary>
            <returns>A list of resource names.</returns>
        </member>
        <member name="M:SpecBind.Helpers.ResourceLocator.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:SpecBind.Helpers.TableFormater`1">
            <summary>
            Assists in printing the results as a specflow table.
            </summary>
            <typeparam name="TItem">The type of the item to be printed.</typeparam>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Helpers.TableFormater`1"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.ExcludePrintingIfNoRows">
            <summary>
            Excludes the printing of the table if no rows exist..
            </summary>
            <returns>The table formatter class for additional configuration.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.AddColumn``1(System.String,System.Func{`0,``0},System.Func{``0,System.String},System.Func{``0,System.Tuple{System.Boolean,System.String}},System.Nullable{System.Int32})">
            <summary>
            Adds the column.
            </summary>
            <typeparam name="TField">The type of the T field.</typeparam>
            <param name="header">The header.</param>
            <param name="cellSelector">The cell selector.</param>
            <param name="valueSelector">The value selector.</param>
            <param name="validationSelector">The validation selector to indicate if the cell is valid and it's actual value otherwise.</param>
            <param name="index">The index.</param>
            <returns>The table formatter class for additional configuration.</returns>
            <exception cref="T:System.ArgumentNullException">cellSelector
            or
            valueSelector</exception>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.CreateTable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates the comparison table.
            </summary>
            <param name="items">The items to convert into a table.</param>
            <returns>The formatted comparison table.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.GetFormattedCell(System.String,System.Boolean,System.String)">
            <summary>
            Gets the formatted cell value.
            </summary>
            <param name="value">The value.</param>
            <param name="isValid">if set to <c>true</c> the cell data is valid.</param>
            <param name="actualValue">The actual value.</param>
            <returns>The cell value formatted as a string.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.PrintCell(System.Int32,System.String,System.Boolean)">
            <summary>
            Prints the cell value including any additional padding or spacing.
            </summary>
            <param name="maxLength">Length of the max.</param>
            <param name="value">The value.</param>
            <param name="isHeader">if set to <c>true</c> this is a header cell.</param>
            <returns>The formatted cell value with padding and formatting.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.PrintTableItem(SpecBind.Helpers.TableItemType,System.Boolean)">
            <summary>
            Prints the table item.
            </summary>
            <param name="tableItemType">Type of the table item.</param>
            <param name="isHeader">if set to <c>true</c> this is the header row.</param>
            <returns>The formatting for the cell.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.LoadCellData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Loads the cells into each column.
            </summary>
            <param name="itemList">The item list.</param>
            <returns>The number of rows loaded.</returns>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>The column count.</value>
        </member>
        <member name="T:SpecBind.Helpers.TableFormater`1.IColumnInformation">
            <summary>
            Represents the column information so the concrete type can hold cell types.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.IColumnInformation.AddCellForItem(`0,System.Func{System.String,System.Boolean,System.String,System.String})">
            <summary>
            Adds a cell for column.
            </summary>
            <param name="item">The item.</param>
            <param name="formatter">The function used to format the cell value.</param>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.IColumnInformation.GetCellValue(System.Int32)">
            <summary>
            Gets the cell value.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <returns>The value of the cell.</returns>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.IColumnInformation.Header">
            <summary>
            Gets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.IColumnInformation.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.IColumnInformation.MaxLength">
            <summary>
            Gets the length of the max.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="T:SpecBind.Helpers.TableFormater`1.ColumnInformation`1">
            <summary>
            Holds the processing column information for the cell.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Helpers.TableFormater`1.ColumnInformation`1"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.AddCellForItem(`0,System.Func{System.String,System.Boolean,System.String,System.String})">
            <summary>
            Adds a cell for column.
            </summary>
            <param name="item">The item.</param>
            <param name="formatter">The function used to format the cell value.</param>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.GetCellValue(System.Int32)">
            <summary>
            Gets the cell value.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <returns>The value of the cell.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.GetMaxLength">
            <summary>
            Gets the max length of the cells.
            </summary>
            <returns>The maximum length of the cells.</returns>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.CellSelector">
            <summary>
            Gets or sets the cell selector.
            </summary>
            <value>The cell selector.</value>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.MaxLength">
            <summary>
            Gets the maximum length of the column content.
            </summary>
            <value>The maximum length of the column content.</value>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.ValidationSelector">
            <summary>
            Gets or sets the validation selector.
            </summary>
            <value>The validation selector.</value>
        </member>
        <member name="P:SpecBind.Helpers.TableFormater`1.ColumnInformation`1.ValueSelector">
            <summary>
            Gets or sets the value selector.
            </summary>
            <value>The value selector.</value>
        </member>
        <member name="T:SpecBind.Helpers.TableItemType">
            <summary>
            Enumerated the type of printable item to format.
            </summary>
        </member>
        <member name="F:SpecBind.Helpers.TableItemType.TableStart">
            <summary>
            The table start
            </summary>
        </member>
        <member name="F:SpecBind.Helpers.TableItemType.TableEnd">
            <summary>
            The table end
            </summary>
        </member>
        <member name="F:SpecBind.Helpers.TableItemType.RowStart">
            <summary>
            The row start
            </summary>
        </member>
        <member name="F:SpecBind.Helpers.TableItemType.RowEnd">
            <summary>
            The row end
            </summary>
        </member>
        <member name="F:SpecBind.Helpers.TableItemType.CellStart">
            <summary>
            The cell start
            </summary>
        </member>
        <member name="F:SpecBind.Helpers.TableItemType.CellEnd">
            <summary>
            The cell end
            </summary>
        </member>
        <member name="T:SpecBind.Helpers.TokenManager">
            <summary>
            A token manager class that will parse out tokens and save or get them from the context.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.TokenManager.#ctor(SpecBind.Helpers.IScenarioContextHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Helpers.TokenManager"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SpecBind.Helpers.TokenManager.GetToken(System.String)">
            <summary>
            Gets the token from the field if it exists and is on the context.
            </summary>
            <param name="fieldValue">The field value.</param>
            <returns>The original value if not a token; otherwise the parsed token.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TokenManager.GetTokenByKey(System.String)">
            <summary>
            Gets the token by key.
            </summary>
            <param name="key">The key.</param>
            <returns>The token value; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TokenManager.SetToken(System.String)">
            <summary>
            Parses a token if it exists and sets the value on the context.
            </summary>
            <param name="fieldValue">The field value.</param>
            <returns>The original value if not a token; otherwise the parsed token.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TokenManager.SetToken(System.String,System.String)">
            <summary>
            Sets the token into the context.
            </summary>
            <param name="tokenName">Name of the token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SpecBind.Helpers.TokenManager.GetTokenName(System.String)">
            <summary>
            Gets the name of the token.
            </summary>
            <param name="baseName">Name of the base.</param>
            <returns>The qualified token name.</returns>
        </member>
        <member name="M:SpecBind.Helpers.TokenManager.GetRandomString(System.Int32)">
            <summary>
            Gets the random string.
            </summary>
            <param name="length">The length.</param>
            <returns>
            A random string.
            </returns>
        </member>
        <member name="M:SpecBind.Helpers.TokenManager.TryParseToken(System.String,SpecBind.Helpers.TokenManager.TokenData@)">
            <summary>
            Tries to parse the field as a token.
            </summary>
            <param name="fieldValue">The field value.</param>
            <param name="data">The data.</param>
            <returns><c>true</c> if it is a token; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:SpecBind.Helpers.TokenManager.Current">
            <summary>
            Gets the current token manager.
            </summary>
            <value>
            The current token manager.
            </value>
        </member>
        <member name="T:SpecBind.Helpers.TokenManager.TokenData">
            <summary>
            A class to hold any parsed data.
            </summary>
        </member>
        <member name="P:SpecBind.Helpers.TokenManager.TokenData.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SpecBind.Helpers.TokenManager.TokenData.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:SpecBind.Helpers.ValidationTableExtensions">
            <summary>
            A set of extension methods that build a validation table from a SpecBind table.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.ValidationTableExtensions.ToValidationTable(TechTalk.SpecFlow.Table)">
            <summary>
            Converts the SpecFlow table to a validation table. This expects a field, rule, and value column.
            </summary>
            <param name="table">The table.</param>
            <returns>The created validation table.</returns>
            <exception cref="T:SpecBind.Pages.ElementExecuteException">A table must be specified for this step with the columns 'Field', 'Rule' and 'Value'</exception>
        </member>
        <member name="T:SpecBind.Helpers.WrappedSettingHelper">
            <summary>
            An implementation of <see cref="T:SpecBind.Helpers.ISettingHelper"/> that wraps the static settings class.
            </summary>
        </member>
        <member name="P:SpecBind.Helpers.WrappedSettingHelper.HighlightModeEnabled">
            <summary>
            Gets a value indicating whether highlight mode is enabled in configuration or app settings.
            </summary>
            <returns><c>true</c> if highlight mode is enabled, <c>false</c> otherwise</returns>
        </member>
        <member name="T:SpecBind.Pages.ElementDescription">
            <summary>
            Describes information about a given element.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ElementDescription.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ElementDescription"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyType">The type of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:SpecBind.Pages.ElementDescription.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:SpecBind.Pages.ElementDescription.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:SpecBind.Pages.ElementDescription.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="T:SpecBind.Pages.ElementLocatorAttribute">
            <summary>
            An attribute for locating element on a page.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ElementLocatorAttribute.#ctor">
            <summary>
            Finds a component based on its attributes.
            </summary>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Alt">
            <summary>
            Gets or sets the alt text to find.
            </summary>
            <value>
            The alt.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Class">
            <summary>
            Gets or sets the (CSS) class name to find.
            </summary>
            <value>
            The class.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Id">
            <summary>
            Gets or sets the element id to find.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Index">
            <summary>
            Gets or sets the zero-based index of the element to find, or -1 if not constrained by index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Name">
            <summary>
            Gets or sets the element name to find.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.NormalizedTagName">
            <summary>
            Gets tag name property trimmed and lower case.
            </summary>
            <value>The name of the normalized tag.</value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.TagName">
            <summary>
            Gets or sets the name of the tag for a custom control. This should only be used with HtmlCustom type element.
            </summary>
            <value>
            The name of the tag.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Text">
            <summary>
            Gets or sets the (inner) text to find.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Title">
            <summary>
            Gets or sets the title to find.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Type">
            <summary>
            Gets or sets the type of control this is.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Url">
            <summary>
            Gets or sets the Url to find.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.Value">
            <summary>
            Gets or sets the value attribute to filter by.
            </summary>
            <value>The value attribute.</value>
        </member>
        <member name="P:SpecBind.Pages.ElementLocatorAttribute.CssSelector">
            <summary>
            Gets or sets the CSS selector to use
            </summary>
            <value>The CSS selector.</value>
        </member>
        <member name="T:SpecBind.Pages.ExpressionData">
            <summary>
            An smart structure for managing expressions and matching types.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ExpressionData.#ctor(System.Linq.Expressions.Expression,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ExpressionData"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="type">The type.</param>
            <param name="name">The name of the expression.</param>
        </member>
        <member name="M:SpecBind.Pages.ExpressionData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:SpecBind.Pages.ExpressionData.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:SpecBind.Pages.ExpressionData.Name">
            <summary>
            Gets the name of the expression if supplied.
            </summary>
            <value>The name of the expression.</value>
        </member>
        <member name="P:SpecBind.Pages.ExpressionData.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:SpecBind.Pages.IActiveCheck">
            <summary>
            An interface that can be applied to a page to allow it to wait for it to become active.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IActiveCheck.WaitForActive">
            <summary>
            Waits for the page to become active based on a property.
            </summary>
        </member>
        <member name="T:SpecBind.Pages.IDataControl">
            <summary>
            An interface that allows a control to manually define how data is set in it.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IDataControl.SetValue(System.String)">
            <summary>
            Sets the value in the control.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:SpecBind.Pages.IElementList`2">
            <summary>
            An interface that represents a list of child elements.
            </summary>
            <typeparam name="TElement">The type of the parent element.</typeparam>
            <typeparam name="TChildElement">The type of the child element.</typeparam>
        </member>
        <member name="P:SpecBind.Pages.IElementList`2.Parent">
            <summary>
            Gets the parent element.
            </summary>
            <value>
            The parent element.
            </value>
        </member>
        <member name="T:SpecBind.Pages.IElementProvider">
            <summary>
            An interface that instructs the page builder to ask the implementation for property values.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IElementProvider.GetElements">
            <summary>
            Gets the element properties on the control.
            </summary>
            <returns>A collection of properties.</returns>
        </member>
        <member name="T:SpecBind.Pages.IPageElementHandler`1">
            <summary>
            An interface that manages page elements.
            </summary>
            <typeparam name="TElement">The type of the basic element on a page.</typeparam>
        </member>
        <member name="T:SpecBind.Pages.IPage">
            <summary>
            An interface that defines a page in the system.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IPage.GetNativePage``1">
            <summary>
            Gets the native page object.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <returns>
            The native page object.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.IPage.GetPropertyNames(System.Func{SpecBind.Pages.IPropertyData,System.Boolean})">
            <summary>
            Gets the property names.
            </summary>
            <param name="filter">The filter.</param>
            <returns>A list of matching properties.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPage.Highlight">
            <summary>
            Highlights this instance.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IPage.TryGetElement(System.String,SpecBind.Pages.IPropertyData@)">
            <summary>
            Tries the get the element.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="propertyData">
            The property data.
            </param>
            <returns>
            <c>true</c> if the element exists; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.IPage.TryGetProperty(System.String,SpecBind.Pages.IPropertyData@)">
            <summary>
            Tries the get the element.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="propertyData">
            The property data.
            </param>
            <returns>
            <c>true</c> if the element exists; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.IPage.WaitForPageToBeActive">
            <summary>
            Waits for the page to become active based on some user content.
            </summary>
        </member>
        <member name="P:SpecBind.Pages.IPage.PageType">
            <summary>
            Gets the type of the page.
            </summary>
            <value>
            The type of the page.
            </value>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.ElementEnabledCheck(`0)">
            <summary>
            Elements the enabled check.
            </summary>
            <param name="element">The element.</param>
            <returns><c>true</c> if the element is enabled.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.ElementExistsCheck(`0)">
            <summary>
            Gets the element exists check function.
            </summary>
            <param name="element">The element.</param>
            <returns>
            True if the element exists; otherwise false.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.GetElementAttributeValue(`0,System.String)">
            <summary>
            Gets the element attribute value.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The attribute's value.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.GetElementText(`0)">
            <summary>
            Gets the element text.
            </summary>
            <param name="element">The element.</param>
            <returns>The element's text.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.GetPageFromElement(`0)">
            <summary>
            Gets the page from element.
            </summary>
            <param name="element">The element.</param>
            <returns>The page interface.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.ClickElement(`0)">
            <summary>
            Gets the click element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            True if the click is successful.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.GetPageFillMethod(System.Type)">
            <summary>
            Gets the page fill method.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <returns>
            The function used to fill the data.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.Highlight(`0)">
            <summary>
            Highlights the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:SpecBind.Pages.IPageElementHandler`1.WaitForElement(`0,SpecBind.Actions.WaitConditions,System.Nullable{System.TimeSpan})">
            <summary>
            Waits for element.
            </summary>
            <param name="element">The element.</param>
            <param name="waitCondition">The wait condition.</param>
            <param name="timeout">The timeout to wait before failing.</param>
            <returns><c>true</c> if the condition is met, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Pages.IPropertyData">
            <summary>
            The property data interface for interaction.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.ClickElement">
            <summary>
            Clicks the element that this property represents.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.CheckElementEnabled">
            <summary>
            Checks to see if the element exists.
            </summary>
            <returns><c>true</c> if the element exists.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.CheckElementExists">
            <summary>
            Checks to see if the element exists.
            </summary>
            <returns><c>true</c> if the element exists.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.FillData(System.String)">
            <summary>
            Fills the data on the element.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.GetCurrentValue">
            <summary>
            Gets the current value of the property.
            </summary>
            <returns>The current value as a string.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.GetItemAtIndex(System.Int32)">
            <summary>
            Gets the index of the item at.
            </summary>
            <param name="index">The index.</param>
            <returns>The item as an <see cref="T:SpecBind.Pages.IPage"/> item; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.GetItemAsPage">
            <summary>
            Gets the item as page.
            </summary>
            <returns>The item as a page.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.Highlight">
            <summary>
            Highlights this instance.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.ValidateItem(SpecBind.Validation.ItemValidation,System.String@)">
            <summary>
            Validates the item or property matches the expected expression.
            </summary>
            <param name="validation">The validation item.</param>
            <param name="actualValue">The actual value if validation fails.</param>
            <returns>
              <c>true</c> if the items are valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.ValidateList(SpecBind.Pages.ComparisonType,System.Collections.Generic.ICollection{SpecBind.Validation.ItemValidation})">
            <summary>
            Validates the list.
            </summary>
            <param name="compareType">Type of the compare.</param>
            <param name="validations">The validations.</param>
            <returns>The validation result including checks performed.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.WaitForElementCondition(SpecBind.Actions.WaitConditions,System.Nullable{System.TimeSpan})">
            <summary>
            Waits for element condition.
            </summary>
            <param name="waitCondition">The wait condition.</param>
            <param name="timeout">The timeout to wait before failing.</param>
            <returns><c>true</c> if the condition is met, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Pages.IPropertyData.FindItemInList(System.Collections.Generic.ICollection{SpecBind.Validation.ItemValidation})">
            <summary>
            Validates the list.
            </summary>
            <param name="validations">The validations.</param>
            <returns>The validation result including checks performed.</returns>
        </member>
        <member name="P:SpecBind.Pages.IPropertyData.IsElement">
            <summary>
                Gets a value indicating whether this instance represents a page element.
            </summary>
            <value>
                <c>true</c> if this instance is a page element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpecBind.Pages.IPropertyData.IsList">
            <summary>
            Gets a value indicating whether this instance is a list.
            </summary>
            <value>
              <c>true</c> if this instance is a list; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpecBind.Pages.IPropertyData.Name">
            <summary>
            Gets the name if the property.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SpecBind.Pages.IPropertyData.PropertyType">
            <summary>
                Gets the type of the property.
            </summary>
            <value>
                The type of the property.
            </value>
        </member>
        <member name="T:SpecBind.Pages.ListElementWrapper`2">
            <summary>
            A wrapper class for lists of elements.
            </summary>
            <typeparam name="TElement">The type of the parent element.</typeparam>
            <typeparam name="TChildElement">The type of the child element.</typeparam>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.#ctor(`0,SpecBind.BrowserSupport.IBrowser)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ListElementWrapper`2"/> class.
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="webBrowser">The browser.</param>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.CreateElement(SpecBind.BrowserSupport.IBrowser,`0,System.Int32)">
            <summary>
            Creates the element.
            </summary>
            <param name="browser">The browser.</param>
            <param name="parentElement">The parent element.</param>
            <param name="index">The index.</param>
            <returns>The child element.</returns>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.ElementExists(`1,System.Int32)">
            <summary>
            Checks to see if the element actually exists according to the DOM.
            </summary>
            <param name="element">The element.</param>
            <param name="expectedIndex">The expected index of the element.</param>
            <returns><c>true</c> if the element exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.TryGetChildElement(System.Int32,`1@)">
            <summary>
            Tries the get child element.
            </summary>
            <param name="index">The index.</param>
            <param name="childElement">The child element.</param>
            <returns><c>true</c> if the element exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:SpecBind.Pages.ListElementWrapper`2.Parent">
            <summary>
            Gets the parent element.
            </summary>
            <value>
            The parent element.
            </value>
        </member>
        <member name="T:SpecBind.Pages.ListElementWrapper`2.ElementEnumerator">
            <summary>
            The enumerator for the element.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.ElementEnumerator.#ctor(SpecBind.Pages.ListElementWrapper{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ListElementWrapper`2.ElementEnumerator"/> class.
            </summary>
            <param name="parent">The child element builder.</param>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.ElementEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.ElementEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.ListElementWrapper`2.ElementEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:SpecBind.Pages.ListElementWrapper`2.ElementEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:SpecBind.Pages.ListElementWrapper`2.ElementEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:SpecBind.Pages.PageBase`2">
            <summary>
            A base class for pages.
            </summary>
            <typeparam name="TPageBase">The base type of any given page setup.</typeparam>
            <typeparam name="TElement">The type of the basic element on a page.</typeparam>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.#ctor(System.Type,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.PageBase`2"/> class.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.GetNativePage``1">
            <summary>
            Gets the native page object.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <returns>
            The native page object.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.GetPropertyNames(System.Func{SpecBind.Pages.IPropertyData,System.Boolean})">
            <summary>
            Gets the property names.
            </summary>
            <param name="filter">The filter.</param>
            <returns>
            A list of matching properties.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.Highlight">
            <summary>
            Highlights this instance.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.TryGetElement(System.String,SpecBind.Pages.IPropertyData@)">
            <summary>
            Tries the get the element.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="propertyData">
            The property data.
            </param>
            <returns>
            <c>true</c> if the element exists; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.TryGetProperty(System.String,SpecBind.Pages.IPropertyData@)">
            <summary>
            Tries the get the element.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="propertyData">
            The property data.
            </param>
            <returns>
            <c>true</c> if the element exists; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.WaitForPageToBeActive">
            <summary>
            Waits for the page to become active based on some user content.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.ElementEnabledCheck(`1)">
            <summary>
            Elements the enabled check.
            </summary>
            <param name="element">The element.</param>
            <returns><c>true</c> if the element is enabled.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.ElementExistsCheck(`1)">
            <summary>
            Gets the element exists check function.
            </summary>
            <param name="element">The element.</param>
            <returns>
            True if the element exists; otherwise false.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.GetElementAttributeValue(`1,System.String)">
            <summary>
            Gets the element attribute value.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.GetElementText(`1)">
            <summary>
            Gets the element text.
            </summary>
            <param name="element">The element.</param>
            <returns>The element's text.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.GetPageFromElement(`1)">
            <summary>
            Gets the page from element.
            </summary>
            <param name="element">The element.</param>
            <returns>The page element.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.ClickElement(`1)">
            <summary>
            Gets the click element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            True if the click is successful.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.GetPageFillMethod(System.Type)">
            <summary>
            Gets the page fill method.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <returns>
            The function used to fill the data.
            </returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.Highlight(`1)">
            <summary>
            Highlights the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.WaitForElement(`1,SpecBind.Actions.WaitConditions,System.Nullable{System.TimeSpan})">
            <summary>
            Waits for element condition to be met.
            </summary>
            <param name="element">The element.</param>
            <param name="waitCondition">The wait condition.</param>
            <param name="timeout">The time to wait before failing.</param>
            <returns><c>true</c> if the condition is met, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.TypeIsNotBaseClass(System.Reflection.PropertyInfo)">
            <summary>
            Checks to see if the current type matches the base type of the system to not reflect base properties.
            </summary>
            <param name="propertyInfo">Type of the page.</param>
            <returns><c>true</c> if the type is the base class, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.SupportedPropertyType(System.Type)">
            <summary>
            Checks to see if the property type is supported.
            </summary>
            <param name="type">The type being checked.</param>
            <returns><c>true</c> if the type is supported, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.AddElementProperty(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Adds the element property.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="propertyInfo">The property info.</param>
            <returns>The created element locator function.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.AddValueProperty(SpecBind.Pages.ElementDescription)">
            <summary>
            Adds the element property.
            </summary>
            <param name="elementDescription">The element description.</param>
            <returns>The value function.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.AddProperty(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Adds the element property.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="propertyInfo">The property info.</param>
            <returns>A tuple containing the get and set expressions.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.GetPageElement">
            <summary>
            Gets the page element.
            </summary>
            <returns>The page element.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.GetProperties">
            <summary>
            Gets the properties.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageBase`2.CheckForVirtualProperties(System.Reflection.MemberInfo,System.Func{SpecBind.Pages.IPage,System.Func{`1,System.Boolean},System.Boolean})">
            <summary>
            Checks for virtual properties and creates the structure for it.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="elementHandler">The property data.</param>
        </member>
        <member name="P:SpecBind.Pages.PageBase`2.PageType">
            <summary>
            Gets the type of the page.
            </summary>
            <value>
            The type of the page.
            </value>
        </member>
        <member name="T:SpecBind.PageNavigationSteps">
            <summary>
            A set of common step bindings that drive the underlying fixtures.
            </summary>
        </member>
        <member name="M:SpecBind.PageNavigationSteps.#ctor(SpecBind.Helpers.IScenarioContextHelper,SpecBind.ActionPipeline.IActionPipelineService)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.PageNavigationSteps"/> class.
            </summary>
            <param name="scenarioContext">The scenario context.</param>
            <param name="actionPipelineService">The action pipeline service.</param>
        </member>
        <member name="M:SpecBind.PageNavigationSteps.GivenEnsureOnPageStep(System.String)">
            <summary>
            A Given step for ensuring the browser is on the page with the specified name.
            </summary>
            <param name="pageName">The page name.</param>
        </member>
        <member name="M:SpecBind.PageNavigationSteps.GivenEnsureOnDialogStep(System.String)">
            <summary>
            A Given step for ensuring the browser is on the dialog which is a sub-element of the page.
            </summary>
            <param name="propertyName">Name of the property that represents the dialog.</param>
        </member>
        <member name="M:SpecBind.PageNavigationSteps.GivenNavigateToPageStep(System.String)">
            <summary>
            A Given step for navigating to a page with the specified name.
            </summary>
            <param name="pageName">The page name.</param>
        </member>
        <member name="M:SpecBind.PageNavigationSteps.GivenNavigateToPageWithArgumentsStep(System.String,TechTalk.SpecFlow.Table)">
            <summary>
            A Given step for navigating to a page with the specified name and url parameters.
            </summary>
            <param name="pageName">The page name.</param>
            <param name="pageArguments">The page arguments.</param>
        </member>
        <member name="M:SpecBind.PageNavigationSteps.WaitForPageStep(System.String)">
            <summary>
            A step that waits for a page to become visible.
            </summary>
            <param name="pageName">Name of the page.</param>
        </member>
        <member name="M:SpecBind.PageNavigationSteps.WaitForPageStepWithTimeout(System.Int32,System.String)">
            <summary>
            A step that waits for a page to become visible with a timeout.
            </summary>
            <param name="seconds">The seconds to wait for the page to appear.</param>
            <param name="pageName">Name of the page.</param>
        </member>
        <member name="M:SpecBind.PageNavigationSteps.CallWaitForPageAction(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Calls the wait for page action.
            </summary>
            <param name="pageName">Name of the page.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="T:SpecBind.Helpers.IScenarioContextHelper">
            <summary>
            An interface that provides the target class with the scenario context.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.IScenarioContextHelper.ContainsTag(System.String)">
            <summary>
            Determines whether the current scenario contains the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <returns>
              <c>true</c> the current scenario contains the specified tag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Helpers.IScenarioContextHelper.GetError">
            <summary>
            Gets the error.
            </summary>
            <returns>The exception if it exists; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.Helpers.IScenarioContextHelper.GetStepFileName">
            <summary>
            Gets the name of the step file.
            </summary>
            <returns>A unique file name for the scenario.</returns>
        </member>
        <member name="M:SpecBind.Helpers.IScenarioContextHelper.FeatureContainsTag(System.String)">
            <summary>
            Determines whether the current scenario's feature contains the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <returns><c>true</c> the current feature contains the specified tag; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.Helpers.IScenarioContextHelper.GetValue``1(System.String)">
            <summary>Sets the value.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns>The value if located.</returns>
        </member>
        <member name="M:SpecBind.Helpers.IScenarioContextHelper.SetValue``1(``0,System.String)">
            <summary>Sets the value.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:SpecBind.Helpers.ScenarioContextHelper">
            <summary>
            A helper class to abstract the scenario context.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.ScenarioContextHelper.ContainsTag(System.String)">
            <summary>
            Determines whether the current scenario contains the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <returns>
              <c>true</c> the current scenario contains the specified tag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Helpers.ScenarioContextHelper.GetStepFileName">
            <summary>
            Gets the name of the step file.
            </summary>
            <returns>A unique file name for the scenario.</returns>
        </member>
        <member name="M:SpecBind.Helpers.ScenarioContextHelper.FeatureContainsTag(System.String)">
            <summary>
            Determines whether the current scenario's feature contains the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <returns>
              <c>true</c> the current feature contains the specified tag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.Helpers.ScenarioContextHelper.GetError">
            <summary>
            Gets the error.
            </summary>
            <returns>The exception if it exists; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.Helpers.ScenarioContextHelper.GetValue``1(System.String)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <returns>The value if located.</returns>
        </member>
        <member name="M:SpecBind.Helpers.ScenarioContextHelper.SetValue``1(``0,System.String)">
            <summary>
            Sets the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:SpecBind.Helpers.ScenarioContextHelper.FindTag(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Determines whether the specified tags contains the given tag.
            </summary>
            <param name="tags">The tags collection.</param>
            <param name="searchTag">The search tag.</param>
            <returns><c>true</c> if the specified tags contains the given tag; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SpecBind.Helpers.SettingHelper">
            <summary>A helper class to get settings from the configuration file.</summary>
        </member>
        <member name="M:SpecBind.Helpers.SettingHelper.GetConfigurationSection">
            <summary>
            Gets the configuration section.
            </summary>
            <returns>The configuration section or <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.Helpers.SettingHelper.HighlightModeEnabled">
            <summary>
            Gets a value indicating wither highlight mode is enabled in configuration or app settings.
            </summary>
            <returns><c>true</c> if highlight mode is enabled, <c>false</c> otherwise</returns>
        </member>
        <member name="M:SpecBind.Helpers.SettingHelper.GetFileResource(System.Resources.ResourceManager,System.String)">
            <summary>
            Gets the file content from the resource file.
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <param name="fileName">Name of the file.</param>
            <returns>
            The resource content.
            </returns>
        </member>
        <member name="M:SpecBind.Helpers.SettingHelper.GetFileBinaryResource(System.Resources.ResourceManager,System.String)">
            <summary>
            Gets the file binary content from the resource file.
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <param name="fileName">Name of the file.</param>
            <returns>
            The resource content.
            </returns>
        </member>
        <member name="T:SpecBind.Helpers.StringLookupExtensions">
            <summary>
            A set of extension methods to help lookups and mappings.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.StringLookupExtensions.#cctor">
            <summary>
            Initializes the <see cref="T:SpecBind.Helpers.StringLookupExtensions"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.StringLookupExtensions.ToLookupKey(System.String)">
            <summary>
            Converts the string to a lookup key by removing whitespace and making it lower case.
            </summary>
            <param name="source">The source string.</param>
            <returns>A normalized string value.</returns>
        </member>
        <member name="M:SpecBind.Helpers.StringLookupExtensions.NormalizedEquals(System.String,System.String)">
            <summary>
            Checks equality after normalizing the source string.
            </summary>
            <param name="source">The source string.</param>
            <param name="compareValue">The compare value.</param>
            <returns><c>true</c> if the strings are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.Helpers.StringLookupExtensions.RemoveWhitespace(System.String)">
            <summary>
            Removes the whitespace from the source string.
            </summary>
            <param name="source">The source.</param>
            <returns>The cleaned string.</returns>
        </member>
        <member name="T:SpecBind.Helpers.UriHelper">
            <summary>
            A helper to get to a page on the site.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.#cctor">
            <summary>
            Initializes the <see cref="T:SpecBind.Helpers.UriHelper"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.GetQualifiedPageUri(System.String)">
            <summary>
            Gets the fully qualified page URI.
            </summary>
            <param name="subPath">The sub path.</param>
            <returns>The fully qualifies URI.</returns>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.GetQualifiedPageUri(SpecBind.BrowserSupport.IBrowser,System.Type)">
            <summary>
            Gets the fully qualified page URI.
            </summary>
            <param name="browser">The browser.</param>
            <param name="pageType">Type of the page.</param>
            <returns>
            The fully qualified URI.
            </returns>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.GetQualifiedPageUriRegex(SpecBind.BrowserSupport.IBrowser,System.Type)">
            <summary>
            Gets the qualified page URI regex.
            </summary>
            <param name="browser">The browser.</param>
            <param name="pageType">Type of the page.</param>
            <returns>The fully qualified URI.</returns>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.GetPageUri(SpecBind.BrowserSupport.IBrowser,System.Type)">
            <summary>
            Gets the page URL.
            </summary>
            <param name="browser">The browser.</param>
            <param name="pageType">Type of the page.</param>
            <returns>
            The URL from the page.
            </returns>
            <exception cref="T:SpecBind.Pages.PageNavigationException">No PageAttribute or PageNavigationAttribute exists on type: {0}</exception>
            <exception cref="T:SpecBind.Pages.PageNavigationException">Thrown if the page is not able to navigate to.</exception>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.FillPageUri(SpecBind.BrowserSupport.IBrowser,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Fills the page URI with any substitutions.
            </summary>
            <param name="browser">The browser.</param>
            <param name="pageType">Type of the page.</param>
            <param name="pageArguments">The page arguments.</param>
            <returns>The completed string.</returns>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.CreateCompleteUri(SpecBind.Helpers.UriHelper.UriStructure,System.Boolean)">
            <summary>
            Creates the complete URI.
            </summary>
            <param name="uriStructure">The URI structure.</param>
            <param name="isRegex">if set to <c>true</c> the result should be is regex escaped.</param>
            <returns>The formatted URI.</returns>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.GetPageUriInternal(SpecBind.BrowserSupport.IBrowser,System.Type)">
            <summary>
            Gets the page URL via the page attributes.
            </summary>
            <param name="browser">The browser.</param>
            <param name="pageType">Type of the page.</param>
            <returns>
            The URL stricture from the page.
            </returns>
            <exception cref="T:SpecBind.Pages.PageNavigationException">No PageAttribute or PageNavigationAttribute exists on type: {0}</exception>
            <exception cref="T:SpecBind.Pages.PageNavigationException">Thrown if the page is not able to navigate to.</exception>
        </member>
        <member name="P:SpecBind.Helpers.UriHelper.BaseUri">
            <summary>
            Gets or sets the base URI.
            </summary>
            <value>The base URI.</value>
        </member>
        <member name="T:SpecBind.Helpers.UriHelper.UriStructure">
            <summary>
            A support class to pass around parsed parameters of the URI.
            </summary>
        </member>
        <member name="M:SpecBind.Helpers.UriHelper.UriStructure.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Helpers.UriHelper.UriStructure"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="isAbsolute">if set to <c>true</c> the path is an absolute URI.</param>
            <param name="urlTemplate">The fill pattern when publishing a URI.</param>
        </member>
        <member name="P:SpecBind.Helpers.UriHelper.UriStructure.UrlTemplate">
            <summary>
            Gets the fill pattern.
            </summary>
            <value>The fill pattern.</value>
        </member>
        <member name="P:SpecBind.Helpers.UriHelper.UriStructure.IsAbsolute">
            <summary>
            Gets a value indicating whether this instance is absolute.
            </summary>
            <value><c>true</c> if this instance is absolute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Helpers.UriHelper.UriStructure.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:SpecBind.BrowserSupport.WebDriverSupport">
            <summary>
            A hooks support class for the web driver.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.WebDriverSupport.#ctor(BoDi.IObjectContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.BrowserSupport.WebDriverSupport"/> class.
            </summary>
            <param name="objectContainer">The object container.</param>
        </member>
        <member name="M:SpecBind.BrowserSupport.WebDriverSupport.CheckForDriver">
            <summary>
            Checks the browser factory for any necessary drivers.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.WebDriverSupport.InitializeDriver">
            <summary>
            Initializes the page mapper at the start of the test run.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.WebDriverSupport.TearDownWebDriverAfterScenario">
            <summary>
            Tears down the web driver.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.WebDriverSupport.TearDownWebDriverAfterTestRun">
            <summary>
            Tears down the web driver.
            </summary>
        </member>
        <member name="M:SpecBind.BrowserSupport.WebDriverSupport.CheckForScreenshot(SpecBind.BrowserSupport.IBrowser)">
            <summary>
            Checks for screenshot.
            </summary>
            <param name="browser">The browser.</param>
        </member>
        <member name="T:SpecBind.Pages.ComparisonType">
            <summary>
            Enumerates the various comparison types supported.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.ComparisonType.Equals">
            <summary>
            The values equal each other.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.ComparisonType.DoesNotEqual">
            <summary>
            The values do not equal each other.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.ComparisonType.Contains">
            <summary>
            The value contains the comparison value.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.ComparisonType.StartsWith">
            <summary>
            The value starts with the comparison value.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.ComparisonType.EndsWith">
            <summary>
            The value end with the comparison value.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.ComparisonType.DoesNotContain">
            <summary>
            The value does not contain the comparison value.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.ComparisonType.Enabled">
            <summary>
            The element that contains the value is enabled.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.ComparisonType.Exists">
            <summary>
            The element that contains the value exists.
            </summary>
        </member>
        <member name="T:SpecBind.Pages.ElementExecuteException">
            <summary>
            An exception that indicates a failure occurred while executing a step element.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ElementExecuteException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ElementExecuteException"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:SpecBind.Pages.IPageMapper">
            <summary>
            An interface for a service that locates pages.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.IPageMapper.GetTypeFromName(System.String)">
            <summary>Gets the page type from the given name</summary>
            <param name="typeName">Name of the type.</param>
            <returns>The resolved type; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:SpecBind.Pages.PageAliasAttribute">
            <summary>
            An attribute that maps the page to a name.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageAliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.PageAliasAttribute"/> class.
            </summary>
            <param name="name">The alias name.</param>
        </member>
        <member name="P:SpecBind.Pages.PageAliasAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:SpecBind.Pages.PageBuilderBase`3">
            <summary>
            A base class for creating page models for the control.
            </summary>
            <typeparam name="TParent">The type of the parent control that should be injected into the page.</typeparam>
            <typeparam name="TOutput">The type of the created output control.</typeparam>
            <typeparam name="TElement">The type of the element control used for a property.</typeparam>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.PageBuilderBase`3"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.AssignElementAttributes(`2,SpecBind.Pages.ElementLocatorAttribute,System.Object[])">
            <summary>
            Assigns the element attributes.
            </summary>
            <param name="control">The control.</param>
            <param name="attribute">The attribute.</param>
            <param name="nativeAttributes">The native attributes.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.AssignPageElementAttributes(`1,SpecBind.Pages.ElementLocatorAttribute)">
            <summary>
            Assigns the page element attributes.
            </summary>
            <param name="control">The control.</param>
            <param name="locatorAttribute">The locator attribute.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.GetElementCollectionType">
            <summary>
            Gets the type of the element collection.
            </summary>
            <returns>A type that implements IElementList.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.GetTableDriverType">
            <summary>
            Gets the type of the table driver.
            </summary>
            <returns>A type that implements an enumerable collection.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.GetCustomAttributes(System.Reflection.PropertyInfo)">
            <summary>
            Gets the custom driver specific attributes for a given type.
            </summary>
            <param name="propertyInfo">Type of the item.</param>
            <returns>The collection of custom attributes.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.CheckPageIsBaseClass(`1)">
            <summary>
            Checks to see if the control is the same type as the base class and performs the appropriate actions.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.CreateElementInternal(System.Type)">
            <summary>
            Creates the page or wrapper element control.
            </summary>
            <param name="elementType">Type of the page.</param>
            <returns>The page builder function.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the constructor is invalid.</exception>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.CreateFrameLocatorInternal(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Creates the frame locator method to help load that from a property.
            </summary>
            <param name="frameType">Type of the class that will provide the frame.</param>
            <param name="property">The property on the class that should be accessed to provide the frame.</param>
            <returns>The function used to create the document.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.CreateConstructorException(System.String,System.Type)">
            <summary>
            Creates the constructor exception to be thrown if the type cannot be created.
            </summary>
            <param name="propertyName">Name of the property being created; otherwise <c>null</c>.</param>
            <param name="expectedControlType">Expected type of the control.</param>
            <returns>The exception that will be thrown to the user.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.FillConstructorParameter(System.Type,SpecBind.Pages.ExpressionData,SpecBind.Pages.ExpressionData)">
            <summary>
            Gets the constructor parameter for the given type.
            </summary>
            <param name="parameterType">Type of the parameter to fill.</param>
            <param name="parentArgument">The parent argument.</param>
            <param name="rootLocator">The root locator argument if different from the parent.</param>
            <returns>The constructor information that matches.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.GetPropertyProxyType(System.Type)">
            <summary>
            Gets the type of the property proxy.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <returns>The property type.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.SetPageNavigationAttribute(`1,SpecBind.Pages.PageNavigationAttribute)">
            <summary>
            Checks to see if the control is the same type as the base class and performs the appropriate actions.
            </summary>
            <param name="control">The control.</param>
            <param name="attribute">The page navigation attribute.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.AssignPageAttributes(`1,System.Action{`1})">
            <summary>
            Assigns the attributes for the document based on its metadata.
            </summary>
            <param name="control">The control.</param>
            <param name="customAction">The custom action.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.CreateNewItemExpression(System.Type)">
            <summary>
            Creates the new item expression that creates the object and initial mapping.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The initial creation lambda expression.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the constructor is invalid.</exception>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.GetConstructor(System.Type,SpecBind.Pages.PageBuilderContext)">
            <summary>
            Gets the constructor.
            </summary>
            <param name="itemType">Type of the item.</param>
            <param name="context">The page builder context.</param>
            <returns>The constructor information that matches.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.MapObjectProperties(System.Collections.Generic.ICollection{System.Linq.Expressions.Expression},System.Type,SpecBind.Pages.PageBuilderContext)">
            <summary>
            Maps the object properties for the given object.
            </summary>
            <param name="expressions">The parent expression list.</param>
            <param name="objectType">Type of the object.</param>
            <param name="context">The page builder context.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.CreateElementListItem(SpecBind.Pages.PageBuilderContext,System.Type,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.List{System.Linq.Expressions.Expression},SpecBind.Pages.ElementLocatorAttribute,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates the element list item.
            </summary>
            <param name="context">The context.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="variableList">The variable list.</param>
            <param name="propertyExpressions">The property expressions.</param>
            <param name="attribute">The attribute.</param>
            <param name="customAttributes">The custom attributes.</param>
            <returns>The expression used to create the item.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.BindTableElementProperty(System.Reflection.PropertyInfo,SpecBind.Pages.PageBuilderContext,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.List{System.Linq.Expressions.Expression},SpecBind.Pages.ElementLocatorAttribute,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Binds the table element property to the property expression stack.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="context">The page builder context.</param>
            <param name="variableList">The variable list.</param>
            <param name="propertyExpressions">The property expressions.</param>
            <param name="attribute">The attribute.</param>
            <param name="customAttributes">The custom attributes.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderBase`3.CreateHtmlObject(SpecBind.Pages.PageBuilderContext,SpecBind.Pages.ElementLocatorAttribute,System.Collections.IEnumerable)">
            <summary>
            Creates the HTML object for each property that is part of the parent.
            </summary>
            <param name="context">The context.</param>
            <param name="attribute">The attribute.</param>
            <param name="nativeAttributes">The native attributes.</param>
            <returns>The expressions needed to create the list</returns>
        </member>
        <member name="P:SpecBind.Pages.PageBuilderBase`3.AllowEmptyConstructor">
            <summary>
            Gets a value indicating whether to allow an empty constructor for a page object.
            </summary>
            <value><c>true</c> if an empty constructor should be allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SpecBind.Pages.PageBuilderContext">
            <summary>
            A class that holds the current context of variables and arguments used to construct items on the page.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderContext.#ctor(SpecBind.Pages.ExpressionData,SpecBind.Pages.ExpressionData,SpecBind.Pages.ExpressionData)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.PageBuilderContext"/> class.
            </summary>
            <param name="browser">The browser.</param>
            <param name="parentElement">The parent element.</param>
            <param name="document">The document.</param>
        </member>
        <member name="M:SpecBind.Pages.PageBuilderContext.CreateChildContext(SpecBind.Pages.ExpressionData)">
            <summary>
            Creates the child context.
            </summary>
            <param name="childContext">The new child context element.</param>
            <returns>The created child context.</returns>
        </member>
        <member name="P:SpecBind.Pages.PageBuilderContext.Browser">
            <summary>
            Gets the browser expression data.
            </summary>
            <value>The document expression data.</value>
        </member>
        <member name="P:SpecBind.Pages.PageBuilderContext.Document">
            <summary>
            Gets the document expression data.
            </summary>
            <value>The document expression data.</value>
        </member>
        <member name="P:SpecBind.Pages.PageBuilderContext.RootLocator">
            <summary>
            Gets the root locator expression data.
            </summary>
            <value>The root locator expression data.</value>
        </member>
        <member name="P:SpecBind.Pages.PageBuilderContext.ParentElement">
            <summary>
            Gets the parent element expression data.
            </summary>
            <value>The parent element expression data.</value>
        </member>
        <member name="P:SpecBind.Pages.PageBuilderContext.CurrentElement">
            <summary>
            Gets or sets the current property element being built.
            </summary>
            <value>The current property element.</value>
        </member>
        <member name="T:SpecBind.Pages.PageMapper">
            <summary>
            A mapping class to process all the items.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageMapper.#ctor">
            <summary>
            Initializes the <see cref="T:SpecBind.Pages.PageMapper"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageMapper.GetTypeFromName(System.String)">
            <summary>
            Gets the page type from the given name
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>The resolved type; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:SpecBind.Pages.PageMapper.Initialize(System.Type)">
            <summary>
            Maps the loaded assemblies into the type mapper.
            </summary>
            <param name="pageBaseType">Type of the page base.</param>
        </member>
        <member name="M:SpecBind.Pages.PageMapper.MapAssemblyTypes(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Maps the assembly types.
            </summary>
            <param name="types">The types.</param>
            <param name="pageBaseType">Type of the page base.</param>
        </member>
        <member name="P:SpecBind.Pages.PageMapper.MapCount">
            <summary>
            Gets the map count.
            </summary>
            <value>
            The map count.
            </value>
        </member>
        <member name="T:SpecBind.Pages.PageNavigationAttribute">
            <summary>
            An attribute that defines the location to call in the site to navigate to a page.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageNavigationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.PageNavigationAttribute"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="P:SpecBind.Pages.PageNavigationAttribute.FrameName">
            <summary>
            Gets or sets the name of the frame to use within a browser element.
            </summary>
            <value>The name of the frame.</value>
        </member>
        <member name="P:SpecBind.Pages.PageNavigationAttribute.IsAbsoluteUrl">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:SpecBind.Pages.PageNavigationAttribute.Url"/> property is a fully qualified URL or not.
            </summary>
            <value><c>true</c> if this instance is absolute URL; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Pages.PageNavigationAttribute.Url">
            <summary>
            Gets the URL to navigate to.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:SpecBind.Pages.PageNavigationAttribute.UrlTemplate">
            <summary>
            Gets or sets the fill template to use if a pattern is needed for the URI.
            </summary>
            <value>
            The fill template.
            </value>
        </member>
        <member name="T:SpecBind.Pages.PageNavigationException">
            <summary>
            An exception that is thrown when navigation fails.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.PageNavigationException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.PageNavigationException"/> class.
            </summary>
            <param name="pageType">Type of the page.</param>
            <param name="url">The URL.</param>
            <param name="actualUri">The actual URI.</param>
        </member>
        <member name="M:SpecBind.Pages.PageNavigationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.PageNavigationException"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:SpecBind.Pages.TableElement`1">
            <summary>
            An element on the page that represents a table
            </summary>
            <typeparam name="TCell">The type of the element that represents a cell.</typeparam>
        </member>
        <member name="M:SpecBind.Pages.TableElement`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:SpecBind.Pages.TableElement`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:SpecBind.Pages.TableElement`1.SetDriver(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the driver.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="T:SpecBind.Pages.TagConstants">
            <summary>
            A set of constants used by the system for tags.
            </summary>
        </member>
        <member name="F:SpecBind.Pages.TagConstants.Debug">
            <summary>
            A tag to indicate a debug scenario.
            </summary>
        </member>
        <member name="T:SpecBind.Pages.TypeExtensions">
            <summary>
            A set of extension methods to analyze types.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.TypeExtensions.IsSupportedPropertyType(System.Type,System.Type)">
            <summary>
            Determines whether the specified check type is a supported property type.
            </summary>
            <param name="checkType">The type to check.</param>
            <param name="elementType">Type of the elements used in the driver.</param>
            <returns><c>true</c> if the type is supported; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.Pages.TypeExtensions.IsElementListType(System.Type)">
            <summary>
            Checks to see if the given type is an element list.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <returns><c>true</c> if it is a list type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.Pages.TypeExtensions.IsTableElementType(System.Type)">
            <summary>
            Checks to see if the given type is an table element.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <returns><c>true</c> if it is a table element; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:SpecBind.Pages.ValidationItemResult">
            <summary>
            Represents an individual item's validation results.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ValidationItemResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ValidationItemResult"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ValidationItemResult.NoteMissingProperty(SpecBind.Validation.ItemValidation)">
            <summary>
            Notes the missing property.
            </summary>
            <param name="itemValidation">The item validation.</param>
        </member>
        <member name="M:SpecBind.Pages.ValidationItemResult.NoteValidationResult(SpecBind.Validation.ItemValidation,System.Boolean,System.String)">
            <summary>
            Notes the validation result.
            </summary>
            <param name="itemValidation">The item validation.</param>
            <param name="successful">if set to <c>true</c> the validation was successful.</param>
            <param name="actualValue">The actual value.</param>
        </member>
        <member name="P:SpecBind.Pages.ValidationItemResult.PropertyResults">
            <summary>
            Gets the property results.
            </summary>
            <value>The property results.</value>
        </member>
        <member name="T:SpecBind.Pages.ValidationItemResult.PropertyResult">
            <summary>
            The result of an individual validation result.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ValidationItemResult.PropertyResult.#ctor(SpecBind.Validation.ItemValidation)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ValidationItemResult.PropertyResult"/> class.
            </summary>
            <param name="validation">The validation.</param>
        </member>
        <member name="M:SpecBind.Pages.ValidationItemResult.PropertyResult.#ctor(SpecBind.Validation.ItemValidation,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ValidationItemResult.PropertyResult"/> class.
            </summary>
            <param name="itemValidation">The item validation.</param>
            <param name="successful">if set to <c>true</c> [successful].</param>
            <param name="actualValue">The actual value.</param>
        </member>
        <member name="P:SpecBind.Pages.ValidationItemResult.PropertyResult.ActualValue">
            <summary>
            Gets the actual value.
            </summary>
            <value>The actual value.</value>
        </member>
        <member name="P:SpecBind.Pages.ValidationItemResult.PropertyResult.FieldExists">
            <summary>
            Gets a value indicating whether the field exists.
            </summary>
            <value><c>true</c> if the field exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Pages.ValidationItemResult.PropertyResult.Validation">
            <summary>
            Gets the validation.
            </summary>
            <value>The validation.</value>
        </member>
        <member name="P:SpecBind.Pages.ValidationItemResult.PropertyResult.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SpecBind.Pages.ValidationResult">
            <summary>
            Tracks the individual validations on the list to create a trace in the completed exception.
            </summary>
        </member>
        <member name="M:SpecBind.Pages.ValidationResult.#ctor(System.Collections.Generic.IEnumerable{SpecBind.Validation.ItemValidation})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Pages.ValidationResult"/> class.
            </summary>
            <param name="validations">The validations being used.</param>
        </member>
        <member name="M:SpecBind.Pages.ValidationResult.GetComparisonTable">
            <summary>
            Gets the comparison table.
            </summary>
            <returns>The formatted comparison table.</returns>
        </member>
        <member name="M:SpecBind.Pages.ValidationResult.GetComparisonTableByRule">
            <summary>
            Gets the comparison table displayed by rule.
            </summary>
            <returns>The formatted table.</returns>
        </member>
        <member name="M:SpecBind.Pages.ValidationResult.CheckFieldExists(SpecBind.Pages.ValidationItemResult.PropertyResult)">
            <summary>
            Checks the field exists.
            </summary>
            <param name="propertyResult">The property result.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:SpecBind.Pages.ValidationResult.CheckFieldValue(SpecBind.Pages.ValidationItemResult.PropertyResult)">
            <summary>
            Checks the field value.
            </summary>
            <param name="propertyResult">The property result.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="P:SpecBind.Pages.ValidationResult.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Pages.ValidationResult.ItemCount">
            <summary>
            Gets the item count.
            </summary>
            <value>The item count.</value>
        </member>
        <member name="P:SpecBind.Pages.ValidationResult.CheckedItems">
            <summary>
            Gets the checked items.
            </summary>
            <value>The checked items.</value>
        </member>
        <member name="T:SpecBind.Pages.VirtualPropertyAttribute">
            <summary>
            An attribute for accessing a sub property of an element.
            </summary>
        </member>
        <member name="P:SpecBind.Pages.VirtualPropertyAttribute.Attribute">
            <summary>
            Gets or sets the attribute of the element to access as the property.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:SpecBind.Pages.VirtualPropertyAttribute.Name">
            <summary>
            Gets or sets the element name to find.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:SpecBind.PropertyHandlers.ElementPropertyData`1">
            <summary>
            The property data for a given property.
            </summary>
            <typeparam name="TElement">The propertyValue of the element.</typeparam>
        </member>
        <member name="T:SpecBind.PropertyHandlers.PropertyDataBase`1">
            <summary>
            A base class to define all the properties.
            </summary>
            <typeparam name="TElement">The type of the t element.</typeparam>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.#ctor(SpecBind.Pages.IPageElementHandler{`0},System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.PropertyHandlers.PropertyDataBase`1"/> class.
            </summary>
            <param name="elementHandler">The element handler.</param>
            <param name="name">The name of the property.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.ClickElement">
            <summary>
            Clicks the element that this property represents.
            </summary>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.CheckElementEnabled">
            <summary>
            Checks to see if the element exists.
            </summary>
            <returns><c>true</c> if the element exists.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.CheckElementExists">
            <summary>
            Checks to see if the element exists.
            </summary>
            <returns><c>true</c> if the element exists.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.FillData(System.String)">
            <summary>
            Fills the data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.GetCurrentValue">
            <summary>
            Gets the current value of the property.
            </summary>
            <returns>The current value as a string.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.GetItemAtIndex(System.Int32)">
            <summary>
            Gets the index of the item at.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The item as an <see cref="T:SpecBind.Pages.IPage"/> item; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.GetItemAsPage">
            <summary>
            Gets the item as page.
            </summary>
            <returns>
            The item as a page.
            </returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.FindItemInList(System.Collections.Generic.ICollection{SpecBind.Validation.ItemValidation})">
            <summary>
            Validates the list.
            </summary>
            <param name="validations">The validations.</param>
            <returns>The validation result including checks performed.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.Highlight">
            <summary>
            Highlights this instance.
            </summary>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.ValidateItem(SpecBind.Validation.ItemValidation,System.String@)">
            <summary>
            Validates the item or property matches the expected expression.
            </summary>
            <param name="validation">The validation item.</param>
            <param name="actualValue">The actual value if validation fails.</param>
            <returns>
              <c>true</c> if the items are valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.ValidateList(SpecBind.Pages.ComparisonType,System.Collections.Generic.ICollection{SpecBind.Validation.ItemValidation})">
            <summary>
            Validates the list.
            </summary>
            <param name="compareType">Type of the compare.</param>
            <param name="validations">The validations.</param>
            <returns>The validation result including checks performed.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.WaitForElementCondition(SpecBind.Actions.WaitConditions,System.Nullable{System.TimeSpan})">
            <summary>
            Waits for the element condition to be met.
            </summary>
            <param name="waitCondition">The wait condition.</param>
            <param name="timeout">The timeout to wait before failing.</param>
            <returns><c>true</c> if the condition is met, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.ComparePropertyValue(System.Object,SpecBind.Validation.ItemValidation,System.String@)">
            <summary>
            Compares the property value.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="validation">The validation.</param>
            <param name="actualValue">The actual value.</param>
            <returns>
              <c>true</c> if the comparison is valid.
            </returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.GetElementText(SpecBind.Validation.ItemValidation,`0)">
            <summary>
            Gets the element text.
            </summary>
            <param name="validation">The validation.</param>
            <param name="element">The element.</param>
            <returns>The cleaned text from the element.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PropertyDataBase`1.CreateNotSupportedException(System.String)">
            <summary>
            Creates the not supported exception.
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns>The created exception.</returns>
        </member>
        <member name="P:SpecBind.PropertyHandlers.PropertyDataBase`1.IsElement">
            <summary>
                Gets or sets a value indicating whether this instance represents a page element.
            </summary>
            <value>
                <c>true</c> if this instance is a page element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpecBind.PropertyHandlers.PropertyDataBase`1.IsList">
            <summary>
            Gets or sets a value indicating whether this instance is a list.
            </summary>
            <value>
              <c>true</c> if this instance is a list; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SpecBind.PropertyHandlers.PropertyDataBase`1.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SpecBind.PropertyHandlers.PropertyDataBase`1.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:SpecBind.PropertyHandlers.PropertyDataBase`1.ElementHandler">
            <summary>
            Gets the element handler.
            </summary>
            <value>The element handler.</value>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.#ctor(SpecBind.Pages.IPageElementHandler{`0},System.String,System.Type,System.Func{SpecBind.Pages.IPage,System.Func{`0,System.Boolean},System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.PropertyHandlers.PropertyDataBase`1"/> class.
            </summary>
            <param name="elementHandler">The element handler.</param>
            <param name="name">The name of the property.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="elementAction">The element action.</param>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.ClickElement">
            <summary>
            Clicks the element that this property represents.
            </summary>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.CheckElementEnabled">
            <summary>
            Checks to see if the element exists.
            </summary>
            <returns><c>true</c> if the element exists.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.CheckElementExists">
            <summary>
            Checks to see if the element exists.
            </summary>
            <returns><c>true</c> if the element exists.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.FillData(System.String)">
            <summary>
            Fills the data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.GetCurrentValue">
            <summary>
            Gets the current value of the property.
            </summary>
            <returns>The current value as a string.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.GetItemAsPage">
            <summary>
            Gets the item as page.
            </summary>
            <returns>
            The item as a page.
            </returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.Highlight">
            <summary>
            Highlights this instance.
            </summary>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.ValidateItem(SpecBind.Validation.ItemValidation,System.String@)">
            <summary>
            Validates the item or property matches the expected expression.
            </summary>
            <param name="validation">The validation item.</param>
            <param name="actualValue">The actual value if validation fails.</param>
            <returns>
              <c>true</c> if the items are valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.WaitForElementCondition(SpecBind.Actions.WaitConditions,System.Nullable{System.TimeSpan})">
            <summary>
            Waits for the element condition to be met.
            </summary>
            <param name="waitCondition">The wait condition.</param>
            <param name="timeout">The timeout to wait before failing.</param>
            <returns><c>true</c> if the condition is met, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ElementPropertyData`1.ThrowIfElementDoesNotExist">
            <summary>
            Check to make sure the element exists on the page.
            </summary>
            <exception cref="T:SpecBind.Pages.ElementExecuteException">Thrown if the element does not exist.</exception>
        </member>
        <member name="T:SpecBind.PropertyHandlers.ListPropertyData`1">
            <summary>
            The property data for property that represents a list.
            </summary>
            <typeparam name="TElement">The propertyValue of the element.</typeparam>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ListPropertyData`1.#ctor(SpecBind.Pages.IPageElementHandler{`0},System.String,System.Type,System.Func{SpecBind.Pages.IPage,System.Func{System.Object,System.Boolean},System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.PropertyHandlers.PropertyDataBase`1"/> class.
            </summary>
            <param name="elementHandler">The element handler.</param>
            <param name="name">The name of the property.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="action">The action used to get the property.</param>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ListPropertyData`1.GetItemAtIndex(System.Int32)">
            <summary>
            Gets the index of the item at.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The item as an <see cref="T:SpecBind.Pages.IPage"/> item; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ListPropertyData`1.FindItemInList(System.Collections.Generic.ICollection{SpecBind.Validation.ItemValidation})">
            <summary>
            Validates the list.
            </summary>
            <param name="validations">The validations.</param>
            <returns>The validation result including checks performed.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ListPropertyData`1.ValidateItem(SpecBind.Validation.ItemValidation,System.String@)">
            <summary>
            Validates the item or property matches the expected expression.
            </summary>
            <param name="validation">The validation item.</param>
            <param name="actualValue">The actual value if validation fails.</param>
            <returns>
              <c>true</c> if the items are valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ListPropertyData`1.ValidateList(SpecBind.Pages.ComparisonType,System.Collections.Generic.ICollection{SpecBind.Validation.ItemValidation})">
            <summary>
            Validates the list.
            </summary>
            <param name="compareType">Type of the compare.</param>
            <param name="validations">The validations.</param>
            <returns>The validation result including checks performed.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ListPropertyData`1.ValidateListInternal(System.Object,SpecBind.Pages.ComparisonType,System.Collections.Generic.IEnumerable{SpecBind.Validation.ItemValidation},SpecBind.Pages.ValidationResult)">
            <summary>
            Validates the list.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="compareType">Type of the compare.</param>
            <param name="validations">The validations.</param>
            <param name="validationResult">The validation tracker.</param>
            <returns>The list of validations.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.ListPropertyData`1.CheckItem(`0,System.Collections.Generic.IEnumerable{SpecBind.Validation.ItemValidation},SpecBind.Pages.ValidationResult)">
            <summary>
            Checks the item.
            </summary>
            <param name="element">The element.</param>
            <param name="validations">The validations.</param>
            <param name="validationResult">The validation tracker.</param>
            <returns><c>true</c> if the item is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:SpecBind.PropertyHandlers.PagePropertyData`1">
            <summary>
            The property data for a given non-element property.
            </summary>
            <typeparam name="TElement">The propertyValue of the element.</typeparam>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PagePropertyData`1.#ctor(SpecBind.Pages.IPageElementHandler{`0},System.String,System.Type,System.Func{SpecBind.Pages.IPage,System.Func{System.Object,System.Boolean},System.Boolean},System.Action{SpecBind.Pages.IPage,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.PropertyHandlers.PropertyDataBase`1"/> class.
            </summary>
            <param name="elementHandler">The element handler.</param>
            <param name="name">The name of the property.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="action">The action.</param>
            <param name="setAction">The set action.</param>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PagePropertyData`1.FillData(System.String)">
            <summary>
            Fills the data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PagePropertyData`1.GetCurrentValue">
            <summary>
            Gets the current value of the property.
            </summary>
            <returns>The current value as a string.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.PagePropertyData`1.ValidateItem(SpecBind.Validation.ItemValidation,System.String@)">
            <summary>
            Validates the item or property matches the expected expression.
            </summary>
            <param name="validation">The validation item.</param>
            <param name="actualValue">The actual value if validation fails.</param>
            <returns>
              <c>true</c> if the items are valid; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:SpecBind.PropertyHandlers.VirtualPropertyData`1">
            <summary>
            A property type that is an accessor on an element.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:SpecBind.PropertyHandlers.VirtualPropertyData`1.#ctor(SpecBind.Pages.IPageElementHandler{`0},System.String,System.Func{SpecBind.Pages.IPage,System.Func{`0,System.Boolean},System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.PropertyHandlers.VirtualPropertyData`1"/> class.
            </summary>
            <param name="elementHandler">The element page handler.</param>
            <param name="name">The name.</param>
            <param name="handler">The element handler.</param>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="M:SpecBind.PropertyHandlers.VirtualPropertyData`1.GetCurrentValue">
            <summary>
            Gets the current value.
            </summary>
            <returns>The current value from the element.</returns>
        </member>
        <member name="M:SpecBind.PropertyHandlers.VirtualPropertyData`1.ValidateItem(SpecBind.Validation.ItemValidation,System.String@)">
            <summary>
            Validates the item.
            </summary>
            <param name="validation">The validation.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the validation is successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.SelectionSteps">
            <summary>
            A set of step bindings for selecting an item.
            </summary>
        </member>
        <member name="M:SpecBind.SelectionSteps.#ctor(SpecBind.ActionPipeline.IActionPipelineService,SpecBind.Helpers.IScenarioContextHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.PageStepBase"/> class.
            </summary>
            <param name="actionPipelineService">The action pipeline service.</param>
            <param name="scenarioContext">The scenario context.</param>
        </member>
        <member name="M:SpecBind.SelectionSteps.WhenIChooseALinkStep(System.String)">
            <summary>
            A When step indicating a link click should occur.
            </summary>
            <param name="linkName">Name of the link.</param>
        </member>
        <member name="M:SpecBind.SelectionSteps.GivenEnsureOnListItemStep(System.String,System.Int32)">
            <summary>
            A Given step for ensuring the browser is on the list item with the specified name and index.
            </summary>
            <param name="listName">Name of the list.</param>
            <param name="itemNumber">The item number.</param>
        </member>
        <member name="M:SpecBind.SelectionSteps.GoToListItemWithCriteriaStep(System.String,TechTalk.SpecFlow.Table)">
            <summary>
            A step for ensuring the browser is on the list item with the specified name and criteria.
            </summary>
            <param name="listName">Name of the list.</param>
            <param name="criteriaTable">The criteria table.</param>
        </member>
        <member name="T:SpecBind.TokenSteps">
            <summary>
            Steps that relate to the manipulation of tokens.
            </summary>
        </member>
        <member name="M:SpecBind.TokenSteps.#ctor(SpecBind.Helpers.IScenarioContextHelper,SpecBind.ActionPipeline.IActionPipelineService)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.TokenSteps"/> class.
            </summary>
            <param name="scenarioContext">The scenario context.</param>
            <param name="actionPipelineService">The action pipeline service.</param>
        </member>
        <member name="M:SpecBind.TokenSteps.SetTokenFromFieldStep(System.String,System.String)">
            <summary>
            Sets the token specified from the given property value.
            </summary>
            <param name="tokenName">Name of the token.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.TokenSteps.ValidateTokenValueStep(System.String,System.String,System.String)">
            <summary>
            A step that validates a given token value.
            </summary>
            <param name="tokenName">Name of the token.</param>
            <param name="rule">The rule.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:SpecBind.Validation.ContainsComparer">
            <summary>
            A string comparison class for a contains comparison
            </summary>
        </member>
        <member name="T:SpecBind.Validation.ValidationComparerBase">
            <summary>
            A global base class for all validation comparers.
            </summary>
        </member>
        <member name="T:SpecBind.Validation.IValidationComparer">
            <summary>
            An interface that is used to provide value comparisons.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.IValidationComparer.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SpecBind.Validation.IValidationComparer.IsDefault">
            <summary>
            Gets a value indicating whether this instance is the default rule to use.
            </summary>
            <value><c>true</c> if this instance is a default rule; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Validation.IValidationComparer.RuleKeys">
            <summary>
            Gets the rule keys.
            </summary>
            <value>The rule keys.</value>
        </member>
        <member name="P:SpecBind.Validation.IValidationComparer.ShouldCheckElementExistence">
            <summary>
            Gets a value indicating whether the element should be checked for existence.
            </summary>
            <value><c>true</c> if the element should be checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Validation.IValidationComparer.RequiresFieldValue">
            <summary>
            Gets a value indicating whether this validation requires a field value.
            </summary>
            <value><c>true</c> if a field value is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SpecBind.Validation.ValidationComparerBase.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.ValidationComparerBase"/> class.
            </summary>
            <param name="ruleKeys">The rule keys.</param>
        </member>
        <member name="M:SpecBind.Validation.ValidationComparerBase.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValidationComparerBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:SpecBind.Validation.ValidationComparerBase.IsDefault">
            <summary>
            Gets a value indicating whether this instance is the default rule to use.
            </summary>
            <value><c>true</c> if this instance is a default rule; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Validation.ValidationComparerBase.RequiresFieldValue">
            <summary>
            Gets a value indicating whether this validation requires a field value.
            </summary>
            <value><c>true</c> if a field value is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Validation.ValidationComparerBase.RuleKeys">
            <summary>
            Gets the rule keys.
            </summary>
            <value>The rule keys.</value>
        </member>
        <member name="P:SpecBind.Validation.ValidationComparerBase.ShouldCheckElementExistence">
            <summary>
            Gets a value indicating whether the element should be checked for existence.
            </summary>
            <value><c>true</c> if the element should be checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SpecBind.Validation.ContainsComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.ContainsComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ContainsComparer.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.DoesNotContainComparer">
            <summary>
            A string comparison class for a does not contain comparison
            </summary>
        </member>
        <member name="M:SpecBind.Validation.DoesNotContainComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.DoesNotContainComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.DoesNotContainComparer.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.DoesNotExistComparer">
            <summary>
            A validation comparer to see if something does not exist.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.DoesNotExistComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.DoesNotExistComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.DoesNotExistComparer.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SpecBind.Validation.DoesNotExistComparer.RequiresFieldValue">
            <summary>
            Gets a value indicating whether this validation requires a field value.
            </summary>
            <value><c>true</c> if a field value is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Validation.DoesNotExistComparer.ShouldCheckElementExistence">
            <summary>
            Determines wither the element should be checked for existence.
            </summary>
            <value><c>true</c> if the element should be checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SpecBind.Validation.EnabledComparer">
            <summary>
            A validation comparer to see if something is enabled.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.EnabledComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.EnabledComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.EnabledComparer.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.EndsWithComparer">
            <summary>
            A string comparison class for a ends with comparison
            </summary>
        </member>
        <member name="M:SpecBind.Validation.EndsWithComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.EndsWithComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.EndsWithComparer.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.EqualsComparer">
            <summary>
            A comparer that checks for equality.
            </summary>
        </member>
        <member name="T:SpecBind.Validation.ValueComparerBase">
            <summary>
            A base class for comparing values provided.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.ValueComparerBase"/> class.
            </summary>
            <param name="ruleKeys">The rule keys.</param>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.Compare(System.Boolean,System.Boolean)">
            <summary>
            Compares the boolean values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares the date time values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the integer values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.Compare(System.Double,System.Double)">
            <summary>
            Compares the double values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.Compare(System.String,System.String)">
            <summary>
            Compares the string values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.StringParse(System.String,System.String@)">
            <summary>
            Pretends to run the string through the parser to follow the format.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> always.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValueComparerBase.TryCompare``1(System.String,System.String,SpecBind.Validation.ValueComparerBase.ParseDelegate{``0},System.Func{``0,``0,System.Boolean},System.Boolean@)">
            <summary>
            Tries to parse the expected value for a data type then uses it as a comparison.
            </summary>
            <typeparam name="T">The data type to try</typeparam>
            <param name="expected">The expected.</param>
            <param name="actual">The actual.</param>
            <param name="parseDelegate">The parse delegate.</param>
            <param name="comparisonFunc">The comparison function.</param>
            <param name="comparisonResult">The result of the comparison.</param>
            <returns><c>true</c> if the data type matches, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.ValueComparerBase.ParseDelegate`1">
            <summary>
            A delegate to represent the TryParse methods.
            </summary>
            <typeparam name="T">The parse methods.</typeparam>
            <param name="s">The string value.</param>
            <param name="value">The parse value.</param>
            <returns><c>true</c> if the value can be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.EqualsComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.EqualsComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.EqualsComparer.Compare(System.String,System.String)">
            <summary>
            Compares the string values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.EqualsComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares the double values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.EqualsComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the integer values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.EqualsComparer.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares the date time values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.EqualsComparer.Compare(System.Boolean,System.Boolean)">
            <summary>
            Compares the boolean values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SpecBind.Validation.EqualsComparer.IsDefault">
            <summary>
            Gets a value indicating whether this instance is the default rule to use.
            </summary>
            <value><c>true</c> if this instance is a default rule; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SpecBind.Validation.ExistsComparer">
            <summary>
            A validation comparer to see if something exists.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ExistsComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.ExistsComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ExistsComparer.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SpecBind.Validation.ExistsComparer.RequiresFieldValue">
            <summary>
            Gets a value indicating whether this validation requires a field value.
            </summary>
            <value><c>true</c> if a field value is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Validation.ExistsComparer.ShouldCheckElementExistence">
            <summary>
            Determines wither the element should be checked for existence.
            </summary>
            <value><c>true</c> if the element should be checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SpecBind.Validation.GreaterThanComparer">
            <summary>
            A comparer that checks for greater than the check value.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.GreaterThanComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.GreaterThanComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.GreaterThanComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares the double values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.GreaterThanComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the integer values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.GreaterThanComparer.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares the date time values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.GreaterThanEqualsComparer">
            <summary>
            A comparer that checks for greater than the check value.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.GreaterThanEqualsComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.GreaterThanEqualsComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.GreaterThanEqualsComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares the double values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.GreaterThanEqualsComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the integer values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.GreaterThanEqualsComparer.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares the date time values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.ItemValidation">
            <summary>
            An item validation class that holds the data for a field.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ItemValidation.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.ItemValidation"/> class.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <param name="comparisonValue">The comparison value.</param>
        </member>
        <member name="M:SpecBind.Validation.ItemValidation.Compare(SpecBind.Pages.IPropertyData,System.String)">
            <summary>
            Compares the specified <see paramref="actualValue"/> to the property data <see cref="P:SpecBind.Validation.ItemValidation.ComparisonValue"/>.
            </summary>
            <param name="propertyData">The property data.</param>
            <param name="actualValue">The comparison value.</param>
            <returns><c>true</c> if the values match; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SpecBind.Validation.ItemValidation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:SpecBind.Validation.ItemValidation.CheckElementExistence">
            <summary>
            Gets a value indicating whether the item should be checked first for existence.
            </summary>
            <value><c>true</c> if the item should be checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SpecBind.Validation.ItemValidation.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:SpecBind.Validation.ItemValidation.ComparisonValue">
            <summary>
            Gets the comparison value.
            </summary>
            <value>
            The comparison value.
            </value>
        </member>
        <member name="P:SpecBind.Validation.ItemValidation.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:SpecBind.Validation.ItemValidation.RawComparisonType">
            <summary>
            Gets the comparison type as it was originally in the table.
            </summary>
            <value>The comparison type of the raw field.</value>
        </member>
        <member name="P:SpecBind.Validation.ItemValidation.RawComparisonValue">
            <summary>
            Gets the comparison value as it was originally in the table.
            </summary>
            <value>The comparison value of the raw field.</value>
        </member>
        <member name="P:SpecBind.Validation.ItemValidation.RawFieldName">
            <summary>
            Gets the field name as it was originally in the table.
            </summary>
            <value>The name of the raw field.</value>
        </member>
        <member name="P:SpecBind.Validation.ItemValidation.RequiresFieldValue">
            <summary>
            Gets a value indicating whether this validation requires a field value.
            </summary>
            <value><c>true</c> if a field value is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SpecBind.Validation.LessThanComparer">
            <summary>
            A comparer that checks for less than the check value.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.LessThanComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.LessThanComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.LessThanComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares the double values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.LessThanComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the integer values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.LessThanComparer.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares the date time values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.LessThanEqualsComparer">
            <summary>
            A comparer that checks for less than or equal to the check value.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.LessThanEqualsComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.LessThanEqualsComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.LessThanEqualsComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares the double values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.LessThanEqualsComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the integer values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.LessThanEqualsComparer.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares the date time values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.NotEqualsComparer">
            <summary>
            A comparer that checks for inequality.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.NotEqualsComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.NotEqualsComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.NotEqualsComparer.Compare(System.String,System.String)">
            <summary>
            Compares the string values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.NotEqualsComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares the double values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.NotEqualsComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the integer values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.NotEqualsComparer.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares the date time values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SpecBind.Validation.NotEqualsComparer.Compare(System.Boolean,System.Boolean)">
            <summary>
            Compares the boolean values according to the rule.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <returns><c>true</c> if the value passes the check, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.StartsWithComparer">
            <summary>
            A string comparison class for a starts with comparison
            </summary>
        </member>
        <member name="M:SpecBind.Validation.StartsWithComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.StartsWithComparer"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.StartsWithComparer.Compare(SpecBind.Pages.IPropertyData,System.String,System.String)">
            <summary>
            Compares the values using the specified property.
            </summary>
            <param name="property">The property.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="actualValue">The actual value.</param>
            <returns><c>true</c> if the comparison passes, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SpecBind.Validation.ValidateTableHelpers">
            <summary>
            A static class that performs the validation process.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ValidateTableHelpers.PerformValidation(System.Collections.Generic.IReadOnlyCollection{SpecBind.Validation.ItemValidation},System.Func{SpecBind.Validation.ItemValidation,SpecBind.Pages.ValidationItemResult,System.Boolean})">
            <summary>
            Performs the validation.
            </summary>
            <param name="validations">The validations.</param>
            <param name="validationProcess">The validation process for an item.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="T:SpecBind.Validation.ValidationTable">
            <summary>
            Defines a raw table of validations to be parsed and turned into individual items.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ValidationTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.ValidationTable"/> class.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ValidationTable.AddValidation(System.String,System.String,System.String)">
            <summary>
            Adds the validation to the table.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="ruleValue">The rule value.</param>
            <param name="comparisonValue">The comparison value.</param>
        </member>
        <member name="P:SpecBind.Validation.ValidationTable.ValidationCount">
            <summary>
            Gets the validation count.
            </summary>
            <value>The validation count.</value>
        </member>
        <member name="P:SpecBind.Validation.ValidationTable.Validations">
            <summary>
            Gets the validations.
            </summary>
            <value>The validations.</value>
        </member>
        <member name="T:SpecBind.Validation.ValidationTablePreAction">
            <summary>
            An action pipeline pre-action that performs any processing on validation tables.
            </summary>
        </member>
        <member name="M:SpecBind.Validation.ValidationTablePreAction.#ctor(SpecBind.ActionPipeline.IActionRepository,SpecBind.Helpers.ITokenManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.Validation.ValidationTablePreAction"/> class.
            </summary>
            <param name="actionRepository">The action repository.</param>
            <param name="tokenManager">The token manager.</param>
        </member>
        <member name="M:SpecBind.Validation.ValidationTablePreAction.PerformPreAction(SpecBind.ActionPipeline.IAction,SpecBind.ActionPipeline.ActionContext)">
            <summary>
            Performs the pre-execute action.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The action context.</param>
        </member>
        <member name="M:SpecBind.Validation.ValidationTablePreAction.GetRuleLookups">
            <summary>
            Gets the rule lookups.
            </summary>
            <returns>A dictionary of lookups.</returns>
        </member>
        <member name="M:SpecBind.Validation.ValidationTablePreAction.ProcessText(System.String)">
            <summary>
            Processes the text.
            </summary>
            <param name="value">The value.</param>
            <returns>The processes text value.</returns>
        </member>
        <member name="T:SpecBind.WaitingSteps">
            <summary>
            A set of step definitions that allow the user to wait for a given condition.
            </summary>
        </member>
        <member name="M:SpecBind.WaitingSteps.#ctor(SpecBind.ActionPipeline.IActionPipelineService,SpecBind.Helpers.IScenarioContextHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:SpecBind.AlertBoxSteps"/> class.
            </summary>
            <param name="actionPipelineService">The action pipeline service.</param>
            <param name="scenarioContext">The scenario context.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitToSeeElement(System.String)">
            <summary>
            A step that waits to see an element.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitToSeeElementWithTimeout(System.Int32,System.String)">
            <summary>
            A step that waits to see an element.
            </summary>
            <param name="timeout">The timeout for waiting.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitToNotSeeElement(System.String)">
            <summary>
            A step that waits to not see an element.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitToNotSeeElementWithTimeout(System.Int32,System.String)">
            <summary>
            A step that waits to not see an element.
            </summary>
            <param name="timeout">The timeout for waiting.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitForElementEnabled(System.String)">
            <summary>
            A step that waits for an element to be enabled.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitForElementEnabledWithTimeout(System.Int32,System.String)">
            <summary>
            A step that waits for an element to be enabled.
            </summary>
            <param name="timeout">The timeout for waiting.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitForElementNotEnabled(System.String)">
            <summary>
            A step that waits for an element to be not enabled.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitForElementNotEnabledWithTimeout(System.Int32,System.String)">
            <summary>
            A step that waits for an element to be not enabled.
            </summary>
            <param name="timeout">The timeout for waiting.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitForListElementToContainItems(System.String)">
            <summary>
            A step that waits for a list element to contain children.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitForListElementToContainItemsWithTimeout(System.Int32,System.String)">
            <summary>
            A step that waits for a list element to contain children.
            </summary>
            <param name="timeout">The timeout for waiting.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SpecBind.WaitingSteps.WaitForTheViewToBeActive">
            <summary>
            I wait for the view to be active step.
            </summary>
        </member>
        <member name="M:SpecBind.WaitingSteps.GetTimeSpan(System.Int32)">
            <summary>
            Gets the time span from the seconds value.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns>The parsed time span.</returns>
        </member>
        <member name="M:SpecBind.WaitingSteps.CallPipelineAction(System.String,SpecBind.Actions.WaitConditions,System.Nullable{System.TimeSpan})">
            <summary>
            Calls the pipeline action.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="expectedCondition">The expected condition.</param>
            <param name="timeout">The timeout for waiting.</param>
        </member>
    </members>
</doc>
