@model SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy.VacancyViewModel
@using SFA.Apprenticeships.Domain.Entities.Vacancies.ProviderVacancies
@using SFA.Apprenticeships.Web.Common.Validators.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.Constants
@using SFA.Apprenticeships.Web.Manage.Constants
@using SFA.Apprenticeships.Web.Raa.Common.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy
@{
    ViewBag.Title = "QA a Vacancy - Review vacancy";
    var basicDetailsLink = Url.RouteUrl(ManagementRouteNames.BasicDetails, new { vacancyReferenceNumber = Model.VacancyReferenceNumber });
    var summaryLink = Url.RouteUrl(ManagementRouteNames.Summary, new { vacancyReferenceNumber = Model.VacancyReferenceNumber });
    var requirementsProspectsLink = Url.RouteUrl(ManagementRouteNames.RequirementsAndProspoects, new { vacancyReferenceNumber = Model.VacancyReferenceNumber });
    var questionsLink = Url.RouteUrl(ManagementRouteNames.Questions, new { vacancyReferenceNumber = Model.VacancyReferenceNumber });
}

@Html.Partial("ValidationSummary", ViewData.ModelState)


<div>
    <h1 class="heading-xlarge">
        Vacancy preview
    </h1>
    <section>
        <div class="hgroup text editable-item">
            <h1 class="heading-xlarge" id="vacancy-title" itemprop="title">@Model.NewVacancyViewModel.Title</h1>
            <p class="subtitle" id="vacancy-subtitle-employer-name" itemprop="hiringOrganization">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Name</p>
            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.NewVacancyViewModel.Title, basicDetailsLink, Model.NewVacancyViewModel.TitleComment))
        </div>
        <div class="grid-wrapper">
            <div class="grid grid-2-3">
                <div class="inner-block-padr">
                    <div class="text editable-item" itemprop="description">
                        <div id="vacancy-description">
                            @Model.NewVacancyViewModel.ShortDescription
                        </div>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.NewVacancyViewModel.ShortDescription, basicDetailsLink, Model.NewVacancyViewModel.ShortDescriptionComment))
                    </div>
                </div>
            </div>
            <div class="grid grid-1-3">
                <div class="editable-item">
                    <h3 class="bold-small">
                        Closing date
                        @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModelFor(m => m.VacancySummaryViewModel.ClosingDate, ViewData.ModelState, summaryLink, Model.VacancySummaryViewModel.ClosingDateComment))
                    </h3>
                    <p id="vacancy-closing-date">
                        @Model.VacancySummaryViewModel.ClosingDate.Date.ToFriendlyClosingToday()
                    </p>
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancySummaryViewModel.ClosingDate, summaryLink, Model.VacancySummaryViewModel.ClosingDateComment))
                </div>
            </div>
        </div>
    </section>
    <section class="section-border" id="vacancy-info">
        <h2 class="heading-large">Apprenticeship summary</h2>
        <div class="grid-wrapper">
            <div class="grid grid-1-3">
                <div class="inner-block-padr">
                    <div class="editable-item">
                        <h3 class="bold-small">Working week
                            @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModelFor(m => m.VacancySummaryViewModel.WorkingWeek, ViewData.ModelState, summaryLink, Model.VacancySummaryViewModel.WorkingWeekComment))
                        </h3>
                        <p id="vacancy-working-week" itemprop="workHours">
                            @Model.VacancySummaryViewModel.WorkingWeek<br />Total hours per week: @Model.VacancySummaryViewModel.HoursPerWeek
                            @if (Model.VacancySummaryViewModel.HoursPerWeek > 40)
                            {
                                <br />@:(the hours are based on the candidate being over 18)
                            }
                        </p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancySummaryViewModel.WorkingWeek, summaryLink, Model.VacancySummaryViewModel.WorkingWeekComment))
                    </div>
                    <div class="editable-item">
                        <h3 class="bold-small">
                            @if (Model.VacancySummaryViewModel.WageType == WageType.Custom)
                            {
                                <span>@Model.VacancySummaryViewModel.WageUnitDisplayText wage
                                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModelFor(m => m.VacancySummaryViewModel.WageType, ViewData.ModelState, summaryLink, Model.VacancySummaryViewModel.WageComment))
                                </span>
                            }
                            else
                            {
                                <span>Wage 
                                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModelFor(m => m.VacancySummaryViewModel.WageType, ViewData.ModelState, summaryLink, Model.VacancySummaryViewModel.WageComment))
                                </span>
                            }
                        </h3>
                        <p id="vacancy-wage">@Model.VacancySummaryViewModel.WageDisplayText</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancySummaryViewModel.WageType, summaryLink, Model.VacancySummaryViewModel.WageComment))
                    </div>
                        @if (Model.VacancySummaryViewModel.WageType == WageType.ApprenticeshipMinimumWage)
                        {
                            <details>
                                <summary>National Minimum Wage<br />for apprentices explained</summary>
                                <div class="detail-content">
                                    The current National Minimum Wage (NMW) for apprentices is £@Wages.ApprenticeMinimumWage per hour.<br />
                                    This rate applies to apprentices aged 16 to 18 and those aged 19 or over who are in their first year.<br />
                                    Apprentices must be paid at least the NMW for their age if they're aged 19 or over and have completed their first year.
                                </div>
                            </details>
                        }

                        @if (Model.VacancySummaryViewModel.WageType == WageType.NationalMinimumWage)
                        {
                            <details>
                                <summary>National Minimum Wage</summary>
                                <div class="detail-content">
                                    The current National Minimum Wage rates are £@Wages.Between18And20NationalMinimumWage for 18 to 20 year-olds and £@Wages.Over21NationalMinimumWage for anyone aged 21 and over.<br />
                                    Apprentices are paid for their normal working hours and training that’s part of their apprenticeship (usually one day per week).
                                </div>
                            </details>
                        }

                    <div class="editable-item">
                        <h3 class="bold-small">
                            Expected duration
                            @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModelFor(m => m.VacancySummaryViewModel.Duration, ViewData.ModelState, summaryLink, Model.VacancySummaryViewModel.DurationComment))
                        </h3>
                        <p id="vacancy-expected-duration">
                            @Model.VacancySummaryViewModel.Duration @Model.VacancySummaryViewModel.DurationTypeDisplayText
                        </p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancySummaryViewModel.Duration, summaryLink, Model.VacancySummaryViewModel.DurationComment))
                    </div>
                    <div class="editable-item">
                        <h3 class="bold-small">Possible start date
                            @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModelFor(m => m.VacancySummaryViewModel.PossibleStartDate, ViewData.ModelState, summaryLink, Model.VacancySummaryViewModel.PossibleStartDateComment))
                        </h3>
                        <p id="vacancy-start-date">
                            @Html.DisplayFor(m => Model.VacancySummaryViewModel.PossibleStartDate.Date)
                        </p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancySummaryViewModel.PossibleStartDate, summaryLink, Model.VacancySummaryViewModel.PossibleStartDateComment))
                    </div>
                    <div class="editable-item">
                        <h3 class="bold-small">Apprenticeship level</h3>
                        <p id="vacancy-type" itemprop="employmentType">@Model.NewVacancyViewModel.ApprenticeshipLevel Level Apprenticeship</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.NewVacancyViewModel.ApprenticeshipLevel, basicDetailsLink, Model.NewVacancyViewModel.ApprenticeshipLevelComment))
                    </div>
                    <h3 class="bold-small">Reference number</h3>
                    <p id="vacancy-reference-id">@Model.VacancyReferenceNumber</p>
                </div>
            </div>
            <div class="grid grid-2-3">
                <div class="editable-item">
                    <div class="text" itemprop="responsibilities">
                        <p id="vacancy-full-descrpition">@Html.Raw(Model.VacancySummaryViewModel.LongDescription)</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancySummaryViewModel.LongDescription, summaryLink, Model.VacancySummaryViewModel.LongDescriptionComment))
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="section-border" id="course-info">
        <h2 class="heading-large">Requirements and prospects</h2>
        <div class="grid-wrapper">
            <div class="grid grid-1-2">
                <div class="inner-block-padr">
                    @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.DesiredSkills))
                    {
                        <div class="editable-item">
                            <div class="text">
                                <h3 class="heading-small">Desired skills</h3>
                                <p id="vacancy-skills-required" itemprop="skills">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.DesiredSkills)</p>
                                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancyRequirementsProspectsViewModel.DesiredSkills, requirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.DesiredSkillsComment))
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.PersonalQualities))
                    {
                        <div class="editable-item">
                            <div class="text">
                                <h3 class="heading-small">Personal qualities</h3>
                                <p id="vacancy-qualities-required" itemprop="qualities">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.PersonalQualities)</p>
                                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancyRequirementsProspectsViewModel.PersonalQualities, requirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.PersonalQualitiesComment))
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.DesiredQualifications))
                    {
                        <div class="editable-item">
                            <div class="text">
                                <h3 class="heading-small">Qualifications required</h3>
                                <p id="vacancy-qualifications-required" itemprop="qualifications">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.DesiredQualifications)</p>
                                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancyRequirementsProspectsViewModel.DesiredQualifications, requirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.DesiredQualificationsComment))
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="grid grid-1-2">
                @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.FutureProspects))
                {
                    <div class="editable-item">
                        <div class="text">
                            <h3 class="heading-small">Future prospects</h3>
                            <p id="vacancy-future-prospects" itemprop="incentives">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.FutureProspects)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancyRequirementsProspectsViewModel.FutureProspects, requirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.FutureProspectsComment))
                        </div>
                    </div>
                }
                @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.ThingsToConsider))
                {
                    <div class="editable-item">
                        <div class="text">
                            <h3 class="heading-small">Things to consider</h3>
                            <p id="vacancy-reality-check" itemprop="incentives">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.ThingsToConsider)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancyRequirementsProspectsViewModel.ThingsToConsider, requirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.ThingsToConsiderComment))
                        </div>
                    </div>
                }
            </div>
        </div>
     </section>


    @if (!string.IsNullOrWhiteSpace(Model.VacancyQuestionsViewModel.FirstQuestion) || !string.IsNullOrWhiteSpace(Model.VacancyQuestionsViewModel.SecondQuestion))
    {
        <section class="section-border" id="course-info">
            <h2 class="heading-large">Questions for candidates</h2>
            <div class="grid-wrapper">
                <div class="grid grid-1-2">
                    <div class="inner-block-padr">
                        @if (!string.IsNullOrWhiteSpace(Model.VacancyQuestionsViewModel.FirstQuestion))
                        {
                            <div class="editable-item">
                                <div class="text">
                                    <h3 class="heading-small">First question</h3>
                                    <p>@Html.Raw(Model.VacancyQuestionsViewModel.FirstQuestion)</p>
                                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancyQuestionsViewModel.FirstQuestion, questionsLink, Model.VacancyQuestionsViewModel.FirstQuestionComment))
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.VacancyQuestionsViewModel.SecondQuestion))
                        {
                            <div class="editable-item">
                                <div class="text">
                                    <h3 class="heading-small">Second question</h3>
                                    <p>@Html.Raw(Model.VacancyQuestionsViewModel.SecondQuestion)</p>
                                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(m => m.VacancyQuestionsViewModel.SecondQuestion, questionsLink, Model.VacancyQuestionsViewModel.SecondQuestionComment))
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </section>
    }
    <section class="section-border" id="employer-info">
        <h2 class="heading-large">About the employer</h2>
        <div class="grid-wrapper">
            <div class="grid grid-2-3">
                <div class="inner-block-padr">
                    <div class="text">
                        <p id="vacancy-employer-description">@Html.Raw(Model.NewVacancyViewModel.ProviderSiteEmployerLink.Description)</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid-wrapper">
            <div class="grid grid-1-2">
                <div class="inner-block-padr">
                    <div class="text">
                        <h3 class="bold-small">Employer</h3>
                        <p id="vacancy-employer-name" class="@(string.IsNullOrEmpty(Model.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl) ? "no-btm-margin" : string.Empty)">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Name</p>
                        @if (!string.IsNullOrEmpty(Model.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl))
                        {
                            <p>
                                <a itemprop="url" href="@Model.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl"
                                   id="vacancy-employer-website"
                                   target="_blank"
                                   title="@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Name Website" rel="external">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl</a>
                                <i class="fa fa-check the-icon"></i>
                            </p>
                        }
                        <div id="vacancy-address" itemscope itemtype="http://schema.org/PostalAddress">
                            <h3 class="bold-small">Address</h3>
                            <div itemprop="address">
                                <p class="small-btm-margin" itemprop="streetAddress">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.AddressLine1</p>
                                <p class="small-btm-margin" itemprop="streetAddress">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.AddressLine2</p>
                                <p class="small-btm-margin" itemprop="addressLocality">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.AddressLine3</p>
                                <p class="small-btm-margin" itemprop="addressRegion">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.AddressLine4</p>
                                <p class="small-btm-margin" itemprop="postalCode">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.Postcode</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="grid grid-1-2 hide-print">
                <div id="vacancy-map" class="ad-details__map">
                    <div class="map-overlay" onclick=" style.pointerEvents = 'none' "></div>
                    <iframe width="700" height="250" title="Map of location" style="border: 0" src="https://www.google.com/maps/embed/v1/place?q=@Html.Raw(Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.Postcode),+United+Kingdom&amp;key=AIzaSyCusA_0x4bJEjU-_gLOFiXMSBXKZYtvHz8"></iframe>
                    <p class="nojs-notice">You must have JavaScript enabled to view a map of the location</p>
                </div>
            </div>
        </div>
    </section>

    @if (Model.NewVacancyViewModel.OfflineVacancy)
    {
        <section class="section-border" id="offline-vacancy" style="">
            <h2 class="heading-large">Employer's application instructions</h2>
            <div class="text">
                <p id="application-instructions">
                    @Model.NewVacancyViewModel.OfflineApplicationInstructions
                </p>
                <a href="@Url.RouteUrl(ManagementRouteNames.BasicDetails, new {vacancyReferencenumber = Model.VacancyReferenceNumber})" class="edit-comment-link">Edit/Comment</a>
            </div>
            <div class="form-group">
                <p class="no-btm-margin">This apprenticeship requires you to apply through the employer's website.</p>
                <a id="external-employer-website" rel="external" href="@Model.NewVacancyViewModel.OfflineApplicationUrl" target="_blank">@Model.NewVacancyViewModel.OfflineApplicationUrl</a>
                <i class="fa fa-check the-icon"></i>
                <a href="@Url.RouteUrl(ManagementRouteNames.BasicDetails, new {vacancyReferencenumber = Model.VacancyReferenceNumber})" class="edit-comment-link">Edit/Comment</a>
            </div>
        </section>
    }

    <section class="section-border" id="provider-info">
        <h2 class="heading-large">Training provider</h2>
        <div class="grid-wrapper">
            <div class="grid grid-2-3">
                <div class="inner-block-padr">
                    <div class="text">
                        @if (!string.IsNullOrWhiteSpace(Model.ProviderSite.CandidateDescription))
                        {
                            <p id="vacancy-training-to-be-provided">@Html.Raw(Model.ProviderSite.CandidateDescription)</p>
                        }
                        @if (Model.NewVacancyViewModel.TrainingType == TrainingType.Frameworks)
                        {
                            <h3 class="heading-small">Apprenticeship framework</h3>
                            <p id="vacancy-framework">@Html.Raw(Model.FrameworkName)</p>
                        }
                        @if (Model.NewVacancyViewModel.TrainingType == TrainingType.Standards)
                        {
                            <h3 class="heading-small">Apprenticeship standard</h3>
                            <p id="vacancy-standard">@Html.Raw(Model.StandardName)</p>
                        }
                        <a href="@Url.RouteUrl(ManagementRouteNames.BasicDetails, new {vacancyReferencenumber = Model.VacancyReferenceNumber})" class="edit-comment-link">Edit/Comment</a>
                        <p id="vacancy-provider-sector-pass-rate">The training provider does not yet have a sector success rate for this type of apprenticeship training.</p>
                    </div>
                </div>
            </div>
            <div class="grid grid-1-3">
                <div class="text">
                    <h3 class="bold-small">Training provider</h3>
                    <p id="vacancy-provider-name">@Model.ProviderSite.Name</p>
                </div>

                @if (!string.IsNullOrWhiteSpace(Model.ProviderSite.ContactDetailsForCandidate))
            {
                    <div class="text">
                        <h3 class="bold-small">Contact</h3>
                        <p id="vacancy-provider-contact">@Model.ProviderSite.ContactDetailsForCandidate</p>
                    </div>
                }
            </div>
        </div>
    </section>

    @using (Html.BeginRouteForm(ManagementRouteNames.ApproveVacancy, FormMethod.Post))
    {
        @Html.HiddenFor(m => m.VacancyReferenceNumber)

        <section>
            <div class="form-group">
                <button id="btnApprove" type="submit" class="button" name="VacancyQAAction" value="Approve">Approve</button>
                <button id="btnReject" type="submit" class="button-link" name="VacancyQAAction" value="Reject">Reject</button>
                <a id="dashboardLink" href="@Url.RouteUrl(ManagementRouteNames.Dashboard)">Return to dashboard</a>
                
            </div>
        </section>
    }
</div>