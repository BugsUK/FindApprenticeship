@using System.Web.Mvc.Html
@using SFA.Apprenticeships.Domain.Entities.Raa.Reference
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Domain.Entities.ReferenceData
@using SFA.Apprenticeships.Web.Manage.Constants
@model List<SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy.EditCategoryViewModel>
@{
    ViewBag.Title = "Frameworks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 id="heading" class="heading-xlarge">Frameworks</h1>

@Html.RouteLink("Download Frameworks", ManagementRouteNames.AdminFrameworksCsv)

<div>
    <input type="text" placeholder="Type to search" data-bind="value: searchText, valueUpdate: 'keyup'" />
    <button style="display: none;" class="button no-handler" data-bind="css : { 'disabled' : busy }, visible : changedItems().length > 0, click: saveChanges">
        <span data-bind="visible: !busy()">Save changes to <span data-bind="text: changedItems().length"></span> item(s)</span>
        <span data-bind="visible: busy">Saving</span>
    </button>
</div>

<table>
    <tr>
        <th>ID</th>
        <th>SSAT1</th>
        <th>Frameworks</th>
        <th>Status</th>
    </tr>
    
    <tbody data-bind="template: { name: 'category', foreach: categories, as: 'category' }">
    @foreach (var subCategory in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => subCategory.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => subCategory.SsatName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => subCategory.FullName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => subCategory.Status)
            </td>
        </tr>
    }
    </tbody>
</table>

@section scripts {
    @Scripts.Render("~/bundles/knockout")

    <script type="text/html" id="category">
        <tr data-bind="style : { 'background-color' : category.Changed() ? '#dee0e2' : 'none' }">
            <td data-bind="text: category.Id"></td>
            <td data-bind="text: category.SsatName"></td>
            <td data-bind="text: category.FullName"></td>
            <td>
                <select data-bind="options: $root.statuses, optionsText: 'name', value: category.StatusText"></select>
            </td>
        </tr>
    </script>

    <script>
        var pageInit = function() {
            var statuses = [
                { name: 'Active', value: @((int) CategoryStatus.Active) },
                { name: 'Ceased', value: @((int)CategoryStatus.Ceased) },
                { name: 'Pending closure', value: @((int)CategoryStatus.PendingClosure) }
            ];

            var mappings = {
                create: function(options) {
                    var mapped = ko.mapping.fromJS(options.data);
                    mapped.Selected = ko.observable(false);

                    var status = '';
                    for (var i = 0; i < statuses.length; i++) {
                        if (statuses[i].value === mapped.Status()) {
                            status = statuses[i]; //.name;
                            break;
                        }
                    }

                    mapped.StatusText = ko.observable(status);

                    mapped.Changed = ko.observable(false);

                    mapped.StatusText.subscribe(function(newValue) {
                        for (var i = 0; i < statuses.length; i++) {
                            if (statuses[i].name === newValue.name) {
                                mapped.Status(statuses[i].value);
                                return;
                            }
                        }
                    });

                    return mapped;
                }
            };

            function ViewModel() {
                var self = this;

                self.busy = ko.observable(false);
                self.statuses = ko.observableArray(statuses);

                self.data = ko.mapping.fromJS(@Html.Raw(Json.Encode(Model)), mappings);

                self.dataChange = function(item) {
                    item.Changed(true);
                }

                self.searchText = ko.observable();

                self.categories = ko.computed(function() {
                    if (self.searchText() != null) {
                        var filter = self.searchText().toLowerCase();

                        return ko.utils.arrayFilter(self.data(),
                            function(item) {
                                var match = false;

                                var id = item.Id();
                                if (id != null) match = match || id.toString().toLowerCase().indexOf(filter) > -1;

                                var ssatName = item.SsatName();
                                if (ssatName != null) match = match || ssatName.toLowerCase().indexOf(filter) > -1;

                                var fullName = item.FullName();
                                if (fullName != null)
                                    match = match || fullName.toLowerCase().indexOf(filter) > -1;

                                return match;
                            });
                    } else {
                        return self.data();
                    }
                });

                self.changedItems = ko.computed(function() {
                    return ko.utils.arrayFilter(self.data(),
                        function(item) {
                            return item.Changed();
                        });
                });

                // subscribe to all observables on this object
                for (var i = 0; i < self.data().length; i++) {
                    var mapped = self.data()[i];

                    (function(mapped) {
                        for (var item in mapped) {
                            if (item !== 'Status' && mapped.hasOwnProperty(item) && item.indexOf('_') === -1) {
                                mapped[item].subscribe(function(newValue) { self.dataChange(mapped); });
                            }
                        }
                    }(mapped));

                }

                // functions
                self.saveChanges = function() {
                    self.busy(true);

                    var df = [];

                    var changedItems = self.changedItems();

                    for (var i = 0; i < changedItems.length; i++) {
                        df.push(
                            $.post('@Url.Action("UpdateFramework")', ko.mapping.toJS(changedItems[i]))
                            .then(function() {
                                // set changed flag on item back to false
                            })
                        );
                    }

                    $.when(df).promise().then(function(response) {
                        self.busy(false);

                        //cleanup
                    }).fail(function() {
                        alert('erk');
                    });
                }

                return self;
            };

            var viewModel = new ViewModel();

            ko.applyBindings(viewModel);
        }

        pageInit();
    </script>
}