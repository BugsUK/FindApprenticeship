@model VacancyViewModel

@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Infrastructure.Presentation
@using SFA.Apprenticeships.Web.Raa.Common.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy

@{
    var editableItemClass = Model.IsEditable ? "editable-item" : "";
    var editableApprenticeshipLevel = string.IsNullOrWhiteSpace(Model.StandardName);
    var editableApprenticeshipLevelClass = (!Model.IsEditable || !editableApprenticeshipLevel ) ? "" : "editable-item";
}

<section>
    <div class="grid-wrapper">
        <div class="grid grid-2-3">
            <h1 id="heading" class="heading-xlarge">
                @if (Model.VacancyType == VacancyType.Traineeship)
                {
                    <span>Opportunity preview</span>
                }
                else
                {
                    <span>Vacancy preview</span>
                }
            </h1>
        </div>
        <div class="grid grid-1-3" style="float: right">
            @Html.Partial(ContactDetailsAndVacancyHistoryViewModel.PartialView, Model.ContactDetailsAndVacancyHistory ?? ContactDetailsAndVacancyHistoryViewModel.EmptyContactDetailsAndVacancyHistory)
            @Html.Partial(VacancyLinksViewModel.PartialView, new VacancyLinksViewModel(Model.VacancyReferenceNumber, Model.Status))
        </div>
        <div class="grid grid-2-3" style="clear: left">
            <div class="hgroup text @editableItemClass">
                <h1 class="heading-xlarge" id="vacancy-title" itemprop="title">
                    @Model.VacancyType.GetTitle(Model.NewVacancyViewModel.Title)
                    @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.Title, Model.NewVacancyViewModel.TitleComment, Model.BasicDetailsLink))
                </h1>
                <p class="subtitle" id="vacancy-subtitle-employer-name" itemprop="hiringOrganization">@Model.EmployerName</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.Title, Model.BasicDetailsLink, Model.NewVacancyViewModel.TitleComment))
            </div>
        </div>
    </div>
</section>

<section>
    <div class="grid-wrapper">
        <div class="grid grid-2-3">
            <div class="inner-block-padr">
                <div class="@editableItemClass">
                    <h3 class="bold-small">
                        @if (Model.VacancyType == VacancyType.Traineeship)
                        {
                            <span>Summary</span>
                        }
                        else
                        {
                            <span>Brief overview of the role</span>
                        }
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.ShortDescription, Model.NewVacancyViewModel.ShortDescriptionComment, Model.BasicDetailsLink))
                    </h3>
                    <div class="text" itemprop="description">
                        <p id="vacancy-description" class="preserve-formatting">@Model.NewVacancyViewModel.ShortDescription</p>
                        @Html.Partial(ApplicationsLinkViewModel.PartialView, new ApplicationsLinkViewModel(Model.VacancyReferenceNumber, Model.ApplicationCount))
                    </div>
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.ShortDescription, Model.BasicDetailsLink, Model.NewVacancyViewModel.ShortDescriptionComment))
                </div>
            </div>
        </div>
        <div class="grid grid-1-3">
            <div class="@editableItemClass">
                <h3 class="bold-small">
                    Closing date
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.ClosingDate, ViewData.ModelState, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.ClosingDateComment))
                </h3>
                <p id="vacancy-closing-date">@Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.ClosingDate.Date.ToFriendlyClosingToday()</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.ClosingDate, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.ClosingDateComment))
            </div>
        </div>
    </div>
</section>
<section class="section-border grid-wrapper" id="vacancy-info">
    <h2 class="heading-large">
        @if (Model.VacancyType == VacancyType.Traineeship)
        {
            <span>Traineeship details</span>
        }
        else
        {
            <span>Apprenticeship summary</span>
        }
    </h2>
    <div class="grid grid-1-3">
        <div class="inner-block-padr">

            @if (Model.VacancyType == VacancyType.Traineeship)
            {
                <div>
                    <h3 class="bold-small">Training provider</h3>
                    <p id="vacancy-provider-name">@Model.ProviderSite.Name</p>
                </div>

                <div class="@editableItemClass">
                    <h3 class="bold-small">
                        Traineeship sector
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.SectorCodeName, Model.TrainingDetailsViewModel.SectorCodeNameComment, Model.TrainingDetailsLink))
                    </h3>
                    <p id="traineeship-sector">@Html.DisplayFor(m => m.SectorName)</p>
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.SectorCodeName, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.SectorCodeNameComment))
                </div>
            }

            @Html.Partial("DisplayTemplates/Vacancy/_WorkingWeekAndWage", Model, new ViewDataDictionary {{"editableItemClass", editableItemClass}})

            <div class="@editableItemClass">
                <h3 class="bold-small">
                    @if (Model.VacancyType == VacancyType.Traineeship)
                    {
                        <span>Expected duration</span>
                    }
                    else
                    {
                        <span>Expected apprenticeship duration</span>
                    }
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.FurtherVacancyDetailsViewModel.Duration, ViewData.ModelState, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.DurationComment))
                </h3>
                <p id="vacancy-expected-duration">@Model.FurtherVacancyDetailsViewModel.DurationTypeDisplayText</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.FurtherVacancyDetailsViewModel.Duration, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.DurationComment))
            </div>

            <div class="@editableItemClass">
                <h3 class="bold-small">
                    Possible start date
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDate, ViewData.ModelState, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDateComment))
                </h3>
                <p id="vacancy-start-date">
                    @Html.DisplayFor(m => Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDate.Date)
                </p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDate, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDateComment))
            </div>

            @if (Model.VacancyType == VacancyType.Apprenticeship)
            {
                <div class="@editableApprenticeshipLevelClass">
                    <h3 class="bold-small">
                        Apprenticeship level
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.ApprenticeshipLevel, Model.TrainingDetailsViewModel.ApprenticeshipLevelComment, Model.TrainingDetailsLink))
                    </h3>
                    <p id="vacancy-type" itemprop="employmentType">
                        @Html.DisplayFor(m => m.TrainingDetailsViewModel.ApprenticeshipLevel) Level Apprenticeship
                    </p>
                    @if (editableApprenticeshipLevel)
                    {
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.ApprenticeshipLevel, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.ApprenticeshipLevelComment))
                    }
                </div>
            }

            @if (Model.Status.CanShowVacancyReferencenumber())
            {
                <div>
                    <h3 class="bold-small">Reference number</h3>
                    <p id="vacancy-reference-id">@Model.VacancyReferenceNumber.GetVacancyReference()</p>
                </div>
            }

            @if (Model.IsSingleLocation)
            {
                var positions = Model.NewVacancyViewModel.IsEmployerLocationMainApprenticeshipLocation.Value ? Model.NewVacancyViewModel.NumberOfPositions : Model.NewVacancyViewModel.LocationAddresses.First().NumberOfPositions;

                <div class="@editableItemClass">
                    <h3 class="bold-small">Positions</h3>
                    <p id="vacancy-reference-id">@positions available</p>

                    @if (Model.NewVacancyViewModel.IsEmployerLocationMainApprenticeshipLocation.Value)
                    {
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.NumberOfPositions, Model.EmployerLink, Model.NewVacancyViewModel.NumberOfPositionsComment))
                    }
                    else
                    {
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.LocationAddresses.First().NumberOfPositions, Model.LocationsLink, Model.NewVacancyViewModel.NumberOfPositionsComment))
                    }
                </div>
            }

            @if (Model.VacancyType == VacancyType.Traineeship)
            {
                <div class="text @editableItemClass">
                    <h3 class="bold-small">
                        Contact details for candidate
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.ContactName, Model.TrainingDetailsViewModel.ContactDetailsComment, Model.TrainingDetailsLink))
                    </h3>
                    @if (string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactName) && string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactNumber) && string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactEmail))
                    {
                        <span>None specified. This message will not appear on the vacancy when it goes live</span>
                    }
                    else
                    {
                        <p class="small-btm-margin">@Model.TrainingDetailsViewModel.ContactName</p>
                        <p class="small-btm-margin">@Model.TrainingDetailsViewModel.ContactNumber</p>
                        <p class="small-btm-margin">@Model.TrainingDetailsViewModel.ContactEmail</p>
                    }
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.ContactName, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.ContactDetailsComment))
                </div>
            }
        </div>
    </div>
    <div class="grid grid-2-3">
        <div class="text @editableItemClass" itemprop="responsibilities">
            <h3 class="bold-small" id="long-description-header">
                @if (Model.VacancyType == VacancyType.Traineeship)
                {
                    <span>Work placement</span>
                }
                else
                {
                    <span>Vacancy description</span>
                }
                @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.FurtherVacancyDetailsViewModel.LongDescription, Model.FurtherVacancyDetailsViewModel.LongDescriptionComment, Model.SummaryLink))
            </h3>
            <p id="vacancy-full-descrpition" class="preserve-formatting">@Html.Raw(Model.FurtherVacancyDetailsViewModel.LongDescription)</p>
            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.FurtherVacancyDetailsViewModel.LongDescription, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.LongDescriptionComment))
        </div>
        @if (Model.VacancyType == VacancyType.Traineeship)
        {
            <div class="@editableItemClass">
                <h3 class="heading-small">
                    Training to be provided
                    @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.TrainingProvided, Model.TrainingDetailsViewModel.TrainingProvidedComment, Model.TrainingDetailsLink))
                </h3>
                <p id="vacancy-training-to-be-provided" class="preserve-formatting">@Model.TrainingDetailsViewModel.TrainingProvided</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.TrainingProvided, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.TrainingProvidedComment))
            </div>
            <div class="@editableItemClass">
                <div class="text">
                    <h3 class="heading-small">
                        Future prospects
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.FutureProspects, Model.VacancyRequirementsProspectsViewModel.FutureProspectsComment, Model.RequirementsProspectsLink))
                    </h3>
                    <p id="vacancy-future-prospects" itemprop="incentives" class="preserve-formatting">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.FutureProspects)</p>
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.FutureProspects, Model.RequirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.FutureProspectsComment))
                </div>
            </div>
        }
    </div>
</section>

@if (Model.VacancyType == VacancyType.Traineeship)
{
    @Html.Partial("DisplayTemplates/Vacancy/_AboutTheEmployer", Model, new ViewDataDictionary { { "editableItemClass", editableItemClass } })
}

@Html.Partial("DisplayTemplates/Vacancy/_RequirementsAndProspects", Model, new ViewDataDictionary { { "editableItemClass", editableItemClass } })

@Html.Partial("DisplayTemplates/Vacancy/_QuestionsForCandidates", Model, new ViewDataDictionary { { "editableItemClass", editableItemClass } })

@if (Model.VacancyType == VacancyType.Apprenticeship)
{
    @Html.Partial("DisplayTemplates/Vacancy/_AboutTheEmployer", Model, new ViewDataDictionary { { "editableItemClass", editableItemClass } })
}

@if (Model.NewVacancyViewModel.OfflineVacancy.Value)
{
    <section class="section-border" id="offline-vacancy" style="">
        <div class="@editableItemClass">
            <h2 class="heading-large">Employer's application instructions
                @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.OfflineApplicationInstructions, Model.NewVacancyViewModel.OfflineApplicationInstructionsComment, Model.BasicDetailsLink))
            </h2>
            <p id="application-instructions" class="preserve-formatting">@Model.NewVacancyViewModel.OfflineApplicationInstructions</p>
            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.OfflineApplicationInstructions, Model.BasicDetailsLink, Model.NewVacancyViewModel.OfflineApplicationInstructionsComment))
        </div>
        <div class="@editableItemClass">
            <p class="no-btm-margin">This apprenticeship requires you to apply through the employer's website.</p>
            <a id="external-employer-website" rel="external" href="@Model.NewVacancyViewModel.OfflineApplicationUrl" target="_blank">@Model.NewVacancyViewModel.OfflineApplicationUrl</a>
            @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.OfflineApplicationUrl, Model.NewVacancyViewModel.OfflineApplicationUrlComment, Model.BasicDetailsLink))
            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.OfflineApplicationUrl, Model.BasicDetailsLink, Model.NewVacancyViewModel.OfflineApplicationUrlComment))
        </div>
    </section>
}

@if (Model.VacancyType == VacancyType.Apprenticeship)
{
    <section class="section-border grid-wrapper" id="provider-info">
        <h2 class="heading-large">Training provider</h2>
        <div class="grid grid-2-3">
            <div class="inner-block-padr">
                <div class="text">
                    <div class="@editableItemClass">
                        <h3 class="heading-small">
                            Training to be provided
                            @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.TrainingProvided, Model.TrainingDetailsViewModel.TrainingProvidedComment, Model.TrainingDetailsLink))
                        </h3>
                        <p id="vacancy-training-to-be-provided" class="preserve-formatting">@Model.TrainingDetailsViewModel.TrainingProvided</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.TrainingProvided, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.TrainingProvidedComment))
                    </div>
                    <div class="@editableItemClass">
                        @if (Model.TrainingDetailsViewModel.TrainingType == TrainingType.Frameworks)
                        {
                            <h3 class="heading-small">
                                Apprenticeship framework
                                @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.FrameworkCodeName, Model.TrainingDetailsViewModel.FrameworkCodeNameComment, Model.TrainingDetailsLink))
                            </h3>
                            <p id="vacancy-framework">@Html.Raw(Model.FrameworkName)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.FrameworkCodeName, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.FrameworkCodeNameComment))
                        }
                        @if (Model.TrainingDetailsViewModel.TrainingType == TrainingType.Standards)
                        {
                            <h3 class="heading-small">
                                Apprenticeship standard
                                @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.StandardId, Model.TrainingDetailsViewModel.StandardIdComment, Model.TrainingDetailsLink))
                            </h3>
                            <p id="vacancy-standard">@Html.Raw(Model.StandardName)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.StandardId, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.StandardIdComment))
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="grid grid-1-3">
            <div class="text">
                <h3 class="bold-small">Training provider</h3>
                <p id="vacancy-provider-name">@Model.ProviderSite.Name</p>
            </div>

            <div class="text @editableItemClass">
                <h3 class="bold-small">
                    Contact
                    @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.ContactName, Model.TrainingDetailsViewModel.ContactDetailsComment, Model.TrainingDetailsLink))
                </h3>
                @if (string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactName) && string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactNumber) && string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactEmail))
                {
                    <span>None specified. This message will not appear on the vacancy when it goes live</span>
                }
                else
                {
                    <p class="small-btm-margin">@Model.TrainingDetailsViewModel.ContactName</p>
                    <p class="small-btm-margin">@Model.TrainingDetailsViewModel.ContactNumber</p>
                    <p class="small-btm-margin">@Model.TrainingDetailsViewModel.ContactEmail</p>
                }
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.ContactName, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.ContactDetailsComment))
            </div>
        </div>
    </section>
}

@if (Model.VacancyType == VacancyType.Traineeship)
{
    <section class="section-border grid-wrapper" id="about-traineeships">
        <h2 class="heading-large">About traineeships</h2>
        <div class="grid grid-2-3">
            <div class="inner-block-padr">
                <p>
                    A traineeship is a course with work experience that gets you ready for work or an apprenticeship. It can last up to 6 months.<br/>
                    You can apply if you’re:
                    <ul>
                        <li>eligible to work in England</li>
                        <li>unemployed and have little or no work experience</li>
                        <li>aged 16 to 24 and qualified below Level 3</li>
                    </ul>
                </p>
                <p>
                    You’ll get:
                    <ul>
                        <li>a work experience placement</li>
                        <li>help with English and maths (if you need it)</li>
                    </ul>
                </p>
                <p>You won’t be paid, but you may be given expenses for things like travel and meals.</p>
            </div>
        </div>
    </section>
}