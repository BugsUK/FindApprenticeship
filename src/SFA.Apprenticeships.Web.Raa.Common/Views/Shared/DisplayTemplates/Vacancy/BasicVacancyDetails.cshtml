@model NewVacancyViewModel
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Web.Raa.Common.Constants.ViewModels
@using SFA.Apprenticeships.Web.Raa.Common.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy

@{
    ViewBag.Title = "Recruit an Apprentice - Select framework and level";

    const string selected = "selected";

    var isApplicationThroughRAAYes = (Model.OfflineVacancy.HasValue && !Model.OfflineVacancy.Value) ? selected : null;
    var isApplicationThroughRAANo = (Model.OfflineVacancy.HasValue && Model.OfflineVacancy.Value) ? selected : null;

    <h1 class="heading-xlarge">
        Enter basic vacancy details
    </h1>

    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.IsEmployerLocationMainApprenticeshipLocation)
    @Html.HiddenFor(m => m.OfflineVacancyType)
    @Html.HiddenFor(m => m.NumberOfPositions)
    @Html.HiddenFor(m => m.ComeFromPreview)
    @Html.HiddenFor(m => m.VacancySource)
    @Html.Partial("ValidationSummary", ViewData.ModelState)

    @Html.FormTextAreaFor(m => m.Title, controlHtmlAttributes: new {type = "text", size = 12, @class = "width-all-1-1 form-textarea-small"})
    @Html.EditorFor(m => m.TitleComment, "Comment", Html.GetLabelFor(m => m.TitleComment))
    @Html.ValidationMessageFor(m => m.TitleComment)

    @Html.FormTextAreaFor(m => m.ShortDescription, controlHtmlAttributes: new {type = "text", size = 12, @class = "width-all-1-1 form-textarea-medium"})
    @Html.EditorFor(m => m.ShortDescriptionComment, "Comment", Html.GetLabelFor(m => m.ShortDescriptionComment))
    @Html.ValidationMessageFor(m => m.ShortDescriptionComment)

    <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.VacancyType)))">
        <a name="@Html.NameFor(m => m.VacancyType).ToString().ToLower()"></a>
        <label class="form-label">Vacancy type</label>
        @* ReSharper disable once Html.IdNotResolved *@
        <label for="vacancy-type-apprenticeship" class="block-label">
            @Html.RadioButtonFor(model => model.VacancyType, VacancyType.Apprenticeship, new { id = "vacancy-type-apprenticeship", aria_labelledby = "vacancy-type-label" }) Apprenticeship
        </label>
        @* ReSharper disable once Html.IdNotResolved *@
        <label for="vacancy-type-traineeship" class="block-label">
            @Html.RadioButtonFor(model => model.VacancyType, VacancyType.Traineeship, new { id = "vacancy-type-traineeship", aria_labelledby = "vacancy-type-label" }) Traineeship
        </label>
        @Html.ValidationMessageFor(m => m.VacancyType)
    </div>

    <div class="form-group">
        <div class="blocklabel-single-container">
            <div class="form-group inline clearfix blocklabel-single form-group-compound">
                <h3 class="heading-small">Manage application method</h3>
                <p>
                    How will candidates apply for this vacancy?
                </p>
                @* ReSharper disable once Html.IdNotResolved *@
                <label for="apprenticeship-online-vacancy" class="block-label" data-target="online-panel" @isApplicationThroughRAAYes>
                    @Html.RadioButtonFor(model => model.OfflineVacancy, false, new {id = "apprenticeship-online-vacancy", aria_labelledby = "apprenticeship-vacancy-management-type-label"}) Candidates will apply on this website
                </label>

                @* ReSharper disable once Html.IdNotResolved *@
                <label for="apprenticeship-offline-vacancy" class="block-label" data-target="offline-panel" @isApplicationThroughRAANo>
                    @Html.RadioButtonFor(model => model.OfflineVacancy, true, new {id = "apprenticeship-offline-vacancy", aria_labelledby = "apprenticeship-vacancy-management-type-label", aria_controls = "offline-panel"}) Candidates will apply through an external website
                </label>
                @Html.ValidationMessageFor(m => m.OfflineVacancy)
            </div>
            <div class="hide-js">Only answer if the vacancy applications will be managed through an external website:</div>
            <div id="offline-panel" class="toggle-content panel-indent blocklabel-content">
                <div class="form-group">
                    <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.OfflineApplicationUrl)))">
                        <a name="@Html.NameFor(m => m.OfflineApplicationUrl).ToString().ToLower()"></a>
                        @Html.LabelFor(m => m.OfflineApplicationUrl)
                        @if (Model.IsEmployerLocationMainApprenticeshipLocation != true && Model.LocationAddresses != null && Model.LocationAddresses.Count > 1)
                        {
                            if (Model.OfflineVacancyType == OfflineVacancyType.MultiUrl)
                            {
                                <p class="inline-text">Alternatively, <button id="single-offline-application-url-button" type="submit" class="button-link no-autosave" name="CreateVacancy" value="SingleOfflineApplicationUrl">use the same web address for all vacancy locations</button></p>
                            }
                            else
                            {
                                <p class="inline-text">Alternatively, you can <button id="multiple-offline-application-urls-button" type="submit" class="button-link no-autosave" name="CreateVacancy" value="MultipleOfflineApplicationUrls">enter a different web address for each vacancy location</button></p>
                            }
                        }
                        @if (Model.OfflineVacancyType == OfflineVacancyType.MultiUrl && Model.LocationAddresses != null)
                        {
                            <table id="multiple-apprenticeship-offline-application-urls-table">
                                <colgroup>
                                    <col class="t30">
                                    <col class="t20">
                                    <col class="t50">
                                </colgroup>
                                <thead>
                                    <tr>
                                        <th>Location</th>
                                        <th>Number of positions</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="location-addresses">
                                    @for (var i=0; i<Model.LocationAddresses.Count; i++)
                                    {
                                        var locationAddress = Model.LocationAddresses[i];
                                        <tr>
                                            <td class="location-address">
                                                @locationAddress.Address.AddressLine1
                                                @if (!string.IsNullOrWhiteSpace(@locationAddress.Address.AddressLine2))
                                                {
                                                    <br />@locationAddress.Address.AddressLine2
                                                }
                                                <br />@locationAddress.Address.AddressLine4 @locationAddress.Address.Postcode
                                            </td>
                                            <td class="location-positions">
                                                @locationAddress.NumberOfPositions
                                            </td>
                                            <td class="location-offline-urls">
                                                <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType("LocationAddresses[" + i + "].OfflineApplicationUrl")))" style="margin-bottom: 0">
                                                    @Html.Hidden("LocationAddresses[" + i + "].VacancyLocationId", locationAddress.VacancyLocationId)
                                                    @Html.Hidden("LocationAddresses[" + i + "].NumberOfPositions", locationAddress.NumberOfPositions)
                                                    @Html.TextBoxFor(m => Model.LocationAddresses[i].OfflineApplicationUrl, new {@id = "locationaddresses_" + i + "__offlineapplicationurl", @class = "width-all-1-1 form-control", type = "text", size = 12})
                                                    @Html.ValidationMessage("LocationAddresses[" + i + "].OfflineApplicationUrl")
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            @Html.TextBoxFor(m => m.OfflineApplicationUrl, new { @class = "width-all-1-1 form-control", type = "text", size = 12, id = "apprenticeship-offline-application-url" })
                            @Html.ValidationMessageFor(m => m.OfflineApplicationUrl)
                        }
                        @Html.EditorFor(m => m.OfflineApplicationUrlComment, "Comment", Html.GetLabelFor(m => m.OfflineApplicationUrlComment))
                        @Html.ValidationMessageFor(m => m.OfflineApplicationUrlComment)
                    </div>
                </div>
                <div class="form-group">
                    @* ReSharper disable once Html.IdNotResolved *@
                    @Html.FormTextAreaFor(m => m.OfflineApplicationInstructions, controlHtmlAttributes: new {type = "text", size = 12, @class = "width-all-1-1 form-textarea-medium", id = "apprenticheship-offline-application-instructions"})
                    @Html.EditorFor(m => m.OfflineApplicationInstructionsComment, "Comment", Html.GetLabelFor(m => m.OfflineApplicationInstructionsComment))
                    @Html.ValidationMessageFor(m => m.OfflineApplicationInstructionsComment)
                    <br/>
                </div>
            </div>
        </div>
    </div>

    @Html.HiddenFor(model => model.VacancyReferenceNumber)
    @Html.HiddenFor(model => model.Ukprn)
    @Html.HiddenFor(model => model.VacancyOwnerRelationship.VacancyOwnerRelationshipId)
    @Html.HiddenFor(model => model.VacancyGuid)
    @Html.HiddenFor(model => model.Status)
}