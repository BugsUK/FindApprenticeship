@model NewVacancyViewModel
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Web.Raa.Common.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy

@{
    ViewBag.Title = "Recruit an Apprentice - Select framework and level";

    const string selected = "selected";

    var isApplicationThroughRAAYes = (Model.OfflineVacancy.HasValue && !Model.OfflineVacancy.Value) ? selected : null;
    var isApplicationThroughRAANo = (Model.OfflineVacancy.HasValue && Model.OfflineVacancy.Value) ? selected : null;

    <h1 class="heading-xlarge">
        Enter basic vacancy details
    </h1>

    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.IsEmployerLocationMainApprenticeshipLocation)
    @Html.HiddenFor(m => m.NumberOfPositions)
    @Html.HiddenFor(m => m.ComeFromPreview)
    @Html.HiddenFor(m => m.VacancySource)
    @Html.Partial("ValidationSummary", ViewData.ModelState)

    @Html.FormTextAreaFor(m => m.Title, controlHtmlAttributes: new {type = "text", size = 12, @class = "width-all-1-1 form-textarea-small"})
    @Html.EditorFor(m => m.TitleComment, "Comment", Html.GetLabelFor(m => m.TitleComment))
    @Html.ValidationMessageFor(m => m.TitleComment)

    @Html.FormTextAreaFor(m => m.ShortDescription, controlHtmlAttributes: new {type = "text", size = 12, @class = "width-all-1-1 form-textarea-medium"})
    @Html.EditorFor(m => m.ShortDescriptionComment, "Comment", Html.GetLabelFor(m => m.ShortDescriptionComment))
    @Html.ValidationMessageFor(m => m.ShortDescriptionComment)

    <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.VacancyType)))">
        <a name="@Html.NameFor(m => m.VacancyType).ToString().ToLower()"></a>
        <label class="form-label">Vacancy type</label>
        @* ReSharper disable once Html.IdNotResolved *@
        <label for="vacancy-type-apprenticeship" class="block-label">
            @Html.RadioButtonFor(model => model.VacancyType, VacancyType.Apprenticeship, new { id = "vacancy-type-apprenticeship", aria_labelledby = "vacancy-type-label" }) Apprenticeship
        </label>
        @* ReSharper disable once Html.IdNotResolved *@
        <label for="vacancy-type-traineeship" class="block-label">
            @Html.RadioButtonFor(model => model.VacancyType, VacancyType.Traineeship, new { id = "vacancy-type-traineeship", aria_labelledby = "vacancy-type-label" }) Traineeship
        </label>
        @Html.ValidationMessageFor(m => m.VacancyType)
    </div>

    <div class="form-group">
        <div class="blocklabel-single-container">
            <div class="form-group inline clearfix blocklabel-single form-group-compound">
                <h3 class="heading-small">Manage application method</h3>
                <p>
                    How will candidates apply for this vacancy?
                </p>
                @* ReSharper disable once Html.IdNotResolved *@
                <label for="apprenticeship-online-vacancy" class="block-label" data-target="online-panel" @isApplicationThroughRAAYes>
                    @Html.RadioButtonFor(model => model.OfflineVacancy, false, new {id = "apprenticeship-online-vacancy", aria_labelledby = "apprenticeship-vacancy-management-type-label"}) Candidates will apply on this website
                </label>

                @* ReSharper disable once Html.IdNotResolved *@
                <label for="apprenticeship-offline-vacancy" class="block-label" data-target="offline-panel" @isApplicationThroughRAANo>
                    @Html.RadioButtonFor(model => model.OfflineVacancy, true, new {id = "apprenticeship-offline-vacancy", aria_labelledby = "apprenticeship-vacancy-management-type-label", aria_controls = "offline-panel"}) Candidates will apply through an external website
                </label>
                @Html.ValidationMessageFor(m => m.OfflineVacancy)
            </div>
            <div class="hide-js">Only answer if the vacancy applications will be managed through an extedsErnal website:</div>
            <div id="offline-panel" class="toggle-content panel-indent blocklabel-content">
                <div class="form-group">
                    @* ReSharper disable once Html.IdNotResolved *@
                    @Html.FormTextFor(m => m.OfflineApplicationUrl, controlHtmlAttributes: new {@class = "width-all-1-1", type = "text", size = 12, id = "apprenticeship-offline-application-url"})
                    @Html.EditorFor(m => m.OfflineApplicationUrlComment, "Comment", Html.GetLabelFor(m => m.OfflineApplicationUrlComment))
                    @Html.ValidationMessageFor(m => m.OfflineApplicationUrlComment)
                </div>
                <div class="form-group">
                    @* ReSharper disable once Html.IdNotResolved *@
                    @Html.FormTextAreaFor(m => m.OfflineApplicationInstructions, controlHtmlAttributes: new {type = "text", size = 12, @class = "width-all-1-1 form-textarea-medium", id = "apprenticheship-offline-application-instructions"})
                    @Html.EditorFor(m => m.OfflineApplicationInstructionsComment, "Comment", Html.GetLabelFor(m => m.OfflineApplicationInstructionsComment))
                    @Html.ValidationMessageFor(m => m.OfflineApplicationInstructionsComment)
                    <br/>
                </div>
            </div>
        </div>
    </div>

    @Html.HiddenFor(model => model.VacancyReferenceNumber)
    @Html.HiddenFor(model => model.Ukprn)
    @Html.HiddenFor(model => model.VacancyOwnerRelationship.VacancyOwnerRelationshipId)
    @Html.HiddenFor(model => model.VacancyGuid)
    @Html.HiddenFor(model => model.Status)
}