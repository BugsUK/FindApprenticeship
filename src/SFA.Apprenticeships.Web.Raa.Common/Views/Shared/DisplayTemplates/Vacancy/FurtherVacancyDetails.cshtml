@model SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy.FurtherVacancyDetailsViewModel
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Web.Common.Extensions
@using SFA.Apprenticeships.Web.Common.Validators.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.Constants.ViewModels
@using SFA.Apprenticeships.Web.Raa.Common.Extensions

@{
    var heading = Model.VacancyType == VacancyType.Traineeship ? "Enter opportunity details" : "Enter further details";
    ViewBag.Title = "Recruit an Apprentice - " + heading;
}

<h1 id="heading" class="heading-xlarge">@heading</h1>

@Html.AntiForgeryToken()
@Html.Partial("ValidationSummary", ViewData.ModelState)

@Html.HiddenFor(m => m.VacancyReferenceNumber)
@Html.HiddenFor(m => m.Status)
@Html.HiddenFor(m => m.VacancyType)
@Html.HiddenFor(m => m.WarningsHash)
@Html.HiddenFor(m => m.ComeFromPreview)

<section>
    <div class="form-group">
        <fieldset class="form-group inline-fixed">
            @{
                var workingWeeklabelText = Model.VacancyType == VacancyType.Traineeship ? VacancyViewModelMessages.WorkingWeek.TraineeshipLabelText : null;
                var workingWeekDataValLength = Model.VacancyType == VacancyType.Traineeship ? VacancyViewModelMessages.WorkingWeek.TraineeshipTooLongErrorText : VacancyViewModelMessages.WorkingWeek.TooLongErrorText;
                var workingWeekDataValRegex = Model.VacancyType == VacancyType.Traineeship ? VacancyViewModelMessages.WorkingWeek.TraineeshipWhiteListErrorText : VacancyViewModelMessages.WorkingWeek.WhiteListErrorText;
            }
            @Html.FormTextAreaFor(m => m.WorkingWeek, workingWeeklabelText, containerHtmlAttributes: new {@baseClassName = "working-week"}, controlHtmlAttributes: new {@class = "width-all-1-1", type = "text", size = 12, data_val_length = workingWeekDataValLength, data_val_regex = workingWeekDataValRegex })
        </fieldset>
        @if (Model.VacancyType == VacancyType.Traineeship)
        {
            @Html.HiddenFor(m => m.HoursPerWeek)
        }
        else
        {
            <fieldset class="form-group inline-fixed">
                @Html.FormTextFor(m => m.HoursPerWeek, controlHtmlAttributes: new {@class = "form-control-small", type = "tel", size = 12}, containerHtmlAttributes: new {style = "margin-bottom: 15px"})
            </fieldset>
        }
        <div class="form-group">@Html.EditorFor(m => m.WorkingWeekComment, "Comment", Html.GetLabelFor(m => m.WorkingWeekComment, Model.VacancyType == VacancyType.Traineeship ? VacancyViewModelMessages.WorkingWeekComment.TraineeshipLabelText : null))</div>

        @if (Model.VacancyType == VacancyType.Traineeship)
        {
            @Html.HiddenFor(m => m.WageType)
            @Html.HiddenFor(m => m.Wage)
            @Html.HiddenFor(m => m.WageUnit)
            @Html.HiddenFor(m => m.WageComment)
        }
        else
        {
            <div class="blocklabel-single-container">
                <div class="form-group">
                    <a name="@Html.NameFor(m => m.WageType).ToString().ToLower()"></a>
                    <label class="form-label" for="weekly-wage">Wage</label>
                    <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.WageType)))" data-editable-x="">
                        @* ReSharper disable once Html.IdNotResolved *@
                        <label for="custom-wage" class="block-label" data-target="custom-wage-panel">
                            @Html.RadioButtonFor(model => model.WageType, WageType.Custom, new {id = "custom-wage", aria_controls = "wage-type-panel"})
                            Custom wage
                        </label>
                        @* ReSharper disable once Html.IdNotResolved *@
                        <label for="national-minimum-wage" class="block-label">
                            @Html.RadioButtonFor(model => model.WageType, WageType.NationalMinimum, new {id = "national-minimum-wage", aria_controls = "wage-type-panel"})
                            National Minimum Wage
                        </label>
                        @* ReSharper disable once Html.IdNotResolved *@
                        <label for="apprenticeship-minimum-wage" class="block-label">
                            @Html.RadioButtonFor(model => model.WageType, WageType.ApprenticeshipMinimum, new {id = "apprenticeship-minimum-wage", aria_controls = "wage-type-panel"})
                            National Minimum Wage for apprentices
                        </label>
                        @Html.ValidationMessageFor(m => m.WageType)
                    </div>
                    <div id="custom-wage-panel" class="toggle-content blocklabel-content">
                        <fieldset class="form-group inline-fixed">
                            £
                            @Html.FormTextFor(m => m.Wage, containerHtmlAttributes: new {@class = "form-group-compound"}, labelHtmlAttributes: new {style = "Display: none"}, controlHtmlAttributes: new {@class = "form-control-large", type = "tel", size = 12})
                            @Html.DropDownListFor(m => m.WageUnit, Model.WageUnits)
                        </fieldset>
                    </div>
                </div>
                <div class="form-group">@Html.EditorFor(m => m.WageComment, "Comment", Html.GetLabelFor(m => m.WageComment))</div>
            </div>
        }

        <fieldset class="form-group">
            <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.Duration)))">
                <a name="@Html.NameFor(m => m.Duration).ToString().ToLower()"></a>
                @Html.LabelFor(m => m.Duration, new {@class = "form-label"})
                @Html.TextBoxFor(m => m.Duration, new {@class = "form-control-large form-control", type = "tel", size = 12})
                @Html.DropDownListFor(m => m.DurationType, Model.DurationTypes)
                @Html.ValidationMessageWithSeverityFor(m => m.Duration, Html.GetValidationType(m => m.Duration))
            </div>
        </fieldset>
        <fieldset class="form-group">
            @Html.EditorFor(m => m.DurationComment, "Comment", Html.GetLabelFor(m => m.DurationComment))
        </fieldset>

        <fieldset class="form-group inline-fixed date-input @SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.VacancyDatesViewModel.ClosingDate))">
            <a name="@Html.NameFor(m => m.VacancyDatesViewModel.ClosingDate).ToString().Replace(".", "_").ToLower()"></a>
            <legend class="form-label">@Model.GetMetadata(m => m.VacancyDatesViewModel.ClosingDate).DisplayName</legend>
            @Html.EditorFor(m => m.VacancyDatesViewModel.ClosingDate)
            @Html.ValidationMessageWithSeverityFor(m => m.VacancyDatesViewModel.ClosingDate, Html.GetValidationType(m => m.VacancyDatesViewModel.ClosingDate))
        </fieldset>
        <div class="form-group">@Html.EditorFor(m => m.VacancyDatesViewModel.ClosingDateComment, "Comment", Html.GetLabelFor(m => m.VacancyDatesViewModel.ClosingDateComment))</div>

        <fieldset class="form-group inline-fixed date-input @SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.VacancyDatesViewModel.PossibleStartDate))">
            <a name="@Html.NameFor(m => m.VacancyDatesViewModel.PossibleStartDate).ToString().Replace(".", "_").ToLower()"></a>
            <legend class="form-label">@Model.GetMetadata(m => m.VacancyDatesViewModel.PossibleStartDate).DisplayName</legend>
            @Html.EditorFor(m => m.VacancyDatesViewModel.PossibleStartDate)
            @Html.ValidationMessageWithSeverityFor(m => m.VacancyDatesViewModel.PossibleStartDate, Html.GetValidationType(m => m.VacancyDatesViewModel.PossibleStartDate))
        </fieldset>
        <div class="form-group">@Html.EditorFor(m => m.VacancyDatesViewModel.PossibleStartDateComment, "Comment", Html.GetLabelFor(m => m.VacancyDatesViewModel.PossibleStartDateComment))</div>
        @{
            var longDescriptionlabelText = Model.VacancyType == VacancyType.Traineeship ? VacancyViewModelMessages.LongDescription.TraineeshipLabelText : null;
            var longDescriptionDataValLength = Model.VacancyType == VacancyType.Traineeship ? VacancyViewModelMessages.LongDescription.TraineeshipTooLongErrorText : VacancyViewModelMessages.LongDescription.TooLongErrorText;
            var longDescriptionDataValRegex = Model.VacancyType == VacancyType.Traineeship ? VacancyViewModelMessages.LongDescription.TraineeshipWhiteListInvalidCharacterErrorText : VacancyViewModelMessages.LongDescription.WhiteListInvalidCharacterErrorText;
        }
        @Html.FormTextAreaFor(m => m.LongDescription, longDescriptionlabelText, controlHtmlAttributes: new { id="editor1", @class = "ckeditor", type = "text", size = 12, rows = 22, data_val_length = longDescriptionDataValLength, data_val_regex = longDescriptionDataValRegex})        
        @Html.EditorFor(m => m.LongDescriptionComment, "Comment", Html.GetLabelFor(m => m.LongDescriptionComment, Model.VacancyType == VacancyType.Traineeship ? VacancyViewModelMessages.LongDescriptionComment.TraineeshipLabelText : null))
    </div>
</section>
