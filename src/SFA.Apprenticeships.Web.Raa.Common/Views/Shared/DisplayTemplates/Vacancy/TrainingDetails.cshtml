@model TrainingDetailsViewModel
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Web.Raa.Common.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy

@{
    ViewBag.Title = "Recruit an Apprentice - Apprenticeship training";

    const string selected = "selected";

    var frameworksSelected = Model.TrainingType == TrainingType.Frameworks ? selected : null;
    var standardsSelected = Model.TrainingType == TrainingType.Standards ? selected : null;


    @Html.AntiForgeryToken()
    @Html.Partial("ValidationSummary", ViewData.ModelState)

    <div class="grid-row">
        <div class="column-two-thirds">
            <h1 class="heading-xlarge">
                Enter training details
            </h1>
        </div>
    </div>

    <div class="grid-row">
        <div class="column-two-thirds">
            @Html.HiddenFor(m => m.VacancyReferenceNumber)
            @Html.HiddenFor(m => m.Status)
            @Html.HiddenFor(m => m.VacancyType)
            @Html.HiddenFor(m => m.ComeFromPreview)
            @Html.HiddenFor(m => m.VacancySource)

            @{
                var isAnyTrainingTypeSelected = Model.TrainingType != TrainingType.Unknown;
                var isFramework = isAnyTrainingTypeSelected && Model.TrainingType == TrainingType.Frameworks;
                var isStandard = isAnyTrainingTypeSelected && Model.TrainingType == TrainingType.Standards;
                var frameworkClass = isFramework ? "" : "hide-nojs";
                var standardClass = isStandard ? "" : "hide-nojs";
            }

                    @if (Model.VacancyType == VacancyType.Traineeship)
            {
                        @Html.HiddenFor(m => m.TrainingType)
                        @Html.HiddenFor(m => m.FrameworkCodeName)
                        @Html.HiddenFor(m => m.FrameworkCodeNameComment)
                        @Html.HiddenFor(m => m.StandardId)
                        @Html.HiddenFor(m => m.StandardIdComment)
                        @Html.HiddenFor(m => m.ApprenticeshipLevel)
                        @Html.HiddenFor(m => m.ApprenticeshipLevelComment)

                        <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.SectorCodeName)))">
                            <a name="@Html.NameFor(m => m.SectorCodeName).ToString().ToLower()"></a>
                            <label for="@Html.NameFor(m => m.SectorCodeName)" class="form-label-bold">Traineeship sector</label>
                            @Html.DropDownListFor(m => m.SectorCodeName, Model.Sectors, new { @class = "form-control form-control-2-3 chosen-select" })
                            @Html.ValidationMessageFor(m => m.SectorCodeName)
                            @Html.EditorFor(m => m.SectorCodeNameComment, "Comment", Html.GetLabelFor(m => m.SectorCodeNameComment))
                            @Html.ValidationMessageFor(m => m.SectorCodeNameComment)
                        </div>
                    }
                    else
                    {
                        <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.TrainingType))) inline clearfix blocklabel-single hide-nojs">
                            <fieldset class="inline">
                                <a name="@Html.NameFor(m => m.TrainingType).ToString().ToLower()"></a>
                                <h3 class="heading-small">Apprenticeship type</h3>
                                <legend class="visually-hidden">Apprenticeship type</legend>

                                <p id="frameworks-standards-explained">
                                    <span class="form-hint">Select a framework if you only offer this type of apprenticeship training.</span>
                                </p>
                                <p>
                                    <span class="form-hint">Alternatively, if you also deliver the new <a href="https://www.gov.uk/government/collections/apprenticeship-standards" rel="external" target="_blank">apprenticeship standards</a>, you can choose a standard job role instead.</span>
</p>

                                @* ReSharper disable once Html.IdNotResolved *@
                                <label data-target="training-type-frameworks-panel" for="training-type-frameworks" class="block-label selection-button-radio @frameworksSelected">
                                    @Html.RadioButtonFor(model => model.TrainingType, TrainingType.Frameworks, new { id = "training-type-frameworks", aria_controls = "training-type-frameworks-panel" })
                                    Framework
                                </label>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label data-target="training-type-standards-panel" for="training-type-standards" class="block-label selection-button-radio @standardsSelected">
                                    @Html.RadioButtonFor(model => model.TrainingType, TrainingType.Standards, new { id = "training-type-standards", aria_controls = "training-type-standards-panel" })
                                    Standard
                                </label>

                            </fieldset>

                            @Html.ValidationMessageFor(m => m.TrainingType)
                        </div>

                        <noscript>
                            <div class="form-group">
                                <h3 class="bold-small">Apprenticeship type</h3>

                                <p id="frameworks-standards-explained">
                                    Select a framework if you only offer this type of apprenticeship training.<br />
                                    Alternatively, if you also deliver the new <a href="https://www.gov.uk/government/collections/apprenticeship-standards" rel="external" target="_blank">apprenticeship standards</a>, you can choose a standard job role instead.
                                </p>

                                @if (isFramework)
                                {
                                    <label class="unselected-apprenticeship-type">Framework</label>
                                }
                                else
                                {
                                    <button id="selectFramework" type="submit" class="button sfa-button-secondary" name="TrainingDetails" value="SelectFramework">Framework</button>
                                }

                                @if (isStandard)
                                {
                                    <label class="unselected-apprenticeship-type">Standard</label>
                                }
                                else
                                {
                                    <button id="selectStandard" type="submit" class="button sfa-button-secondary" name="TrainingDetails" value="SelectStandard">Standard</button>
                                }
                            </div>
                        </noscript>

                        <div id="training-type-frameworks-panel" class="toggle-content @frameworkClass">
                            <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.FrameworkCodeName)))">
                                <a name="@Html.NameFor(m => m.FrameworkCodeName).ToString().ToLower()"></a>
                                <label for="@Html.NameFor(m => m.FrameworkCodeName)" class="form-label-bold">Apprenticeship framework</label>
                                @Html.DropDownListFor(m => m.FrameworkCodeName, Model.SectorsAndFrameworks, new { @class = "form-control chosen-select form-control-2-3" })
                                @Html.ValidationMessageFor(m => m.FrameworkCodeName)
                                @Html.EditorFor(m => m.FrameworkCodeNameComment, "Comment", Html.GetLabelFor(m => m.FrameworkCodeNameComment))
                                @Html.ValidationMessageFor(m => m.FrameworkCodeNameComment)
                            </div>

                            <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.ApprenticeshipLevel)))">
                                <a name="@Html.NameFor(m => m.ApprenticeshipLevel).ToString().ToLower()"></a>
                                <label class="form-label-bold sfa-small-bottom-margin">Apprenticeship level</label>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label for="apprenticeship-level-intermediate" class="block-label selection-button-radio">
                                    @Html.RadioButtonFor(model => model.ApprenticeshipLevel, ApprenticeshipLevel.Intermediate, new { id = "apprenticeship-level-intermediate", aria_labelledby = "apprenticeship-level-label" }) Intermediate
                                </label>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label for="apprenticeship-level-advanced" class="block-label selection-button-radio">
                                    @Html.RadioButtonFor(model => model.ApprenticeshipLevel, ApprenticeshipLevel.Advanced, new { id = "apprenticeship-level-advanced", aria_labelledby = "apprenticeship-level-label" }) Advanced
                                </label>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label for="apprenticeship-level-higher" class="block-label selection-button-radio">
                                    @Html.RadioButtonFor(model => model.ApprenticeshipLevel, ApprenticeshipLevel.Higher, new { id = "apprenticeship-level-higher", aria_labelledby = "apprenticeship-level-label" }) Higher
                                </label>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label for="apprenticeship-level-degree" class="block-label selection-button-radio">
                                    @Html.RadioButtonFor(model => model.ApprenticeshipLevel, ApprenticeshipLevel.Degree, new { id = "apprenticeship-level-degree", aria_labelledby = "apprenticeship-level-label" }) Degree
                                </label>
                                @Html.ValidationMessageFor(m => m.ApprenticeshipLevel)
                                @Html.EditorFor(m => m.ApprenticeshipLevelComment, "Comment", Html.GetLabelFor(m => m.ApprenticeshipLevelComment))
                                @Html.ValidationMessageFor(m => m.ApprenticeshipLevelComment)
                            </div>
                        </div>

                        <div id="training-type-standards-panel" class="toggle-content @standardClass">
                            <div class="form-group @(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.StandardId)))">
                                <a name="@Html.NameFor(m => m.StandardId).ToString().ToLower()"></a>
                                <label for="@Html.NameFor(m => m.StandardId)" class="form-label-bold">Apprenticeship standard</label>
                                <select class="form-control form-control-2-3" name="@Html.NameFor(m => m.StandardId)" id="@Html.NameFor(m => m.StandardId)" class="form-control form-control-2-3 chosen-select">
                                    <option value="">Choose from the list of standards</option>
                                    @foreach (var standardGroup in Model.Standards.GroupBy(s => s.Sector))
                                    {
                                        <optgroup label="@standardGroup.Key">
                                            @foreach (var standard in standardGroup)
                                            {
                                                <option value="@standard.Id" @(standard.Id == Model.StandardId ? "selected" : "") data-apprenticeship-level="@standard.ApprenticeshipLevel">
                                                    @standard.Name
                                                </option>
                                            }
                                        </optgroup>
                                    }
                                </select>

                                @Html.ValidationMessageFor(m => m.StandardId)
                                @Html.EditorFor(m => m.StandardIdComment, "Comment", Html.GetLabelFor(m => m.StandardIdComment))
                                @Html.ValidationMessageFor(m => m.StandardIdComment)
                            </div>

                            @{
                                var style = Model.StandardId.HasValue ? "" : "display: none";
                            }

                            <div class="form-group hide-nojs" id="apprenticeship-level-container" style="@style">
                                <h3 class="heading-small sfa-no-margins">Apprenticeship level</h3>
                                <p id="apprenticeship-level-name" class="sfa-no-margins">@Html.DisplayFor(m => m.ApprenticeshipLevel)</p>
                            </div>
                        </div>
                                }

            @Html.FormTextAreaFor(m => m.TrainingProvided, controlHtmlAttributes: new { @class = "form-control form-control-3-4 form-textarea-medium ckeditor", type = "text" })
            @Html.EditorFor(m => m.TrainingProvidedComment, "Comment", Html.GetLabelFor(m => m.TrainingProvidedComment))
            @Html.ValidationMessageFor(m => m.TrainingProvidedComment)

            <fieldset>
                <h3 class="heading-small">Contact details</h3>
                <legend class="visually-hidden">Contact details</legend>
                <p class="form-hint">If you would like candidates to be able to contact you about this vacancy, fill in this section</p>

                @Html.FormTextFor(
            m => m.ContactName,
            controlHtmlAttributes: new { type = "text", spellcheck = "false" })

                @Html.FormTextFor(
            m => m.ContactNumber,
            controlHtmlAttributes: new { @class = "form-label-bold", type = "tel", spellcheck = "false" })

                @Html.FormTextFor(
            m => m.ContactEmail,
            controlHtmlAttributes: new { type = "email", spellcheck = "false" })

                @Html.EditorFor(m => m.ContactDetailsComment, "Comment", Html.GetLabelFor(m => m.ContactDetailsComment))
                @Html.ValidationMessageFor(m => m.ContactDetailsComment)
            </fieldset>
        </div>
    </div>
}
