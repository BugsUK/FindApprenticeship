@model SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy.VacancyRequirementsProspectsViewModel
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Web.Raa.Common.Extensions

@{
    ViewBag.Title = "Recruit an Apprentice - Enter vacancy requirements and prospects";
}

<h1 class="heading-xlarge">
    Requirements and prospects
</h1>

@Html.AntiForgeryToken()
@Html.Partial("ValidationSummary", ViewData.ModelState)

@Html.HiddenFor(m => m.VacancyReferenceNumber)
@Html.HiddenFor(m => m.Status)
@Html.HiddenFor(m => m.VacancyType)
@Html.HiddenFor(m => m.ComeFromPreview)
@Html.HiddenFor(m => m.VacancySource)

<section>
    <div class="form-group">
        @Html.FormTextAreaFor(m => m.DesiredSkills, controlHtmlAttributes: new {@class = "ckeditor", type = "text", id = "DesiredSkills"})
        @Html.EditorFor(m => m.DesiredSkillsComment, "Comment", Html.GetLabelFor(m => m.DesiredSkillsComment))
        @Html.ValidationMessageFor(m => m.DesiredSkillsComment)
        @Html.FormTextAreaFor(m => m.PersonalQualities, controlHtmlAttributes: new {@class = "ckeditor", type = "text", id = "PersonalQualities"})
        @Html.EditorFor(m => m.PersonalQualitiesComment, "Comment", Html.GetLabelFor(m => m.PersonalQualitiesComment))
        @Html.ValidationMessageFor(m => m.PersonalQualitiesComment)
        @if (Model.VacancyType == VacancyType.Traineeship)
        {
            @Html.HiddenFor(m => m.DesiredQualifications)
            @Html.HiddenFor(m => m.DesiredQualificationsComment)
        }
        else
        {
            @Html.FormTextAreaFor(m => m.DesiredQualifications, controlHtmlAttributes: new {@class = "ckeditor", type = "text", id = "DesiredQualifications"})
            @Html.EditorFor(m => m.DesiredQualificationsComment, "Comment", Html.GetLabelFor(m => m.DesiredQualificationsComment))
            @Html.ValidationMessageFor(m => m.DesiredQualificationsComment)
        }
        @Html.FormTextAreaFor(m => m.FutureProspects, controlHtmlAttributes: new {@class = "width-all-1-1 form-textarea-medium", type = "text"})
        @Html.EditorFor(m => m.FutureProspectsComment, "Comment", Html.GetLabelFor(m => m.FutureProspectsComment))
        @Html.ValidationMessageFor(m => m.FutureProspectsComment)
        @Html.FormTextAreaFor(m => m.ThingsToConsider, controlHtmlAttributes: new {@class = "width-all-1-1 form-textarea-medium", type = "text"})
        @Html.EditorFor(m => m.ThingsToConsiderComment, "Comment", Html.GetLabelFor(m => m.ThingsToConsiderComment))
        @Html.ValidationMessageFor(m => m.ThingsToConsiderComment)
    </div>
</section>
<script src="https://cdn.ckeditor.com/4.5.10/standard/ckeditor.js"></script>
<script>
    if (typeof CKEDITOR == 'undefined') {
        document.write(unescape("%3Cscript src='/Content/_assets/js/vendor/ckeditor/ckeditor.js' type='text/javascript'%3E%3C/script%3E"));
    }
</script>

    <script src="~/Content/_assets/js/vendor/nanospell/autoload.js"></script>
<script>    
    var isApprenticeship;
    isApprenticeship = "@(Model.VacancyType == VacancyType.Apprenticeship)";

    CKEDITOR.replace('DesiredSkills',
    {
        customConfig: '/Content/_assets/js/vendor/ckeditor/config.js',
        contentsCss: '/Content/_assets/js/vendor/ckeditor/contents.css'
    });

    if (isApprenticeship === "True"){
	    CKEDITOR.replace('DesiredQualifications',
	    {
	        customConfig: '/Content/_assets/js/vendor/ckeditor/config.js',
	        contentsCss: '/Content/_assets/js/vendor/ckeditor/contents.css'
	    });
    }

    CKEDITOR.replace('PersonalQualities',
    {
        customConfig: '/Content/_assets/js/vendor/ckeditor/config.js',
        contentsCss: '/Content/_assets/js/vendor/ckeditor/contents.css'
    });
</script>

<script>
    nanospell.ckeditor('all',
    {
        dictionary: "en_uk", // 24 free international dictionaries
        server: "asp.net" // can be php, asp, asp.net or java
    });
</script>