@model SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy.VacancyRequirementsProspectsViewModel
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Web.Raa.Common.Extensions

@{
    ViewBag.Title = "Recruit an Apprentice - Enter vacancy requirements and prospects";
}

<h1 class="heading-xlarge">
    Requirements and prospects
</h1>

@Html.AntiForgeryToken()
@Html.Partial("ValidationSummary", ViewData.ModelState)

@Html.HiddenFor(m => m.VacancyReferenceNumber)
@Html.HiddenFor(m => m.Status)
@Html.HiddenFor(m => m.VacancyType)
@Html.HiddenFor(m => m.ComeFromPreview)
@Html.HiddenFor(m => m.VacancySource)

<section>
    <div class="form-group">
        @Html.FormTextAreaFor(m => m.DesiredSkills, controlHtmlAttributes: new {@class = "ckeditor", type = "text", id = "DesiredSkills"})
        @Html.EditorFor(m => m.DesiredSkillsComment, "Comment", Html.GetLabelFor(m => m.DesiredSkillsComment))
        @Html.ValidationMessageFor(m => m.DesiredSkillsComment)
        @Html.FormTextAreaFor(m => m.PersonalQualities, controlHtmlAttributes: new {@class = "ckeditor", type = "text", id = "PersonalQualities"})
        @Html.EditorFor(m => m.PersonalQualitiesComment, "Comment", Html.GetLabelFor(m => m.PersonalQualitiesComment))
        @Html.ValidationMessageFor(m => m.PersonalQualitiesComment)
        @if (Model.VacancyType == VacancyType.Traineeship)
        {
            @Html.HiddenFor(m => m.DesiredQualifications)
            @Html.HiddenFor(m => m.DesiredQualificationsComment)
        }
        else
        {
            @Html.FormTextAreaFor(m => m.DesiredQualifications, controlHtmlAttributes: new {@class = "ckeditor", type = "text", id = "DesiredQualifications"})
            @Html.EditorFor(m => m.DesiredQualificationsComment, "Comment", Html.GetLabelFor(m => m.DesiredQualificationsComment))
            @Html.ValidationMessageFor(m => m.DesiredQualificationsComment)
        }
        @Html.FormTextAreaFor(m => m.FutureProspects, controlHtmlAttributes: new {@class = "form-control form-control-3-4", type = "text"})
        @Html.EditorFor(m => m.FutureProspectsComment, "Comment", Html.GetLabelFor(m => m.FutureProspectsComment))
        @Html.ValidationMessageFor(m => m.FutureProspectsComment)
        @Html.FormTextAreaFor(m => m.ThingsToConsider, controlHtmlAttributes: new {@class = "form-control form-control-3-4", type = "text"})
        @Html.EditorFor(m => m.ThingsToConsiderComment, "Comment", Html.GetLabelFor(m => m.ThingsToConsiderComment))
        @Html.ValidationMessageFor(m => m.ThingsToConsiderComment)
        @if(!string.IsNullOrEmpty(Model.OtherInformation))
        {
            @Html.FormTextAreaFor(m => m.OtherInformation, controlHtmlAttributes: new {@class = "form-control form-control-3-4 form-textarea-medium", type = "text"})
            @Html.EditorFor(m => m.OtherInformationComment, "Comment", Html.GetLabelFor(m => m.OtherInformationComment))
            @Html.ValidationMessageFor(m => m.OtherInformationComment)
        }
    </div>
</section>
