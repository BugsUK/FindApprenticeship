@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Infrastructure.Presentation
@using SFA.Apprenticeships.Web.Raa.Common.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy
@using HtmlExtensions = SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions
@model VacancyViewModel

@{
    var editableItemClass = ViewData["editableItemClass"];
    var editableApprenticeshipLevel = string.IsNullOrWhiteSpace(Model.StandardName);
    var editableApprenticeshipLevelClass = (!Model.IsEditable || !editableApprenticeshipLevel) ? "" : "editable-item";
}

<section class="sfa-section-bordered grid-row" id="vacancy-info">
    <h2 class="column-full heading-large">
        @if (Model.VacancyType == VacancyType.Traineeship)
        {
            <span>Traineeship details</span>
        }
        else
        {
            <span>Apprenticeship summary</span>
        }
    </h2>
    <div class="column-one-third">

            @if (Model.VacancyType == VacancyType.Traineeship)
            {
                <div>
                    <h3 class="bold-small">Training provider</h3>
                    <p id="vacancy-provider-name">@Model.ProviderSite.TradingName</p>
                </div>

                <div class="@editableItemClass">
                    <h3 class="bold-small">
                        Traineeship sector
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.SectorCodeName, Model.TrainingDetailsViewModel.SectorCodeNameComment, Model.TrainingDetailsLink))
                    </h3>
                    <p id="traineeship-sector">@Html.DisplayFor(m => m.SectorName)</p>
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.SectorCodeName, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.SectorCodeNameComment))
                </div>
            }

            @Html.Partial("DisplayTemplates/Vacancy/_WorkingWeekAndWage", Model, new ViewDataDictionary { { "editableItemClass", editableItemClass } })

            <div class="@editableItemClass">
                <h3 class="bold-small">
                    @if (Model.VacancyType == VacancyType.Traineeship)
                    {
                        <span>Expected duration</span>
                    }
                    else
                    {
                        <span>Expected apprenticeship duration</span>
                    }
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.FurtherVacancyDetailsViewModel.Duration, ViewData.ModelState, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.DurationComment))
                </h3>
                <p id="vacancy-expected-duration">@Model.FurtherVacancyDetailsViewModel.DurationTypeDisplayText</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.FurtherVacancyDetailsViewModel.Duration, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.DurationComment))
            </div>

            <div class="@editableItemClass">
                <h3 class="bold-small">
                    Possible start date
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDate, ViewData.ModelState, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDateComment))
                </h3>
                <p id="vacancy-start-date">
                    @Html.DisplayFor(m => Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDate.Date)
                </p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDate, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.VacancyDatesViewModel.PossibleStartDateComment))
            </div>

            @if (Model.VacancyType == VacancyType.Apprenticeship)
            {
                <div class="@editableApprenticeshipLevelClass">
                    <h3 class="bold-small">
                        Apprenticeship level
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.ApprenticeshipLevel, Model.TrainingDetailsViewModel.ApprenticeshipLevelComment, Model.TrainingDetailsLink))
                    </h3>
                    <p id="vacancy-type" itemprop="employmentType">
                        @Html.DisplayFor(m => m.TrainingDetailsViewModel.ApprenticeshipLevel) Level Apprenticeship
                    </p>
                    @if (editableApprenticeshipLevel)
                    {
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.ApprenticeshipLevel, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.ApprenticeshipLevelComment))
                    }
                </div>
            }
            <div>
                <h3 class="bold-small">Reference number</h3>
                @if (Model.NewVacancyViewModel.LocationAddresses!=null && Model.NewVacancyViewModel.LocationAddresses.Count > 1)
                {
                    <p>Will be generated on approval</p>
                }
                else
                {
                    <p id="vacancy-reference-id">@Model.VacancyReferenceNumber.GetVacancyReference()</p>
                }
            </div>
            @if (Model.IsSingleLocation || Model.IsNationwideLocation)
            {
                if (!Model.IsManageReviewerView && Model.IsNationwideLocation)
                {
                    <div class="@editableItemClass">
                        <h3 class="bold-small">Positions</h3>
                        <p id="vacancy-reference-id">@Model.NewVacancyViewModel.NumberOfPositions available</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.NumberOfPositions, Model.EmployerLink, Model.NewVacancyViewModel.NumberOfPositionsComment))
                    </div>
                }
            }
            else
            {
                if (Model.NewVacancyViewModel.LocationAddresses != null && Model.NewVacancyViewModel.LocationAddresses.Count == 1)
                {
                    <div class="@editableItemClass">
                        <h3 class="bold-small">Positions</h3>
                        <p id="vacancy-reference-id">@Model.NewVacancyViewModel.LocationAddresses.First().NumberOfPositions available</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.LocationAddresses.First().NumberOfPositions, Model.EmployerLink, Model.NewVacancyViewModel.NumberOfPositionsComment))
                    </div>
                }
            }

            @if (Model.VacancyType == VacancyType.Traineeship)
            {
                <div class="text @editableItemClass">
                    <h3 class="bold-small">
                        Contact details
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.ContactName, Model.TrainingDetailsViewModel.ContactDetailsComment, Model.TrainingDetailsLink))
                    </h3>
                    @if (string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactName) && string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactNumber) && string.IsNullOrEmpty(Model.TrainingDetailsViewModel.ContactEmail))
                    {
                        <span>None specified. This message will not appear on the vacancy when it goes live</span>
                    }
                    else
                    {
                        <p class="sfa-small-bottom-margin">@Model.TrainingDetailsViewModel.ContactName</p>
                        <p class="sfa-small-bottom-margin">@Model.TrainingDetailsViewModel.ContactNumber</p>
                        <p class="sfa-small-bottom-margin">@Model.TrainingDetailsViewModel.ContactEmail</p>
                    }
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.ContactName, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.ContactDetailsComment))
                </div>
            }
    </div>
    <div class="column-two-thirds">
        <div class="text @editableItemClass" itemprop="responsibilities">
            @if (!Model.IsCandidateView)
            {
                <h3 class="bold-small" id="long-description-header">
                    @if (Model.VacancyType == VacancyType.Traineeship)
                    {
                        <span>Work placement</span>
                    }
                    else
                    {
                        <span>Vacancy description</span>
                    }
                    @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.FurtherVacancyDetailsViewModel.LongDescription, Model.FurtherVacancyDetailsViewModel.LongDescriptionComment, Model.SummaryLink))
                </h3>
            }
            <p id="vacancy-full-descrpition" class="@Model.FurtherVacancyDetailsViewModel.LongDescription.GetPreserveFormattingCssClass()">@(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.EscapeHtmlEncoding(Html, Model.FurtherVacancyDetailsViewModel.LongDescription))</p>
            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.FurtherVacancyDetailsViewModel.LongDescription, Model.SummaryLink, Model.FurtherVacancyDetailsViewModel.LongDescriptionComment))
        </div>
        @if (Model.VacancyType == VacancyType.Traineeship)
        {
            <div class="@editableItemClass">
                <h3 class="heading-small">
                    Training to be provided
                    @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.TrainingDetailsViewModel.TrainingProvided, Model.TrainingDetailsViewModel.TrainingProvidedComment, Model.TrainingDetailsLink))
                </h3>
                <p id="vacancy-training-to-be-provided" class="@Model.TrainingDetailsViewModel.TrainingProvided.GetPreserveFormattingCssClass()">@(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.EscapeHtmlEncoding(Html, Model.TrainingDetailsViewModel.TrainingProvided))</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.TrainingDetailsViewModel.TrainingProvided, Model.TrainingDetailsLink, Model.TrainingDetailsViewModel.TrainingProvidedComment))
            </div>
            <div class="@editableItemClass">
                <div>
                    <h3 class="heading-small">
                        Future prospects
                        @Html.Partial(CommentViewModel.PartialIconView, Html.GetCommentViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.FutureProspects, Model.VacancyRequirementsProspectsViewModel.FutureProspectsComment, Model.RequirementsProspectsLink))
                    </h3>
                    <p id="vacancy-future-prospects" itemprop="incentives" class="@Model.VacancyRequirementsProspectsViewModel.FutureProspects.GetPreserveFormattingCssClass()">@(SFA.Apprenticeships.Web.Common.Framework.HtmlExtensions.EscapeHtmlEncoding(Html, Model.VacancyRequirementsProspectsViewModel.FutureProspects))</p>
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.FutureProspects, Model.RequirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.FutureProspectsComment))
                </div>
            </div>
        }
    </div>
</section>