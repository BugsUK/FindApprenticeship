@model VacancyViewModel

@functions{

    private static bool IsSingleLocation(VacancyViewModel viewModel)
    {
        return viewModel.NewVacancyViewModel.IsEmployerLocationMainApprenticeshipLocation == true || (viewModel.NewVacancyViewModel.LocationAddresses != null && viewModel.NewVacancyViewModel.LocationAddresses.Count == 1);
    }

}

@using SFA.Apprenticeships.Domain.Entities.Vacancies.ProviderVacancies
@using SFA.Apprenticeships.Infrastructure.Presentation
@using SFA.Apprenticeships.Infrastructure.Presentation.Constants
@using SFA.Apprenticeships.Web.Raa.Common.Extensions
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy

@{
    var isRecruitSite = Context.Request.RequestContext.RouteData.Values.ContainsValue("VacancyPosting");
    var isEditable = false;
    if (isRecruitSite)
    {
        isEditable = Model.Status.IsStateEditable();
    }
    else
    {
        isEditable = Model.Status.IsStateReviewable();
    }

    var editableItemClass = isEditable ? "editable-item" : "";
    var editableApprenticeshipLevel = string.IsNullOrWhiteSpace(Model.StandardName);
    var editableApprenticeshipLevelClass = (!isEditable || !editableApprenticeshipLevel ) ? "" : "editable-item";
}

<section>
    <div class="grid-wrapper">
        <div class="grid grid-2-3">
            <h1 class="heading-xlarge">
                Vacancy preview
            </h1>
        </div>
        <div class="grid grid-1-3" style="float: right">
            @Html.Partial(ContactDetailsAndVacancyHistoryViewModel.PartialView, Model.ContactDetailsAndVacancyHistory ?? ContactDetailsAndVacancyHistoryViewModel.EmptyContactDetailsAndVacancyHistory)
        </div>
        <div class="grid grid-2-3" style="clear: left">
            <div class="hgroup text @editableItemClass">
                <h1 class="heading-xlarge" id="vacancy-title" itemprop="title">
                    @Model.NewVacancyViewModel.Title
                    @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.Title, Model.NewVacancyViewModel.TitleComment, Model.BasicDetailsLink))
                </h1>
                <p class="subtitle" id="vacancy-subtitle-employer-name" itemprop="hiringOrganization">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Name</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.Title, Model.BasicDetailsLink, Model.NewVacancyViewModel.TitleComment))
            </div>
        </div>
    </div>
</section>

<section>
    <div class="grid-wrapper">
        <div class="grid grid-2-3">
            <div class="inner-block-padr">
                <div class="@editableItemClass">
                    <h3 class="bold-small">
                        Summary
                        @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.ShortDescription, Model.NewVacancyViewModel.ShortDescriptionComment, Model.BasicDetailsLink))
                    </h3>
                    <div class="text" itemprop="description">
                        <p id="vacancy-description" class="preserve-formatting">@Model.NewVacancyViewModel.ShortDescription</p>
                        @Html.Partial(ApplicationsLinkViewModel.PartialView, new ApplicationsLinkViewModel(Model.VacancyReferenceNumber, Model.ApplicationCount))
                    </div>
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.ShortDescription, Model.BasicDetailsLink, Model.NewVacancyViewModel.ShortDescriptionComment))
                </div>
            </div>
        </div>
        <div class="grid grid-1-3">
            <div class="@editableItemClass">
                <h3 class="bold-small">
                    Closing date
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.VacancySummaryViewModel.VacancyDatesViewModel.ClosingDate, ViewData.ModelState, Model.SummaryLink, Model.VacancySummaryViewModel.VacancyDatesViewModel.ClosingDateComment))
                </h3>
                <p id="vacancy-closing-date">@Model.VacancySummaryViewModel.VacancyDatesViewModel.ClosingDate.Date.ToFriendlyClosingToday()</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancySummaryViewModel.VacancyDatesViewModel.ClosingDate, Model.SummaryLink, Model.VacancySummaryViewModel.VacancyDatesViewModel.ClosingDateComment))
            </div>
        </div>
    </div>
</section>
<section class="section-border grid-wrapper" id="vacancy-info">
    <h2 class="heading-large">Apprenticeship summary</h2>
    <div class="grid grid-1-3">
        <div class="inner-block-padr">
            <div class="@editableItemClass">
                <h3 class="bold-small">
                    Working week
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.VacancySummaryViewModel.WorkingWeek, ViewData.ModelState, Model.SummaryLink, Model.VacancySummaryViewModel.WorkingWeekComment))
                </h3>
                <p id="vacancy-working-week" itemprop="workHours" class="preserve-formatting">@Model.VacancySummaryViewModel.WorkingWeek</p>
                <p>Total hours per week: @Model.VacancySummaryViewModel.HoursPerWeek</p>
                @if (Model.VacancySummaryViewModel.HoursPerWeek > 40)
                {
                    <p>(the hours are based on the candidate being over 18)</p>
                }
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancySummaryViewModel.WorkingWeek, Model.SummaryLink, Model.VacancySummaryViewModel.WorkingWeekComment))
            </div>

            <div class="@editableItemClass">
                <h3 class="bold-small">
                    @if (Model.VacancySummaryViewModel.WageType == WageType.Custom)
                    {
                        <span>
                            @Model.VacancySummaryViewModel.WageUnitDisplayText
                            @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.VacancySummaryViewModel.WageType, ViewData.ModelState, Model.SummaryLink, Model.VacancySummaryViewModel.WageComment))
                        </span>
                    }
                    else
                    {
                        <span>
                            Wage
                            @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.VacancySummaryViewModel.WageType, ViewData.ModelState, Model.SummaryLink, Model.VacancySummaryViewModel.WageComment))
                        </span>
                    }
                </h3>
                <p id="vacancy-wage">@Model.VacancySummaryViewModel.WageDisplayText</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancySummaryViewModel.WageType, Model.SummaryLink, Model.VacancySummaryViewModel.WageComment))
            </div>

            @if (Model.VacancySummaryViewModel.WageType == WageType.ApprenticeshipMinimumWage)
            {
                <details>
                    <summary>Wages explained</summary>
                    <div class="detail-content">
                        The current National Minimum Wage (NMW) for apprentices is £@Wages.ApprenticeMinimumWage per hour.<br />
                        This rate applies to apprentices aged 16 to 18 and those aged 19 or over who are in their first year.<br />
                        Apprentices must be paid at least the NMW for their age if they're aged 19 or over and have completed their first year.
                    </div>
                </details>
            }

            @if (Model.VacancySummaryViewModel.WageType == WageType.NationalMinimumWage)
            {
                <details>
                    <summary>Wages explained</summary>
                    <div class="detail-content">
                        The current National Minimum Wage rates are £@Wages.Between18And20NationalMinimumWage for 18 to 20 year-olds and £@Wages.Over21NationalMinimumWage for anyone aged 21 and over.<br />
                        Apprentices are paid for their normal working hours and training that’s part of their apprenticeship (usually one day per week).
                    </div>
                </details>
            }
            <div class="@editableItemClass">
                <h3 class="bold-small">
                    Expected duration
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.VacancySummaryViewModel.Duration, ViewData.ModelState, Model.SummaryLink, Model.VacancySummaryViewModel.DurationComment))
                </h3>
                <p id="vacancy-expected-duration">@Model.VacancySummaryViewModel.DurationTypeDisplayText</p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancySummaryViewModel.Duration, Model.SummaryLink, Model.VacancySummaryViewModel.DurationComment))
            </div>

            <div class="@editableItemClass">
                <h3 class="bold-small">
                    Possible start date
                    @Html.Partial(ValidationResultViewModel.PartialView, Html.GetValidationResultViewModel(Model, m => m.VacancySummaryViewModel.VacancyDatesViewModel.PossibleStartDate, ViewData.ModelState, Model.SummaryLink, Model.VacancySummaryViewModel.VacancyDatesViewModel.PossibleStartDateComment))
                </h3>
                <p id="vacancy-start-date">
                    @Html.DisplayFor(m => Model.VacancySummaryViewModel.VacancyDatesViewModel.PossibleStartDate.Date)
                </p>
                @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancySummaryViewModel.VacancyDatesViewModel.PossibleStartDate, Model.SummaryLink, Model.VacancySummaryViewModel.VacancyDatesViewModel.PossibleStartDateComment))
            </div>

            <div class="@editableApprenticeshipLevelClass">
                <h3 class="bold-small">
                    Apprenticeship level
                    @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.ApprenticeshipLevel, Model.NewVacancyViewModel.ApprenticeshipLevelComment, Model.BasicDetailsLink))
                </h3>
                <p id="vacancy-type" itemprop="employmentType">
                    @Html.DisplayFor(m => m.NewVacancyViewModel.ApprenticeshipLevel) Level Apprenticeship
                </p>
                @if (editableApprenticeshipLevel)
                {
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.ApprenticeshipLevel, Model.BasicDetailsLink, Model.NewVacancyViewModel.ApprenticeshipLevelComment))
                }
            </div>

            <div>
                <h3 class="bold-small">Reference number</h3>
                <p id="vacancy-reference-id">@Model.VacancyReferenceNumber.GetVacancyReference()</p>
            </div>

            @if (IsSingleLocation(Model))
            {
                var positions = Model.NewVacancyViewModel.IsEmployerLocationMainApprenticeshipLocation.Value ? Model.NewVacancyViewModel.NumberOfPositions : Model.NewVacancyViewModel.LocationAddresses.First().NumberOfPositions;

                <div class="@editableItemClass">
                    <h3 class="bold-small">Positions</h3>
                    <p id="vacancy-reference-id">@positions available</p>

                    @if (Model.NewVacancyViewModel.IsEmployerLocationMainApprenticeshipLocation.Value)
                    {
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.NumberOfPositions, Model.EmployerLink, Model.NewVacancyViewModel.NumberOfPositionsComment))
                    }
                    else
                    {
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.LocationAddresses.First().NumberOfPositions, Model.LocationsLink, Model.NewVacancyViewModel.NumberOfPositionsComment))
                    }
                </div>
            }
        </div>
    </div>
    <div class="grid grid-2-3">
        <div class="text @editableItemClass" itemprop="responsibilities">
            <h3 class="bold-small">
                Vacancy description
                @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.VacancySummaryViewModel.LongDescription, Model.VacancySummaryViewModel.LongDescriptionComment, Model.SummaryLink))
            </h3>
            <p id="vacancy-full-descrpition" class="preserve-formatting">@Html.Raw(Model.VacancySummaryViewModel.LongDescription)</p>
            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancySummaryViewModel.LongDescription, Model.SummaryLink, Model.VacancySummaryViewModel.LongDescriptionComment))
        </div>
    </div>
</section>
<section class="section-border" id="course-info">
    <h2 class="heading-large">Requirements and prospects</h2>
    <div class="grid-wrapper">
        <div class="grid grid-1-2">
            <div class="inner-block-padr">
                @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.DesiredSkills))
                {
                    <div class="@editableItemClass">
                        <div class="text">
                            <h3 class="heading-small">Desired skills
                                @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.DesiredSkills, Model.VacancyRequirementsProspectsViewModel.DesiredSkillsComment, Model.RequirementsProspectsLink))
                            </h3>
                            <p id="vacancy-skills-required" itemprop="skills" class="preserve-formatting">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.DesiredSkills)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.DesiredSkills, Model.RequirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.DesiredSkillsComment))
                        </div>
                    </div>
                }
                @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.PersonalQualities))
                {
                    <div class="@editableItemClass">
                        <div class="text">
                            <h3 class="heading-small">Personal qualities
                                @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.PersonalQualities, Model.VacancyRequirementsProspectsViewModel.PersonalQualitiesComment, Model.RequirementsProspectsLink))
                            </h3>
                            <p id="vacancy-qualities-required" itemprop="qualities" class="preserve-formatting">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.PersonalQualities)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.PersonalQualities, Model.RequirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.PersonalQualitiesComment))
                        </div>
                    </div>
                }
                @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.DesiredQualifications))
                {
                    <div class="@editableItemClass">
                        <div class="text">
                            <h3 class="heading-small">Qualifications required
                                @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.DesiredQualifications, Model.VacancyRequirementsProspectsViewModel.DesiredQualificationsComment, Model.RequirementsProspectsLink))
                            </h3>
                            <p id="vacancy-qualifications-required" itemprop="qualifications" class="preserve-formatting">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.DesiredQualifications)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.DesiredQualifications, Model.RequirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.DesiredQualificationsComment))
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="grid grid-1-2">
            @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.FutureProspects))
            {
                <div class="@editableItemClass">
                    <div class="text">
                        <h3 class="heading-small">Future prospects
                            @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.FutureProspects, Model.VacancyRequirementsProspectsViewModel.FutureProspectsComment, Model.RequirementsProspectsLink))
                        </h3>
                        <p id="vacancy-future-prospects" itemprop="incentives" class="preserve-formatting">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.FutureProspects)</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.FutureProspects, Model.RequirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.FutureProspectsComment))
                    </div>
                </div>
            }
            @if (!string.IsNullOrWhiteSpace(Model.VacancyRequirementsProspectsViewModel.ThingsToConsider))
            {
                <div class="@editableItemClass">
                    <div class="text">
                        <h3 class="heading-small">Things to consider
                            @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.ThingsToConsider, Model.VacancyRequirementsProspectsViewModel.ThingsToConsiderComment, Model.RequirementsProspectsLink))
                        </h3>
                        <p id="vacancy-reality-check" itemprop="incentives" class="preserve-formatting">@Html.Raw(Model.VacancyRequirementsProspectsViewModel.ThingsToConsider)</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyRequirementsProspectsViewModel.ThingsToConsider, Model.RequirementsProspectsLink, Model.VacancyRequirementsProspectsViewModel.ThingsToConsiderComment))
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@if (!string.IsNullOrWhiteSpace(Model.VacancyQuestionsViewModel.FirstQuestion) || !string.IsNullOrWhiteSpace(Model.VacancyQuestionsViewModel.SecondQuestion))
{
    <section class="section-border grid-wrapper" id="course-info">
        <h2 class="heading-large">Questions for candidates</h2>
        <div class="grid grid-1-2">
            <div class="inner-block-padr">
                <div class="text">
                    @if (!string.IsNullOrWhiteSpace(Model.VacancyQuestionsViewModel.FirstQuestion))
                    {
                        <div class="@editableItemClass">
                            <h3 class="heading-small">
                                First question
                                @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.VacancyQuestionsViewModel.FirstQuestion, Model.VacancyQuestionsViewModel.FirstQuestionComment, Model.QuestionsLink))
                            </h3>
                            <p class="preserve-formatting">@Html.Raw(Model.VacancyQuestionsViewModel.FirstQuestion)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyQuestionsViewModel.FirstQuestion, Model.QuestionsLink, Model.VacancyQuestionsViewModel.FirstQuestionComment))
                        </div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.VacancyQuestionsViewModel.SecondQuestion))
                    {
                        <div class="@editableItemClass">
                            <h3 class="heading-small">
                                Second question
                                @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.VacancyQuestionsViewModel.SecondQuestion, Model.VacancyQuestionsViewModel.SecondQuestionComment, Model.QuestionsLink))
                            </h3>
                            <p class="preserve-formatting">@Html.Raw(Model.VacancyQuestionsViewModel.SecondQuestion)</p>
                            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.VacancyQuestionsViewModel.SecondQuestion, Model.QuestionsLink, Model.VacancyQuestionsViewModel.SecondQuestionComment))
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
}
<section class="section-border" id="employer-info">
    <h2 class="heading-large">About the employer</h2>
    <div class="grid-wrapper">
        <div class="grid">
            <h3 class="bold-small">Employer</h3>
            <p id="vacancy-employer-name" class="@(string.IsNullOrEmpty(Model.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl) ? "no-btm-margin" : string.Empty)">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Name</p>
        </div>
        <div class="grid grid-2-3">
            <div class="inner-block-padr">
                <div class="@editableItemClass">
                    <h3 class="bold-small">
                        Description
                        @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.ProviderSiteEmployerLink.Description, Model.NewVacancyViewModel.EmployerDescriptionComment, Model.EmployerLink))
                    </h3>
                    <p id="vacancy-employer-description" class="preserve-formatting">@Html.Raw(Model.NewVacancyViewModel.ProviderSiteEmployerLink.Description)</p>
                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.ProviderSiteEmployerLink.Description, Model.EmployerLink, Model.NewVacancyViewModel.EmployerDescriptionComment))
                </div>
            </div>
        </div>
    </div>

    <div class="grid-wrapper">
        @{
            var gridClass = "grid";
            if (IsSingleLocation(Model))
            {
                gridClass += " grid-1-2";
            }
        }
        <div class="@gridClass">
            <div class="inner-block-padr">
                @if (!string.IsNullOrEmpty(Model.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl))
                {
                    <div class="editable-item">
                        <h3 class="bold-small">
                            Website
                            @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl, Model.NewVacancyViewModel.EmployerWebsiteUrlComment, Model.EmployerLink))
                        </h3>
                        <a itemprop="url" href="@Model.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl"
                           id="vacancy-employer-website"
                           target="_blank"
                           title="@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Name Website" rel="external">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl</a>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.ProviderSiteEmployerLink.WebsiteUrl, Model.EmployerLink, Model.NewVacancyViewModel.EmployerWebsiteUrlComment))
                    </div>
                }

                <div>
                    <div class="inner-block-padr">
                        @if (Model.NewVacancyViewModel.IsEmployerLocationMainApprenticeshipLocation == true)
                        {
                            <div id="vacancy-address" itemscope itemtype="http://schema.org/PostalAddress">
                                <h3 class="bold-small">Address</h3>
                                <div itemprop="address">
                                    <p class="small-btm-margin" itemprop="streetAddress">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.AddressLine1</p>
                                    <p class="small-btm-margin" itemprop="streetAddress">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.AddressLine2</p>
                                    <p class="small-btm-margin" itemprop="addressLocality">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.AddressLine3</p>
                                    <p class="small-btm-margin" itemprop="addressRegion">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.AddressLine4</p>
                                    <p class="small-btm-margin" itemprop="postalCode">@Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.Postcode</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            if (Model.NewVacancyViewModel.LocationAddresses != null && Model.NewVacancyViewModel.LocationAddresses.Count() == 1)
                            {
                                <div id="vacancy-address" class="editable-item" itemscope itemtype="http://schema.org/PostalAddress">
                                    <h3 class="bold-small">
                                        Address
                                        @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.LocationAddresses, Model.NewVacancyViewModel.LocationAddressesComment, Model.LocationsLink))
                                    </h3>
                                    <div itemprop="address">
                                        <p class="small-btm-margin" itemprop="streetAddress">@Model.NewVacancyViewModel.LocationAddresses.First().Address.AddressLine1</p>
                                        <p class="small-btm-margin" itemprop="streetAddress">@Model.NewVacancyViewModel.LocationAddresses.First().Address.AddressLine2</p>
                                        <p class="small-btm-margin" itemprop="addressLocality">@Model.NewVacancyViewModel.LocationAddresses.First().Address.AddressLine3</p>
                                        <p class="small-btm-margin" itemprop="addressRegion">@Model.NewVacancyViewModel.LocationAddresses.First().Address.AddressLine4</p>
                                        <p class="small-btm-margin" itemprop="postalCode">@Model.NewVacancyViewModel.LocationAddresses.First().Address.Postcode</p>
                                    </div>

                                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.LocationAddresses, Model.LocationsLink, Model.NewVacancyViewModel.EmployerWebsiteUrlComment))
                                </div>
                            }
                            else
                            {
                                var midIndex = (Model.NewVacancyViewModel.LocationAddresses.Count + 1)/2;
                                <p></p>
                                <div id="vacancy-address" class="editable-item grid-wrapper" itemscope itemtype="http://schema.org/PostalAddress">
                                    <h3 class="bold-small">
                                        Addresses
                                        @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.LocationAddresses, Model.NewVacancyViewModel.LocationAddressesComment, Model.LocationsLink))
                                    </h3>
                                    <div class="grid grid-1-2">
                                        <div class="inner-block-padr">
                                            <table class="locations-table" id="leftLocationAddressesTable">
                                                <colgroup>
                                                    <col class="t50">
                                                    <col class="t35">
                                                </colgroup>

                                                <thead>
                                                <tr>
                                                    <th>
                                                        <span class="heading-span">Location</span>
                                                    </th>
                                                    <th>
                                                        <span class="heading-span">Number of positions</span>
                                                    </th>
                                                </tr>
                                                </thead>
                                                <tbody id="location-addresses" data-bind="foreach: locationAddresses">
                                                @for (var i = 0; i < midIndex; i++)
                                                {
                                                    var locationAddress = Model.NewVacancyViewModel.LocationAddresses[i];
                                                    @Html.DisplayFor(m => locationAddress)
                                                }

                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                    <div class="grid grid-1-2">
                                        <table class="locations-table" id="rightLocationAddressesTable">
                                            <colgroup>
                                                <col class="t50">
                                                <col class="t35">
                                            </colgroup>

                                            <thead>
                                            <tr>
                                                <th>
                                                    <span class="heading-span">Location</span>
                                                </th>
                                                <th>
                                                    <span class="heading-span">Number of positions</span>
                                                </th>
                                            </tr>
                                            </thead>
                                            <tbody id="location-addresses" data-bind="foreach: locationAddresses">
                                            @for (var i = midIndex; i < Model.NewVacancyViewModel.LocationAddresses.Count; i++)
                                            {
                                                var locationAddress = Model.NewVacancyViewModel.LocationAddresses[i];
                                                @Html.DisplayFor(m => locationAddress)
                                            }

                                            </tbody>
                                        </table>
                                    </div>

                                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.LocationAddresses, Model.LocationsLink, Model.NewVacancyViewModel.EmployerWebsiteUrlComment))
                                </div>
                            }
                            if (!string.IsNullOrWhiteSpace(Model.NewVacancyViewModel.AdditionalLocationInformation))
                            {
                                <div class="editable-item">
                                    <h3 class="bold-small">
                                        Additional location information
                                        @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.AdditionalLocationInformation, Model.NewVacancyViewModel.AdditionalLocationInformationComment, Model.LocationsLink))
                                    </h3>
                                    <p class="preserve-formatting">@Html.Raw(Model.NewVacancyViewModel.AdditionalLocationInformation)</p>
                                    @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.AdditionalLocationInformation, Model.LocationsLink, Model.NewVacancyViewModel.EmployerWebsiteUrlComment))
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="grid grid-1-2 hide-print">
            @if (Model.NewVacancyViewModel.IsEmployerLocationMainApprenticeshipLocation == true)
            {
                <div id="vacancy-map" class="ad-details__map">
                    <div class="map-overlay" onclick=" style.pointerEvents = 'none' "></div>
                    <iframe width="700" height="250" title="Map of location" style="border: 0" src="https://www.google.com/maps/embed/v1/place?q=@Html.Raw(Model.NewVacancyViewModel.ProviderSiteEmployerLink.Employer.Address.Postcode),+United+Kingdom&amp;key=AIzaSyCusA_0x4bJEjU-_gLOFiXMSBXKZYtvHz8"></iframe>
                    <p class="nojs-notice">You must have JavaScript enabled to view a map of the location</p>
                </div>
            }
            else if (Model.NewVacancyViewModel.LocationAddresses != null && Model.NewVacancyViewModel.LocationAddresses.Count == 1)
            {
                <div id="vacancy-map" class="ad-details__map">
                    <div class="map-overlay" onclick=" style.pointerEvents = 'none' "></div>
                    <iframe width="700" height="250" title="Map of location" style="border: 0" src="https://www.google.com/maps/embed/v1/place?q=@Html.Raw(Model.NewVacancyViewModel.LocationAddresses.First().Address.Postcode),+United+Kingdom&amp;key=AIzaSyCusA_0x4bJEjU-_gLOFiXMSBXKZYtvHz8"></iframe>
                    <p class="nojs-notice">You must have JavaScript enabled to view a map of the location</p>
                </div>
            }
        </div>
    </div>
</section>

@if (Model.NewVacancyViewModel.OfflineVacancy.Value)
{
    <section class="section-border" id="offline-vacancy" style="">
        <div class="@editableItemClass">
            <h2 class="heading-large">Employer's application instructions
                @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.OfflineApplicationInstructions, Model.NewVacancyViewModel.OfflineApplicationInstructionsComment, Model.BasicDetailsLink))
            </h2>
            <p id="application-instructions" class="preserve-formatting">@Model.NewVacancyViewModel.OfflineApplicationInstructions</p>
            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.OfflineApplicationInstructions, Model.BasicDetailsLink, Model.NewVacancyViewModel.OfflineApplicationInstructionsComment))
        </div>
        <div class="@editableItemClass">
            <p class="no-btm-margin">This apprenticeship requires you to apply through the employer's website.</p>
            <a id="external-employer-website" rel="external" href="@Model.NewVacancyViewModel.OfflineApplicationUrl" target="_blank">@Model.NewVacancyViewModel.OfflineApplicationUrl</a>
            @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.OfflineApplicationUrl, Model.NewVacancyViewModel.OfflineApplicationUrlComment, Model.BasicDetailsLink))
            @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.OfflineApplicationUrl, Model.BasicDetailsLink, Model.NewVacancyViewModel.OfflineApplicationUrlComment))
        </div>
    </section>
}

<section class="section-border grid-wrapper" id="provider-info">
    <h2 class="heading-large">Training provider</h2>
    <div class="grid grid-2-3">
        <div class="inner-block-padr">
            <div class="text">
                @if (!string.IsNullOrWhiteSpace(Model.ProviderSite.CandidateDescription))
                {
                    <p id="vacancy-training-to-be-provided" class="preserve-formatting">@Html.Raw(Model.ProviderSite.CandidateDescription)</p>
                }
                <div class="@editableItemClass">
                    @if (Model.NewVacancyViewModel.TrainingType == TrainingType.Frameworks)
                    {
                        <h3 class="heading-small">
                            Apprenticeship framework
                            @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.FrameworkCodeName, Model.NewVacancyViewModel.FrameworkCodeNameComment, Model.BasicDetailsLink))
                        </h3>
                        <p id="vacancy-framework">@Html.Raw(Model.FrameworkName)</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.FrameworkCodeName, Model.BasicDetailsLink, Model.NewVacancyViewModel.FrameworkCodeNameComment))
                    }
                    @if (Model.NewVacancyViewModel.TrainingType == TrainingType.Standards)
                    {
                        <h3 class="heading-small">
                            Apprenticeship standard
                            @Html.Partial(CommentViewModel.PartialView, Html.GetCommentViewModel(Model, m => m.NewVacancyViewModel.StandardId, Model.NewVacancyViewModel.StandardIdComment, Model.BasicDetailsLink))
                        </h3>
                        <p id="vacancy-standard">@Html.Raw(Model.StandardName)</p>
                        @Html.Partial(EditLinkViewModel.PartialView, Html.GetEditLinkViewModel(Model, m => m.NewVacancyViewModel.StandardId, Model.BasicDetailsLink, Model.NewVacancyViewModel.StandardIdComment))
                    }
                </div>
                <p id="vacancy-provider-sector-pass-rate">The training provider does not yet have a sector success rate for this type of apprenticeship training.</p>
            </div>
        </div>
    </div>
    <div class="grid grid-1-3">
        <div class="text">
            <h3 class="bold-small">Training provider</h3>
            <p id="vacancy-provider-name">@Model.ProviderSite.Name</p>
        </div>

        @if (!string.IsNullOrWhiteSpace(Model.ProviderSite.ContactDetailsForCandidate))
        {
            <div class="text">
                <h3 class="bold-small">Contact</h3>
                <p id="vacancy-provider-contact">@Model.ProviderSite.ContactDetailsForCandidate</p>
            </div>
        }
    </div>
</section>