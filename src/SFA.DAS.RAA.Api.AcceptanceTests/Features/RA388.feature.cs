// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.RAA.Api.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RA388Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RA388.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RA388", "\tIn order to attract more candidates\r\n\tAs a vacancy manager\r\n\tI want to be able t" +
                    "o increase the wage of a vacancy", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "RA388")))
            {
                global::SFA.DAS.RAA.Api.AcceptanceTests.Features.RA388Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details with no identifier")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancy")]
        public virtual void GetVacancyDetailsWithNoIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details with no identifier", new string[] {
                        "RA388",
                        "GetVacancy"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.And("I request the vacancy details for the vacancy with no identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.Then("The response status is: NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.And("I do not see the vacancy details for the vacancy with no identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by id without authorization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyById")]
        public virtual void GetVacancyDetailsByIdWithoutAuthorization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by id without authorization", new string[] {
                        "RA388",
                        "GetVacancyById"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.When("I request the vacancy details for the vacancy with id: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by id with an invalid api key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyById")]
        public virtual void GetVacancyDetailsByIdWithAnInvalidApiKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by id with an invalid api key", new string[] {
                        "RA388",
                        "GetVacancyById"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.When("I authorize my request with an invalid API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.And("I request the vacancy details for the vacancy with id: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by id with an unknown api key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyById")]
        public virtual void GetVacancyDetailsByIdWithAnUnknownApiKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by id with an unknown api key", new string[] {
                        "RA388",
                        "GetVacancyById"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.When("I authorize my request with an unknown API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.And("I request the vacancy details for the vacancy with id: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyById")]
        public virtual void GetVacancyDetailsById()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by id", new string[] {
                        "RA388",
                        "GetVacancyById"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.And("I request the vacancy details for the vacancy with id: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.Then("The response status is: OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.And("I see the vacancy details for the vacancy with id: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by id for different provider")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyById")]
        public virtual void GetVacancyDetailsByIdForDifferentProvider()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by id for different provider", new string[] {
                        "RA388",
                        "GetVacancyById"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.And("I request the vacancy details for the vacancy with id: 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.Then("The response status is: Unauthorized with response message: You are not authorize" +
                    "d to view or edit this vacancy.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.And("I do not see the vacancy details for the vacancy with id: 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy by id that doesn\'t exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyById")]
        public virtual void GetVacancyByIdThatDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy by id that doesn\'t exist", new string[] {
                        "RA388",
                        "GetVacancyById"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.And("I request the vacancy details for the vacancy with id: 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.Then("The response status is: NotFound with response message: The requested vacancy has" +
                    " not been found.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.And("I do not see the vacancy details for the vacancy with id: 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by reference number without authorization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByReferenceNumber")]
        public virtual void GetVacancyDetailsByReferenceNumberWithoutAuthorization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by reference number without authorization", new string[] {
                        "RA388",
                        "GetVacancyByReferenceNumber"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.When("I request the vacancy details for the vacancy with reference number: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by reference number with an invalid api key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByReferenceNumber")]
        public virtual void GetVacancyDetailsByReferenceNumberWithAnInvalidApiKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by reference number with an invalid api key", new string[] {
                        "RA388",
                        "GetVacancyByReferenceNumber"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.When("I authorize my request with an invalid API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.And("I request the vacancy details for the vacancy with reference number: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by reference number with an unknown api key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByReferenceNumber")]
        public virtual void GetVacancyDetailsByReferenceNumberWithAnUnknownApiKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by reference number with an unknown api key", new string[] {
                        "RA388",
                        "GetVacancyByReferenceNumber"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.When("I authorize my request with an unknown API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.And("I request the vacancy details for the vacancy with reference number: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by reference number")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByReferenceNumber")]
        public virtual void GetVacancyDetailsByReferenceNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by reference number", new string[] {
                        "RA388",
                        "GetVacancyByReferenceNumber"});
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.And("I request the vacancy details for the vacancy with reference number: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.Then("The response status is: OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
 testRunner.And("I see the vacancy details for the vacancy with reference number: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by reference number for different provider")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByReferenceNumber")]
        public virtual void GetVacancyDetailsByReferenceNumberForDifferentProvider()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by reference number for different provider", new string[] {
                        "RA388",
                        "GetVacancyByReferenceNumber"});
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.And("I request the vacancy details for the vacancy with reference number: 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 80
 testRunner.And("I do not see the vacancy details for the vacancy with reference number: 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy by reference number that doesn\'t exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByReferenceNumber")]
        public virtual void GetVacancyByReferenceNumberThatDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy by reference number that doesn\'t exist", new string[] {
                        "RA388",
                        "GetVacancyByReferenceNumber"});
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.And("I request the vacancy details for the vacancy with reference number: 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.Then("The response status is: NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.And("I do not see the vacancy details for the vacancy with reference number: 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by guid without authorization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByGuid")]
        public virtual void GetVacancyDetailsByGuidWithoutAuthorization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by guid without authorization", new string[] {
                        "RA388",
                        "GetVacancyByGuid"});
#line 90
this.ScenarioSetup(scenarioInfo);
#line 91
 testRunner.When("I request the vacancy details for the vacancy with guid: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by guid with an invalid api key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByGuid")]
        public virtual void GetVacancyDetailsByGuidWithAnInvalidApiKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by guid with an invalid api key", new string[] {
                        "RA388",
                        "GetVacancyByGuid"});
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
 testRunner.When("I authorize my request with an invalid API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.And("I request the vacancy details for the vacancy with guid: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by guid with an unknown api key")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByGuid")]
        public virtual void GetVacancyDetailsByGuidWithAnUnknownApiKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by guid with an unknown api key", new string[] {
                        "RA388",
                        "GetVacancyByGuid"});
#line 101
this.ScenarioSetup(scenarioInfo);
#line 102
 testRunner.When("I authorize my request with an unknown API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.And("I request the vacancy details for the vacancy with guid: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by guid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByGuid")]
        public virtual void GetVacancyDetailsByGuid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by guid", new string[] {
                        "RA388",
                        "GetVacancyByGuid"});
#line 107
this.ScenarioSetup(scenarioInfo);
#line 108
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
 testRunner.And("I request the vacancy details for the vacancy with guid: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.Then("The response status is: OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
 testRunner.And("I see the vacancy details for the vacancy with guid: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy details by guid for different provider")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByGuid")]
        public virtual void GetVacancyDetailsByGuidForDifferentProvider()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy details by guid for different provider", new string[] {
                        "RA388",
                        "GetVacancyByGuid"});
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.And("I request the vacancy details for the vacancy with guid: 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
 testRunner.And("I do not see the vacancy details for the vacancy with guid: 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get vacancy by guid that doesn\'t exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVacancyByGuid")]
        public virtual void GetVacancyByGuidThatDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vacancy by guid that doesn\'t exist", new string[] {
                        "RA388",
                        "GetVacancyByGuid"});
#line 121
this.ScenarioSetup(scenarioInfo);
#line 122
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.And("I request the vacancy details for the vacancy with guid: 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.Then("The response status is: NotFound", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
 testRunner.And("I do not see the vacancy details for the vacancy with guid: 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Increase fixed wage by £20 per week without authorization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EditWage")]
        public virtual void IncreaseFixedWageBy20PerWeekWithoutAuthorization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Increase fixed wage by £20 per week without authorization", new string[] {
                        "RA388",
                        "EditWage"});
#line 128
this.ScenarioSetup(scenarioInfo);
#line 129
 testRunner.Given("I have a Live Apprenticeship vacancy with id: 42, a fixed wage of £200 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.When("I request to change the wage for the vacancy with id: 42 to Custom £220 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then("The response status is: Unauthorized with response message: Authorization has bee" +
                    "n denied for this request.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 132
 testRunner.And("I do not see the edited vacancy wage details for the vacancy with id: 42", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Increase fixed wage by £20 per week on a traineeship vacancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EditWage")]
        public virtual void IncreaseFixedWageBy20PerWeekOnATraineeshipVacancy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Increase fixed wage by £20 per week on a traineeship vacancy", new string[] {
                        "RA388",
                        "EditWage"});
#line 135
this.ScenarioSetup(scenarioInfo);
#line 136
 testRunner.Given("I have a Live Traineeship vacancy with id: 42, a fixed wage of £200 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 137
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
 testRunner.And("I request to change the wage for the vacancy with id: 42 to Custom £220 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.Then("The response status is: BadRequest with response message: You can only edit the w" +
                    "age of an Apprenticeship vacancy.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 140
 testRunner.And("I do not see the edited vacancy wage details for the vacancy with id: 42", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Increase fixed wage by £20 per week on a submitted vacancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EditWage")]
        public virtual void IncreaseFixedWageBy20PerWeekOnASubmittedVacancy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Increase fixed wage by £20 per week on a submitted vacancy", new string[] {
                        "RA388",
                        "EditWage"});
#line 143
this.ScenarioSetup(scenarioInfo);
#line 144
 testRunner.Given("I have a Submitted Apprenticeship vacancy with id: 42, a fixed wage of £200 Weekl" +
                    "y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 145
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 146
 testRunner.And("I request to change the wage for the vacancy with id: 42 to Custom £220 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.Then("The response status is: BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 148
 testRunner.And("I do not see the edited vacancy wage details for the vacancy with id: 42", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Increase fixed wage by £20 per week on a archived vacancy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EditWage")]
        public virtual void IncreaseFixedWageBy20PerWeekOnAArchivedVacancy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Increase fixed wage by £20 per week on a archived vacancy", new string[] {
                        "RA388",
                        "EditWage"});
#line 151
this.ScenarioSetup(scenarioInfo);
#line 152
 testRunner.Given("I have a Completed Apprenticeship vacancy with id: 42, a fixed wage of £200 Weekl" +
                    "y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 153
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 154
 testRunner.And("I request to change the wage for the vacancy with id: 42 to Custom £220 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.Then("The response status is: BadRequest with response message: You can only edit the w" +
                    "age of a vacancy that is live or closed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.And("I do not see the edited vacancy wage details for the vacancy with id: 42", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Increase fixed wage by £20 per week")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EditWage")]
        public virtual void IncreaseFixedWageBy20PerWeek()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Increase fixed wage by £20 per week", new string[] {
                        "RA388",
                        "EditWage"});
#line 159
this.ScenarioSetup(scenarioInfo);
#line 160
 testRunner.Given("I have a Live Apprenticeship vacancy with id: 42, a fixed wage of £200 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 161
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
 testRunner.And("I request to change the wage for the vacancy with id: 42 to Custom £220 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.Then("The response status is: OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 164
 testRunner.And("I see that the wage details for the vacancy with id: 42 have been updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Change fixed wage to wage range and increase by £20 per week")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EditWage")]
        public virtual void ChangeFixedWageToWageRangeAndIncreaseBy20PerWeek()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change fixed wage to wage range and increase by £20 per week", new string[] {
                        "RA388",
                        "EditWage"});
#line 167
this.ScenarioSetup(scenarioInfo);
#line 168
 testRunner.Given("I have a Live Apprenticeship vacancy with id: 42, a fixed wage of £200 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 169
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 170
 testRunner.And("I request to change the wage for the vacancy with id: 42 to CustomRange £220 - £2" +
                    "40 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.Then("The response status is: OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 172
 testRunner.And("I see that the wage details for the vacancy with id: 42 have been updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Decrease fixed wage by £20 per week")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EditWage")]
        public virtual void DecreaseFixedWageBy20PerWeek()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Decrease fixed wage by £20 per week", new string[] {
                        "RA388",
                        "EditWage"});
#line 175
this.ScenarioSetup(scenarioInfo);
#line 176
 testRunner.Given("I have a Live Apprenticeship vacancy with id: 42, a fixed wage of £200 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.And("I request to change the wage for the vacancy with id: 42 to Custom £180 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.Then("The response status is: BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error"});
            table1.AddRow(new string[] {
                        "Amount",
                        "The new fixed wage must be higher than the original figure."});
#line 180
 testRunner.And("The validation errors contain:", ((string)(null)), table1, "And ");
#line 183
 testRunner.And("I do not see the edited vacancy wage details for the vacancy with id: 42", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Change fixed wage to national minumum wage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA388")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EditWage")]
        public virtual void ChangeFixedWageToNationalMinumumWage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change fixed wage to national minumum wage", new string[] {
                        "RA388",
                        "EditWage"});
#line 186
this.ScenarioSetup(scenarioInfo);
#line 187
 testRunner.Given("I have a Live Apprenticeship vacancy with id: 42, a fixed wage of £200 Weekly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 188
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
 testRunner.And("I request to change the wage for the vacancy with id: 42 to NationalMinimum", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.Then("The response status is: BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error"});
            table2.AddRow(new string[] {
                        "Type",
                        "You can only change the type of a Custom (fixed) wage to CustomRange (wage range)" +
                            "."});
#line 191
 testRunner.And("The validation errors contain:", ((string)(null)), table2, "And ");
#line 194
 testRunner.And("I do not see the edited vacancy wage details for the vacancy with id: 42", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
