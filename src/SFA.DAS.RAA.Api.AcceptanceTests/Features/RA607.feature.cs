// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.RAA.Api.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RA607Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RA607.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RA607", "\tIn order to begin the process of creating a vacancy via the API\r\n\tAs a provider " +
                    "or emloyer\r\n\tI want to be able to link an employer to a provider site and specif" +
                    "y the vacancies location", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "RA607")))
            {
                global::SFA.DAS.RAA.Api.AcceptanceTests.Features.RA607Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Link an employer to a provider site without authorization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA607")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA607")]
        public virtual void LinkAnEmployerToAProviderSiteWithoutAuthorization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link an employer to a provider site without authorization", new string[] {
                        "RA607"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("I request to link employer identified with EDSURN: 123456789 to provider site ide" +
                    "ntified with EDSURN: 987654321 with description: Employer description and websit" +
                    "e: test.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("The response status is: Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And("I do not see the employer link for the employer identified with EDSURN: 123456789" +
                    " and the provider site identified with EDSURN: 987654321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Link an employer to a provider site no description and bad url")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA607")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA607")]
        public virtual void LinkAnEmployerToAProviderSiteNoDescriptionAndBadUrl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link an employer to a provider site no description and bad url", new string[] {
                        "RA607"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.And("I request to link employer identified with EDSURN: 0 to provider site identified " +
                    "with EDSURN: 0 with description: null and website: test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.Then("The response status is: BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error"});
            table1.AddRow(new string[] {
                        "EmployerId",
                        "You must specify either the employer\'s ID or EDSURN."});
            table1.AddRow(new string[] {
                        "EmployerEdsUrn",
                        "You must specify either the employer\'s ID or EDSURN."});
            table1.AddRow(new string[] {
                        "ProviderSiteId",
                        "You must specify either the provider site\'s ID or EDSURN."});
            table1.AddRow(new string[] {
                        "ProviderSiteEdsUrn",
                        "You must specify either the provider site\'s ID or EDSURN."});
            table1.AddRow(new string[] {
                        "EmployerDescription",
                        "Please supply a description for the employer."});
            table1.AddRow(new string[] {
                        "EmployerWebsiteUrl",
                        "Please supply a valid website url for the employer."});
#line 17
 testRunner.And("The validation errors contain:", ((string)(null)), table1, "And ");
#line 25
 testRunner.And("I do not see the employer link for the employer identified with EDSURN: 0 and the" +
                    " provider site identified with EDSURN: 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Link an employer to a provider site")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "RA607")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("RA607")]
        public virtual void LinkAnEmployerToAProviderSite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link an employer to a provider site", new string[] {
                        "RA607"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.When("I authorize my request with a Provider API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.And("I request to link employer identified with EDSURN: 123456789 to provider site ide" +
                    "ntified with EDSURN: 987654321 with description: <p>Employer description</p> and" +
                    " website: test.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.Then("The response status is: OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.And("I see the employer link for the employer identified with EDSURN: 123456789 and th" +
                    "e provider site identified with EDSURN: 987654321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
