@using SFA.Apprenticeships.Application.Interfaces.Vacancies
@using SFA.Apprenticeships.Domain.Entities.Vacancies
@using SFA.Apprenticeships.Domain.Entities.Vacancies.Apprenticeships
@using SFA.Apprenticeships.Web.Candidate.Extensions

@model ApprenticeshipSearchResponseViewModel

@{
    ViewBag.Title = "Results - Find an apprenticeship";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var locationTypeLink = Model.VacancySearch.LocationType == ApprenticeshipLocationType.National 
            ? Url.ApprenticeshipSearchViewModelRouteUrl(CandidateRouteNames.ApprenticeshipResults, new ApprenticeshipSearchViewModel(Model.VacancySearch) {LocationType = ApprenticeshipLocationType.NonNational, SearchAction = SearchAction.LocationTypeChanged, PageNumber = 1}) 
            : Url.ApprenticeshipSearchViewModelRouteUrl(CandidateRouteNames.ApprenticeshipResults, new ApprenticeshipSearchViewModel(Model.VacancySearch) {LocationType = ApprenticeshipLocationType.National, SearchAction = SearchAction.LocationTypeChanged, SortType = VacancySearchSortType.Distance, PageNumber = 1});

    string resultMessage;
    string nationalResultsMessage;

    if (Model.TotalLocalHits == 0)
    {
        resultMessage = "";
    }
    else if (Model.TotalLocalHits == 1)
    {
        if (Model.VacancySearch.LocationType == ApprenticeshipLocationType.National)
        {
            resultMessage = "We've found <b class=\"bold-medium\">1</b> <a id='localLocationTypeLink' href=" + locationTypeLink + ">apprenticeship in your selected area</a>.";
        }
        else
        {
            resultMessage = "We've found <b class=\"bold-medium\">1</b> apprenticeship in your selected area.";
        }
    }
    else
    {
        if (Model.VacancySearch.LocationType == ApprenticeshipLocationType.National)
        {
            var message = "We've found <b class=\"bold-medium\">{0}</b> <a id='localLocationTypeLink' href=" + locationTypeLink + ">apprenticeships in your selected area</a>.";
            resultMessage = string.Format(message, Model.TotalLocalHits);
        }
        else
        {
            resultMessage = string.Format("We've found <b class=\"bold-medium\">{0}</b> apprenticeships in your selected area.", Model.TotalLocalHits);
        }
    }

    if (Model.TotalNationalHits == 0)
    {
        nationalResultsMessage = "";
    }
    else
    {
        var nationalResultsMessagePrefix = Model.TotalLocalHits == 0 ? "We've found" : "We've also found";

        if (Model.TotalNationalHits == 1)
        {

            if (Model.VacancySearch.LocationType == ApprenticeshipLocationType.NonNational)
            {
                nationalResultsMessage = string.Format("{1} <a id='nationwideLocationTypeLink' href={0}>1 apprenticeship nationwide</a>.", locationTypeLink, nationalResultsMessagePrefix);
            }
            else
            {
                nationalResultsMessage = nationalResultsMessagePrefix + " 1 apprenticeship nationwide.";
            }
        }
        else
        {
            if (Model.VacancySearch.LocationType == ApprenticeshipLocationType.NonNational)
            {
                nationalResultsMessage = string.Format("{2} <a id='nationwideLocationTypeLink' href={1}>{0} apprenticeships nationwide</a>.", Model.TotalNationalHits, locationTypeLink, nationalResultsMessagePrefix);
            }
            else
            {
                nationalResultsMessage = string.Format("{1} {0} apprenticeships nationwide.", Model.TotalNationalHits, nationalResultsMessagePrefix);
            }
        }
    }
}

@section metatags
{
    @*Used by analytics to track succesful/unsuccessful searches*@
    <meta name="WT.oss_r" content="@Model.TotalLocalHits" />
}

<div class="search-results-wrapper grid-wrapper">
    <div class="hgroup">
        <h1 class="heading-xlarge">Search results</h1>
        <div id="vacancy-result-summary">
            <p id="result-message" class="small-btm-margin">@Html.Raw(resultMessage)</p>
            <p id="national-results-message">@Html.Raw(nationalResultsMessage)</p>
            @if (!string.IsNullOrEmpty(Model.VacancySearch.Location))
            {
                <p class="small-btm-margin">
                    <a id="receiveSaveSearchAlert" 
                       href="@Url.ApprenticeshipSearchViewModelAction("savesearch", new ApprenticeshipSearchViewModel(Model.VacancySearch))"
                       onclick="Webtrends.multiTrack({ element: this, argsa: ['DCS.dcsuri', '/apprenticeships/receivealerts', 'WT.dl', '99', 'WT.ti', 'Search Results Receive Alerts'] })"><i class="fa fa-bell-o"></i>Receive alerts for this search</a>
                </p>
            }
        </div>
    </div>

    @using (Html.BeginRouteForm(CandidateRouteNames.ApprenticeshipResults, FormMethod.Get))
    {
        Html.Partial("ValidationSummary", ViewData.ModelState);
        Html.RenderPartial("_searchUpdate", Model.VacancySearch);

        <section class="grid grid-2-3">
            @{
                if (Model.TotalLocalHits == 0 && Model.TotalNationalHits == 0)
                {
                    <p id="search-no-results-title">There are currently no apprenticeships that match your search.</p>
                    <p>Try editing your search:</p>
                    <ul id="search-no-results">
                        @if (Model.VacancySearch.SearchMode == ApprenticeshipSearchMode.Keyword)
                        {
                            if (VacancyHelper.IsVacancyReference(Model.VacancySearch.Keywords))
                            {
                                <li id="search-no-results-reference-number">try a different reference number</li>
                            }
                            else
                            {
                                <li id="search-no-results-keywords">using different keywords</li>
                            }
                        }
                        @if (Model.VacancySearch.SearchMode == ApprenticeshipSearchMode.Category)
                        {
                            if (Model.VacancySearch.SubCategories == null || Model.VacancySearch.SubCategories.Length == 0)
                            {
                                <li id="search-no-results-category">try a different category</li>
                            }
                            else
                            {
                                <li id="search-no-results-sub-category">select a different sub-category or sub-categories</li>
                            }
                        }
                        <li>expanding your search location</li>
                        @if (Model.VacancySearch.ApprenticeshipLevel != "All")
                        {
                            <li id="search-no-results-apprenticeship-levels">using a different level, or change to all levels</li>
                        }
                    </ul>
                }
                else
                {
                    <div id="pagedList">
                        @{ Html.RenderPartial("_searchResults", Model); }
                    </div>
                }
            }
        </section>
    }
</div>

@section scripts
{
    @Scripts.Render("~/bundles/nas/locationsearch")
    @Scripts.Render("~/bundles/nas/apprenticeships/results")
    @Scripts.Render("~/bundles/cookie")

    <script type="text/javascript">
        $(function() {
            $("#Location").locationMatch({
                url: '@Url.Action("location", "Location")',
                longitude: '#Longitude',
                latitude: '#Latitude',
                latlonhash: '#Hash'
            });

            $('#sort-results').change(function() {
                $('#SearchAction').val("Sort");
                $("form").submit();
            });

            $('#results-per-page').change(function() {
                $('#SearchAction').val("Sort");
                $("form").submit();
            });

            $('#search-button').click(function() {
                $('#LocationType').val("NonNational");
            });

            initSavedVacancies({
                saveUrl: '@Url.Action("SaveVacancy", "ApprenticeshipApplication")',
                deleteUrl: '@Url.Action("DeleteSavedVacancy", "ApprenticeshipApplication")',
                title: true
            });

            $('#receiveSaveSearchAlert').click(function() {
                var $this = $(this),
                    $href = $this.attr('href');

                //Append current results detail view settings to query string so they are saved.
                $href = $href + '&' + GetSearchResultsDetailsValues();

                $this.attr('href', $href);
            });

            $('#chooseDetails input').each(function() {
                var $this = $(this),
                    $thisId = $this.attr('id');

                var $value = GetSearchResultsDetailsValue($thisId);

                if ($value != null) {
                    var $currentlyChecked = $this.is(':checked');
                    $this.prop("checked", $value);
                    if ($currentlyChecked !== $value) {
                        $('[data-show="' + $thisId + '"]').toggle();
                    }
                }
            });

            //Write the new, complete cookie with the current view of the display settings
            SetSearchResultsDetailsCookieValue();

            $('#chooseDetails input').on('change', function() {
                var $this = $(this),
                    $thisId = $this.attr('id');

                $('[data-show="' + $thisId + '"]').toggle();

                //Write the new, complete cookie with the current view of the display settings
                SetSearchResultsDetailsCookieValue();
            });
        });

        jQuery.extend({
            getQueryParameters: function(str) {
                return (str || document.location.search).replace(/(^\?)/, '').split("&").map(function(n) { return n = n.split("="), this[n[0]] = n[1], this }.bind({}))[0];
            }
        });

        jQuery.extend({
            getCookieValues: function (str) {
                var cookieValues = {};

                var cookie = $.cookie(str);

                if (typeof cookie !== 'undefined' && cookie != null) {
                    var cookieComponents = cookie.split("&");
                    $.each(cookieComponents, function (index, value) {
                        var cookieComponent = value.split('=');
                        cookieValues[cookieComponent[0]] = cookieComponent[1];
                    });
                }

                return cookieValues;
            }
        });

        function gup(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null)
                return null;
            else
                return results[1];
        }

        if (gup('FromSubmitted') == "true") {
            var categoryType = gup('Category').toLowerCase(),
                subCatType = gup('SubCategories'),
                $scrollingPanel = $('#sub-category-'+ categoryType +'-list'),
                $subCatLi = $('#sub-category-' + subCatType).parent();

            $scrollingPanel.scrollTop($subCatLi.position().top);

        }

        function GetSearchResultsDetailsValue(searchResultDetail) {
            //Get URL param first
            var queryParams = $.getQueryParameters();
            var queryValue = queryParams[searchResultDetail];
            if (typeof queryValue !== 'undefined' && queryValue != null) {
                return queryValue.toLowerCase() === 'true';
            }

            //If that fails use cookie value
            var cookieValues = $.getCookieValues('NAS.SearchResultsDetails');
            var cookieValue = cookieValues[searchResultDetail];
            if (typeof cookieValue !== 'undefined' && cookieValue != null) {
                return cookieValue.toLowerCase() === 'true';
            }

            //Otherwise use defaults
            return null;
        }

        function GetSearchResultsDetailsValues() {
            //Assemble query string or cookie compatible value from inputs
            var detailsValue = $('#chooseDetails input').toArray().map(function (value) {
                return $(value).attr('id') + "=" + $(value).is(':checked');
            }).join("&");

            return detailsValue;
        }

        function SetSearchResultsDetailsCookieValue() {
            //Assemble cookie value from inputs
            var cookieValue = GetSearchResultsDetailsValues();

            //Break early if the cookie was empty. This happens if there are no results.
            //Saving and empty cookie would reset the user's settings
            if (!cookieValue)
                return;

            //Need the cookie not to be encoded so it's compatible with MVC
            $.cookie.raw = true;

            //Write the new, complete cookie with the current view of the display settings
            $.cookie('NAS.SearchResultsDetails', cookieValue);
        }
    </script>

    @Scripts.Render("~/bundles/nas/resultsMap")
}