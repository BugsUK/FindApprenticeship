@using SFA.Apprenticeships.Web.Candidate.Extensions
@model ApprenticeshipSearchViewModel

<section class="grid grid-1-3">
    <div>
        <fieldset class="search-filter">

            <legend class="heading-medium mob-collpanel-trigger" id="editSearchToggle">Edit search</legend>
            <div class="mob-collpanel toggle-content--mob" id="editSearchPanel">
                <nav class="tabbed-nav">
                    @{
                        var searchTabControlUrl = Url.ApprenticeshipSearchViewModelAction("results", new ApprenticeshipSearchViewModel(Model) {SearchMode = ApprenticeshipSearchMode.Keyword});
                        var browseTabControlUrl = Url.ApprenticeshipSearchViewModelAction("results", new ApprenticeshipSearchViewModel(Model) {SearchMode = ApprenticeshipSearchMode.Category});
                        var searchTabControlClass = Model.SearchMode == ApprenticeshipSearchMode.Keyword ? " active" : "";
                        var browseTabControlClass = Model.SearchMode == ApprenticeshipSearchMode.Category ? " active" : "";

                        var categoriesElementControlClass = Model.SearchMode == ApprenticeshipSearchMode.Category && Model.Categories != null && Model.Categories.Any() ? " active" : "";
                        var categoriesTabClass = Model.Categories != null && Model.Categories.Any() ? " tab2" : "";
                        var elementControlClass = Model.SearchMode == ApprenticeshipSearchMode.Keyword ? searchTabControlClass : categoriesElementControlClass;                        
                    }
                    <a href="@searchTabControlUrl" id="search-tab-control" class="tabbed-tab @searchTabControlClass" tab="#tab1">Search</a>
                    <a href="@browseTabControlUrl" id="browse-tab-control" class="tabbed-tab @browseTabControlClass" tab="#tab2">Browse</a>
                </nav>
                <div class="tabbed-content active">

                    @Html.Partial("_categoriesAndSubCategories", Model)
                    
                    @Html.Partial("_refineSearch", Model)

                    @Html.FormTextFor(m => m.Keywords, hintText: "", containerHtmlAttributes: new { @class = "tabbed-element tab1" + searchTabControlClass }, labelHtmlAttributes: new { id = "keyword-label" }, hintHtmlAttributes: new { id = "keyword-hint" })

                    @Html.FormTextFor(m => m.Location, hintText: "", containerHtmlAttributes: new { @class = "tabbed-element tab1" + categoriesTabClass + elementControlClass})

                    @if (Model.LocationSearches != null && Model.LocationSearches.Length > 0)
                    {
                        <details open class="open form-group form-group-compound tabbed-element tab1 @categoriesTabClass @elementControlClass" id="locationSuggestions">
                            <summary tabindex="0" aria-describedby="locSuggestionsAria">Did you mean:</summary>
                            <p class="visuallyhidden" aria-live="polite" id="locSuggestionsAria"></p>
                            <div class="detail-content panel-indent">
                                <ul id="location-suggestions" class="list-text list-max-11">
                                    @foreach (var locationSearch in Model.LocationSearches)
                                    {
                                        <li><a href="@Url.Action("results", locationSearch)">@locationSearch.Location</a></li>
                                    }
                                </ul>
                            </div>
                        </details>
                    }
                    <div class="form-group tabbed-element tab1 @categoriesTabClass @elementControlClass">
                        <label for=" loc-within" class="form-label">
                        Within</label>
                        @Html.DropDownListFor(m => m.WithinDistance, Model.Distances, new { @id = "loc-within", @name = "WithinDistance" })
                    </div>
                    <div class="form-group tabbed-element tab1 @categoriesTabClass @elementControlClass">
                        <label for="apprenticeship-level" class="form-label">Apprenticeship level</label>
                        @Html.DropDownListFor(m => m.ApprenticeshipLevel, Model.ApprenticeshipLevels, new { @id = "apprenticeship-level", @name = "ApprenticeshipLevel" })
                    </div>
                    <div class="form-group tabbed-element tab1 @categoriesTabClass @elementControlClass">
                        <button class="button no-btm-margin" id="search-button" name="SearchAction" value="Search">Update results</button>
                    </div>
                    <div class="form-group map-container hide-nojs tabbed-element tab1 @categoriesTabClass @elementControlClass">
                        <div id="map-canvas" style="width: 100%; height: 250px"></div>
                    </div>

                    @Html.HiddenFor(m => m.Latitude)
                    @Html.HiddenFor(m => m.Longitude)
                    @Html.Hidden("Hash", Model.LatLonLocHash())
                    @Html.HiddenFor(m => m.SearchMode)
                    @* This is declared explicitly because we want the value from the model NOT from the URL and the view engine will favour the (potentially incorrect) one from the URL *@
                    <input id="LocationType" name="LocationType" type="hidden" value="@Model.LocationType" />

                </div>
            </div>
        </fieldset>
    </div>
</section>