@using SFA.Apprenticeships.Domain.Entities.Vacancies.Apprenticeships
@model ApprenticeshipSearchViewModel

<section class="grid grid-1-3">
    <div>
        <fieldset class="search-filter">
            <legend class="heading-medium mob-collpanel-trigger" id="editSearchToggle">Edit search</legend>
            <div class="mob-collpanel toggle-content--mob" id="editSearchPanel">
                @if (Model.SearchMode == ApprenticeshipSearchMode.Category)
                {
                    @Html.Partial("_categoriesAndSubCategories", Model);
                }

                @if (Model.SearchMode == ApprenticeshipSearchMode.Keyword)
                {
                    @Html.DropDownListFor(m => m.SearchField, Model.SearchFields, new { @class = "refineSearchOption hidden width-all-3-4 small-btm-margin" })
                    @Html.FormTextFor(m => m.Keywords, hintText: "", labelHtmlAttributes: new { id = "keyword-label" }, hintHtmlAttributes: new { id = "keyword-hint" })
                }

                @Html.FormTextFor(m => m.Location, hintText: "")

                @if (Model.LocationSearches != null && Model.LocationSearches.Length > 0)
                {
                    <details open class="open form-group form-group-compound" id="locationSuggestions">
                        <summary tabindex="0" aria-describedby="locSuggestionsAria">Did you mean:</summary>
                        <p class="visuallyhidden" aria-live="polite" id="locSuggestionsAria"></p>
                        <div class="detail-content panel-indent">
                            <ul id="location-suggestions" class="list-text list-max-11">
                                @foreach (var locationSearch in Model.LocationSearches)
                                {
                                    <li><a href="@Url.Action("results", locationSearch)">@locationSearch.Location</a></li>
                                }
                            </ul>
                        </div>
                    </details>
                }
                <div class="form-group">
                    <label for="loc-within" class="form-label">Within</label>
                    @Html.DropDownListFor(m => m.WithinDistance, Model.Distances, new { @id = "loc-within", @name = "WithinDistance" })
                </div>
                <div class="form-group">
                    <label for="apprenticeship-level" class="form-label">Apprenticeship level</label>
                    @Html.DropDownListFor(m => m.ApprenticeshipLevel, Model.ApprenticeshipLevels, new { @id = "apprenticeship-level", @name = "ApprenticeshipLevel" })
                </div>
                <div class="form-group form-group-compound">
                    <button class="button no-btm-margin" id="search-button" name="SearchAction" value="Search">Update results</button>
                </div>
                <div class="form-group">
                    @Html.RouteLink("Create new search", CandidateRouteNames.ApprenticeshipSearch, new { Model.SearchMode }, new { @id = "create-new-search-link" })
                </div>
                <div class="form-group map-container hide-nojs">
                    <div id="map-canvas" style="width: 100%; height: 250px"></div>
                </div>

                @Html.HiddenFor(m => m.Latitude)
                @Html.HiddenFor(m => m.Longitude)
                @Html.Hidden("Hash", Model.LatLonLocHash())
                @Html.HiddenFor(m => m.SearchMode)
                @* This is declared explicitly because we want the value from the model NOT from the URL and the view engine will favour the (potentially incorrect) one from the URL *@
                <input id="LocationType" name="LocationType" type="hidden" value="@Model.LocationType" />
            </div>
        </fieldset>
    </div>
</section>