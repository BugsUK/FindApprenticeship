@model SFA.Apprenticeships.Web.Candidate.ViewModels.Applications.ApprenticeshipApplicationViewModel

@{
    ViewBag.Title = "Application form - Find an apprenticeship";
    Layout = "~/Views/Shared/_Layout.cshtml";   
}
<div class="progress-indicator progress-indicator-horizontal">
    <ul>
        <li class="active"><span class="hide-tablet">Step </span>1<span class="hide-tablet"> of 3</span>. Application form</li>
        <li><span class="hide-tablet">Step </span>2<span class="hide-tablet"> of 3</span>. Check your application</li>
        <li><span class="hide-tablet">Step </span>3<span class="hide-tablet"> of 3</span>. Submitted</li>
    </ul>
</div>
@if (Model.DateUpdated.HasValue)
{
    <div class="panel-info">
        <p class="autosave" id="applicationSavedTopMessage">Last saved at @Html.DisplayFor(m => m.DateUpdated.Value, "DateTimeSaved") to <a href="@Url.RouteUrl(CandidateRouteNames.MyApplications)" title="My Applications">my applications</a></p>
    </div>
}

@using (Html.BeginForm(null, "ApprenticeshipApplication", new { id = Model.VacancyId }, FormMethod.Post, new { id = "application-form", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    <h1 class="heading-xlarge">Application form</h1>
    <section class="section-border">
        <div class="text">
            <div class="hgroup-medium">
                @Html.HiddenFor(m => m.VacancyDetail.Title)
                <h2 class="heading-medium" id="vacancy-title">@Model.VacancyDetail.Title</h2>
                @Html.HiddenFor(m => m.VacancyDetail.EmployerName)
                <p class="subtitle" id="vacancy-employer">@Model.VacancyDetail.EmployerName</p>
            </div>
            @Html.HiddenFor(m => m.VacancyDetail.Description)
            <p id="vacancy-summary">@Model.VacancyDetail.Description</p>
            <p>
                <a href="@Url.RouteUrl(CandidateRouteNames.ApprenticeshipDetails, new { id = Model.VacancyId })">View apprenticeship</a>
            </p>
        </div>
    </section>


    @Html.Partial("ValidationSummary", ViewData.ModelState)


    @Html.DisplayFor(m => m.Candidate)
    @Html.EditorFor(m => m.Candidate.Education)
    @Html.HiddenFor(m => m.VacancyId)
    @Html.HiddenFor(m => m.IsJavascript, new{ @id="hidden-flag-javascript"})

    Html.RenderPartial("_qualificationsJS", Model);    
    Html.RenderPartial("_qualificationsNonJS", Model);
    
    Html.RenderPartial("_workExperiencesJS", Model);   
    Html.RenderPartial("_workExperiencesNonJS", Model);

    Html.RenderPartial("_trainingHistoryJS", Model);
    Html.RenderPartial("_trainingHistoryNonJS", Model);

    @Html.EditorFor(m => m.Candidate.AboutYou)
    @Html.EditorFor(m => m.Candidate.EmployerQuestionAnswers)
    @Html.EditorFor(m => m.Candidate.MonitoringInformation, "MonitoringInformation/_disability")

    <div class="form-group">
        @*The buttons below need the values so the controller knows what action to perform if restyling*@
        <button id="apply-button" type="submit" name="ApplicationAction:Preview" class="button no-check-for-dirty-form" value="Preview">Save and continue</button>
        <div class="panel-danger toggle-content hide-nojs" id="unsavedChanges">
            <div class="text toggle-content hide-nojs" id="unsavedQuals">
                <p>You've still got <a href="#qualifications-panel">unsaved qualifications</a>. Make sure you click "Save this qualification" after entering each one.</p>
            </div>
            <div class="text toggle-content hide-nojs" id="unsavedWorkExp">
                <p>You've still got <a href="#workexperience-panel">unsaved work experience</a>. Make sure you click "Save this work experience" after entering each one.</p>
            </div>
            <div class="text toggle-content hide-nojs" id="unsavedTrainingHistory">
                <p>You've still got an <a href="#training-history-panel">unsaved training course</a>. Make sure you click "Save this training history" after entering each one.</p>
            </div>
        </div>
        <p id="saveApplication">
            <button id="save-button" type="submit" name="ApplicationAction:Save" class="button-link no-check-for-dirty-form cancel" value="Save" onclick='Webtrends.multiTrack({ element: this, argsa: ["DCS.dcsuri", "/apprenticeship/apply/savedraft/@Model.VacancyId", "WT.dl", "99", "WT.ti", "Apprenticeship – Save Draft Form"] });'>Save</button>
        </p>
        @if (Model.DateUpdated.HasValue)
        {
            <p class="autosave" id="applicationSaved">Last saved at @Html.DisplayFor(m => m.DateUpdated.Value, "DateTimeSaved") to <a href="@Url.RouteUrl(CandidateRouteNames.MyApplications)" title="My Applications">my applications</a></p>
        }
    </div>
    
}

<div class="saving-prompt toggle-content hide-nojs" id="savedNotification">
    Saved
</div>

@section scripts {

    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">

        var qualificationData = null;
        var workExperienceData = null;
        var trainingHistoryData = null;
        var currentYear = null;
        var whitelistregex = null;
        var yearRegex = null;
        var autoSaveTimeout = null;

        $(function() {
            document.getElementById("hidden-flag-javascript").value = "True";

            qualificationData = @Html.Raw(Json.Encode(Model.Candidate.Qualifications));
            workExperienceData = @Html.Raw(Json.Encode(Model.Candidate.WorkExperience));
            trainingHistoryData = @Html.Raw(Json.Encode(Model.Candidate.TrainingHistory));

            currentYear = @Html.Raw(Model.CurrentYear);
            whitelistregex = @Html.Raw(Json.Encode(Model.WhiteListRegex));
            yearRegex = @Html.Raw(Json.Encode(Model.FourDigitYearRegex));

            autoSaveTimeout = @Html.Raw(Json.Encode(Model.AutoSaveTimeInMinutes)) * 60 * 1000;

            $(window).on('load', function() {
                dirtyFormDialog.initialise({
                    formSelector: "form",
                    classToExclude: "no-check-for-dirty-form",
                    timeout: @Model.SessionTimeout * 1000,
                    confirmationMessage: '@Model.ConfirmationMessage'
                });
            });

            var shouldShowQualMessage;

            setTimeout(function() {
                shouldShowQualMessage = false;
            }, @Model.SessionTimeout * 1000);

            $(window).on('beforeunload', function (e){
                if(shouldShowQualMessage == false) {
                    return;
                } else {
                    //https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload

                    if ($('#apply-button').hasClass('dirtyQuals') || $('#apply-button').hasClass('dirtyWorkExp')) {
                        (e || window.event).returnValue = '@Model.ConfirmationMessage'; //Gecko + IE
                        return '@Model.ConfirmationMessage'; //Webkit, Safari, Chrome etc.
                    }
                }
                return;
            });

            setTimeout(function() {
                timeout_trigger();
            }, autoSaveTimeout);
        });



        function timeout_reset() {
            setTimeout(function() {
                timeout_trigger();
            }, autoSaveTimeout);
        }

        function timeout_trigger() {

            if (dirtyFormDialog.isFormDirty("form")) {
                Webtrends.multiTrack({ element: this, argsa: ["DCS.dcsuri", "/apprenticeship/apply/autosavedraft/@Model.VacancyId", "WT.dl", "99", "WT.ti", "Apprenticeship – Auto Save Draft Form"] });
                var request = $.ajax({
                    type: "POST",
                    url: '@Url.Action("AutoSave", "ApprenticeshipApplication", new {id = Model.VacancyId})',
                    data: $("#application-form").serialize()
                });

                request.done(function(result) {

                    if (result.Status == "succeeded") {
                        var savedMessage = 'Last saved at ' + result.DateTimeMessage + ' to ' + '<a href="@Url.RouteUrl(CandidateRouteNames.MyApplications)" title="My Applications">my applications</a>';
                        $("p.autosave").html(savedMessage);

                        $('#savedNotification').show();
                        setTimeout(function() { $("#savedNotification").hide(); }, 5000);

                        dirtyFormDialog.resetDirtyForm({
                            formSelector: "form"
                        });

                        window.resetSessionTimeout();
                    }

                });

                request.fail(function(jqXHR, textStatus) {

                });
            }

            timeout_reset();
        }

        function getCurrentYear() {
            return currentYear;
        }

        function getQualificationData() {
            return qualificationData;
        }

        function getWorkExperienceData() {
            return workExperienceData;
        }

        function getTrainingHistoryData() {
            return trainingHistoryData;
        }

        function getWhiteListRegex() {
            return whitelistregex;
        }

        function getYearRegex() {
            return yearRegex;
        }

        function getMonthLabel(index) {
            var month = "";

            if (index === 0) {

            } else {
                var mths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
                month = mths[index - 1];
            }

            return month;
        }

    </script>
        
    @Scripts.Render("~/bundles/nas/application")
}