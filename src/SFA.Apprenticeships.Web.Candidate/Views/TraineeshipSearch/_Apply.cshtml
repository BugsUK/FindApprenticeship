@using SFA.Apprenticeships.Domain.Entities.Vacancies

@model VacancyDetailViewModel

@{
    var AnalyticsTag = "onclick=\"Webtrends.multiTrack({{ element: this, argsa: ['DCS.dcsuri', '{0}" + Model.Id + "', 'WT.dl', '99', 'WT.ti', '{1}', 'DCSext.buttonPos', '{2}'] }});\"";
}

@if (@Model.ApplyViaEmployerWebsite)
{
    <p class="no-btm-margin">This traineeship requires you to apply through the employer's website.</p>

    if (Model.IsWellFormedVacancyUrl)
    {
        <a id="external-employer-website" rel="external" href="@Model.VacancyUrl" target="_blank" @Html.Raw(string.Format(AnalyticsTag, "/traineeship/apply/offline/", "Traineeship – Apply Offline", ViewData["AnalyticsButtonPosition"]))>Apply now</a>
    }
    else
    {
        <p id="external-employer-raw-vacancy-url">@Model.VacancyUrl</p>
    }
}
else if (Request.IsAuthenticated)
{
    if (Model.DateApplied.HasValue)
    {
        <p id="date-applied" class="no-btm-margin">You applied on @Html.DisplayFor(m => m.DateApplied, "Date").</p>
    }
    else if (Model.VacancyStatus == VacancyStatuses.Live)
    {
        // Vacancy is live and candidate has not applied for this vacancy.
        <a role="button" id="apply-button" class="button button-with-hint" title="Apply for traineeship" href="@Url.RouteUrl(CandidateRouteNames.TraineeshipApply, new { @id = Model.Id })" @Html.Raw(string.Format(AnalyticsTag, "/traineeship/apply/signedin/", "Traineeship – Signed In Apply", ViewData["AnalyticsButtonPosition"]))>Apply for traineeship</a>
    }
    else
    {
        <a id="return-to-my-applications" href="@Url.Action("Index", "Account")">Return to my applications</a>
    }
}
else if (Model.VacancyStatus == VacancyStatuses.Live)
{
    <a role="button" id="apply-button" class="button button-with-hint" title="Sign in to apply" href="@Url.RouteUrl(CandidateRouteNames.TraineeshipApply, new { @id = Model.Id })" @Html.Raw(string.Format(AnalyticsTag, "/traineeship/apply/signin/", "Traineeship – Sign In to Apply", ViewData["AnalyticsButtonPosition"]))>Sign in to apply</a>
}

@switch (Model.VacancyStatus)
{
    case VacancyStatuses.Live:
        <p id="vacancy-closing-date" class="copy-16">Closing date: @Model.ClosingDate.ToFriendlyClosingToday()</p>
        break;
    case VacancyStatuses.Expired:
        <p id="vacancy-closed-on-date"><strong>Closed on:</strong> @Html.DisplayFor(m => m.ClosingDate)</p>
        break;
}
