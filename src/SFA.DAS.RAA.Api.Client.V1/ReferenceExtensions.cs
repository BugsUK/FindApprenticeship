// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Reference.
    /// </summary>
    public static partial class ReferenceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<County> GetCounties(this IReference operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IReference)s).GetCountiesAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<County>> GetCountiesAsync(this IReference operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCountiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='countyId'>
            /// </param>
            /// <param name='countyCode'>
            /// </param>
            public static County GetCounty(this IReference operations, int? countyId = default(int?), string countyCode = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IReference)s).GetCountyAsync(countyId, countyCode), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='countyId'>
            /// </param>
            /// <param name='countyCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<County> GetCountyAsync(this IReference operations, int? countyId = default(int?), string countyCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCountyWithHttpMessagesAsync(countyId, countyCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<LocalAuthority> GetLocalAuthorities(this IReference operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IReference)s).GetLocalAuthoritiesAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<LocalAuthority>> GetLocalAuthoritiesAsync(this IReference operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalAuthoritiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='localAuthorityId'>
            /// </param>
            /// <param name='localAuthorityCode'>
            /// </param>
            public static LocalAuthority GetLocalAuthority(this IReference operations, int? localAuthorityId = default(int?), string localAuthorityCode = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IReference)s).GetLocalAuthorityAsync(localAuthorityId, localAuthorityCode), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='localAuthorityId'>
            /// </param>
            /// <param name='localAuthorityCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<LocalAuthority> GetLocalAuthorityAsync(this IReference operations, int? localAuthorityId = default(int?), string localAuthorityCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalAuthorityWithHttpMessagesAsync(localAuthorityId, localAuthorityCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<Region> GetRegions(this IReference operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IReference)s).GetRegionsAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Region>> GetRegionsAsync(this IReference operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRegionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regionId'>
            /// </param>
            /// <param name='regionCode'>
            /// </param>
            public static Region GetRegion(this IReference operations, int? regionId = default(int?), string regionCode = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IReference)s).GetRegionAsync(regionId, regionCode), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regionId'>
            /// </param>
            /// <param name='regionCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Region> GetRegionAsync(this IReference operations, int? regionId = default(int?), string regionCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRegionWithHttpMessagesAsync(regionId, regionCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
