// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SFA.DAS.RAA.Api.Client.V1
{
    using Models;

    /// <summary>
    /// ##Getting started##
    /// The following Swagger test area will help you understand how to call
    /// the Recruit an Apprentice REST API.
    /// 
    /// All calls follow the standard HTTP protocol and require only an API
    /// key for identification purposes.
    /// 
    /// The API key will be supplied by an administrator and should be passed
    /// as a header parameter in each request.
    /// 
    /// The format is: `Authorization: bearer YOUR_API_KEY`
    /// </summary>
    public partial interface IApiClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        Microsoft.Rest.ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Gets the IReference.
        /// </summary>
        IReference Reference { get; }

            /// <summary>
        /// Endpoint for linking an employer to a provider site.
        /// </summary>
        /// <param name='employerProviderSiteLinkRequest'>
        /// Defines the provider site to link to as well as additional
        /// employer information. Note that you can specify the employer
        /// identifier in either the URL or the POST body
        /// </param>
        /// <param name='edsUrn'>
        /// The employer's secondary identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<EmployerProviderSiteLink>> LinkEmployerWithHttpMessagesAsync(EmployerProviderSiteLinkRequest employerProviderSiteLinkRequest, int edsUrn, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name='vacancyId'>
        /// </param>
        /// <param name='vacancyReferenceNumber'>
        /// </param>
        /// <param name='vacancyGuid'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<Vacancy>> GetVacancyWithHttpMessagesAsync(int? vacancyId = default(int?), int? vacancyReferenceNumber = default(int?), System.Guid? vacancyGuid = default(System.Guid?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for changing the wage of a Live or Closed vacancy. The
        /// wage can only be increased from its current level.
        /// You must supply either the vacancyId, vacancyReferenceNumber or
        /// vacancyGuid as query string parameters to identify the vacancy
        /// you would like to change.
        /// The API key used must be authorized to modify the vacancy
        /// </summary>
        /// <param name='wageUpdate'>
        /// Defines the changes to be made to a vacancies wage
        /// </param>
        /// <param name='vacancyId'>
        /// The vacancies primary identifier
        /// </param>
        /// <param name='vacancyReferenceNumber'>
        /// The vacancies secondary reference number identifier
        /// </param>
        /// <param name='vacancyGuid'>
        /// The vacancies secondary GUID identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<Vacancy>> EditVacancyWageWithHttpMessagesAsync(WageUpdate wageUpdate, int? vacancyId = default(int?), int? vacancyReferenceNumber = default(int?), System.Guid? vacancyGuid = default(System.Guid?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name='filterType'>
        /// Possible values include: 'All', 'Live', 'Submitted', 'Rejected',
        /// 'ClosingSoon', 'Closed', 'Draft', 'NewApplications', 'Withdrawn',
        /// 'Completed', 'SubmittedToday', 'SubmittedYesterday',
        /// 'SubmittedMoreThan48Hours', 'Resubmitted'
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<VacancySummary>>> GetAllWithHttpMessagesAsync(string filterType = default(string), int? page = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}
