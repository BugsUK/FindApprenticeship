@model HomeViewModel

@functions {
    private static bool VacancyIsClonable(VacancyViewModel vacancy)
    {
        return vacancy.Status != VacancyStatuses.RejectedByQA;
    }
}
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Domain.Entities.Vacancies
@using SFA.Apprenticeships.Infrastructure.Presentation
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.ProviderUser
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy
@using SFA.Apprenticeships.Web.Recruit.Constants
@{
    ViewBag.Title = "Recruit an Apprentice";
    var vacanciesLabel = Model.VacanciesSummary.VacanciesSummarySearch.VacancyType == VacancyType.Traineeship ? "opportunities" : "vacancies";
}

@Html.Partial("ValidationSummary", ViewData.ModelState)

@using (Html.BeginForm(null, "ProviderUser", FormMethod.Post, new { name = "provider-site-form" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(m => m.VacanciesSummary.VacanciesSummarySearch.FilterType)

    <div class="grid-wrapper">
        <div class="grid grid-1-2">
            <h1 class="heading-xlarge">
                Recruitment home
                <span class="heading-secondary">@Model.ProviderViewModel.ProviderName</span>
            </h1>
        </div>
        <div class="grid grid-1-2">
            <div class="">
                @if (Model.ProviderSites.Count == 1)
                {
                    <p class="form-label">Provider site</p>
                    Model.ProviderUserViewModel.DefaultProviderSiteErn = Model.ProviderSites[0].Value;
                    @Html.HiddenFor(m => m.ProviderUserViewModel.DefaultProviderSiteErn)
                    <p>@Model.ProviderSites[0].Text</p>
                }
                else
                {
                    <p class="form-label">Change provider site</p>
                    @Html.DropDownListFor(m => m.ProviderUserViewModel.DefaultProviderSiteErn, Model.ProviderSites, new {id = "provider-site", @class = "chosen-select grid grid-1-1"})
                    <noscript>
                        <button class="button" name="ChangeProviderSiteAction" value="ChangeProviderSite">Change provider site</button>
                    </noscript>
                }
            </div>
        </div>
    </div>

    <section>
        <button id="new-vacancy-button" type="submit" name="NewVacancyAction" class="button" value="NewVacancy">Create new vacancy</button>
    </section>
}

@if(Model.VacanciesSummary.HasVacancies)
{
    using (Html.BeginForm(null, "ProviderUser", FormMethod.Post, new { name = "vacancy-search-form" }))
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(m => m.VacanciesSummary.VacanciesSummarySearch.VacancyType)
        @Html.HiddenFor(m => m.VacanciesSummary.VacanciesSummarySearch.FilterType)

        <section class="grid-wrapper">
            @{
                var filterType = Model.VacanciesSummary.VacanciesSummarySearch.FilterType;
                var showAllLotteryNumbers = Model.VacanciesSummary.VacanciesSummarySearch.ShowAllLotteryNumbers;
            }
            <h2 class="heading-medium">Your @vacanciesLabel
                @if (filterType != VacanciesSummaryFilterTypes.All)
                {
                    <span>&nbsp;<a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.All))" class="font-small vacancy-filter">Show all</a></span>
                }
            </h2>
            <ul class="vacancies-summary">
                <li><figure class="data">
                    @if (filterType == VacanciesSummaryFilterTypes.Live)
                    {
                        <p class="count">@Model.VacanciesSummary.LiveCount</p>
                        <figcaption><h2>Live</h2></figcaption>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.Live))" class="vacancy-filter">
                            <p class="count">@Model.VacanciesSummary.LiveCount</p>
                            <figcaption><h2>Live</h2></figcaption>
                        </a>
                    }
                </figure></li>
                <li><figure class="data">
                    @if (filterType == VacanciesSummaryFilterTypes.NewApplications)
                    {
                        <p class="count">@Model.VacanciesSummary.NewApplicationsCount</p>
                        <figcaption><h2>New applications</h2></figcaption>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.NewApplications))" class="vacancy-filter">
                            <p class="count">@Model.VacanciesSummary.NewApplicationsCount</p>
                            <figcaption><h2>New applications</h2></figcaption>
                        </a>
                    }
                </figure></li>
                <li><figure class="data">
                    @if (filterType == VacanciesSummaryFilterTypes.Rejected)
                    {
                        <p class="count">@Model.VacanciesSummary.RejectedCount</p>
                        <figcaption><h2>Referred</h2></figcaption>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.Rejected))" class="vacancy-filter">
                            <p class="count">@Model.VacanciesSummary.RejectedCount</p>
                            <figcaption><h2>Referred</h2></figcaption>
                        </a>
                    }
                </figure></li>
                <li><figure class="data">
                    @if (filterType == VacanciesSummaryFilterTypes.ClosingSoon)
                    {
                        <p class="count">@Model.VacanciesSummary.ClosingSoonCount</p>
                        <figcaption><h2>Closing soon</h2></figcaption>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.ClosingSoon))" class="vacancy-filter">
                            <p class="count">@Model.VacanciesSummary.ClosingSoonCount</p>
                            <figcaption><h2>Closing soon</h2></figcaption>
                        </a>
                    }
                </figure></li>
                <li><figure class="data">
                    <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, !showAllLotteryNumbers))" class="vacancy-filter">
                        <p class="count">&nbsp;</p>
                        <figcaption class="underline">
                            @if (showAllLotteryNumbers)
                            {
                                <h2>Show less...</h2>
                            }
                            else
                            {
                                <h2>Show more...</h2>
                            }
                        </figcaption>
                    </a>
                </figure></li>
@if (showAllLotteryNumbers)
{
    <li><figure class="data">
        @if (filterType == VacanciesSummaryFilterTypes.Draft)
        {
            <p class="count">@Model.VacanciesSummary.DraftCount</p>
            <figcaption>
                <h2>Draft</h2></figcaption>
        }
        else
        {
            <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.Draft))" class="vacancy-filter">
                <p class="count">@Model.VacanciesSummary.DraftCount</p>
                <figcaption>
                    <h2>Draft</h2></figcaption>
            </a>
        }
    </figure></li>
    <li><figure class="data">
        @if (filterType == VacanciesSummaryFilterTypes.Submitted)
        {
            <p class="count">@Model.VacanciesSummary.SubmittedCount</p>
            <figcaption>
                <h2>Submitted</h2></figcaption>
        }
        else
        {
            <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.Submitted))" class="vacancy-filter">
                <p class="count">@Model.VacanciesSummary.SubmittedCount</p>
                <figcaption>
                    <h2>Submitted</h2></figcaption>
            </a>
        }
    </figure></li>
    <li><figure class="data">
        @if (filterType == VacanciesSummaryFilterTypes.Closed)
        {
            <p class="count">@Model.VacanciesSummary.ClosedCount</p>
            <figcaption>
                <h2>Closed</h2></figcaption>
        }
        else
        {
            <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.Closed))" class="vacancy-filter">
                <p class="count">@Model.VacanciesSummary.ClosedCount</p>
                <figcaption>
                    <h2>Closed</h2></figcaption>
            </a>
        }
    </figure></li>
    <li><figure class="data">
        @if (filterType == VacanciesSummaryFilterTypes.Withdrawn)
        {
            <p class="count">@Model.VacanciesSummary.WithdrawnCount</p>
            <figcaption>
                <h2>Withdrawn</h2></figcaption>
        }
        else
        {
            <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.Withdrawn))" class="vacancy-filter">
                <p class="count">@Model.VacanciesSummary.WithdrawnCount</p>
                <figcaption>
                    <h2>Withdrawn</h2></figcaption>
            </a>
        }
    </figure></li>
    <li><figure class="data">
        @if (filterType == VacanciesSummaryFilterTypes.Completed)
        {
            <p class="count">@Model.VacanciesSummary.CompletedCount</p>
            <figcaption>
                <h2>Completed</h2></figcaption>
        }
        else
        {
            <a href="@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacanciesSummaryFilterTypes.Completed))" class="vacancy-filter">
                <p class="count">@Model.VacanciesSummary.CompletedCount</p>
                <figcaption>
                    <h2>Completed</h2></figcaption>
            </a>
        }
    </figure></li>
}
            </ul>
        </section>

        <div class="grid-wrapper">
            <div class="grid grid-1-1">
                <section>
                    @{ var open = string.IsNullOrEmpty(Model.VacanciesSummary.VacanciesSummarySearch.SearchString) ? "" : "open"; }
                    <details class="@open" @open>
                        <summary>Search your @vacanciesLabel</summary>
                        <div class="detail-content">
                            @Html.TextBoxFor(m => m.VacanciesSummary.VacanciesSummarySearch.SearchString)
                            <button id="search-vacancies-button" class="button" name="SearchVacanciesAction" value="SearchVacancies">Search vacancies</button>
                        </div>
                    </details>
                    <nav class="tabbed-nav">
                        @{
                            var apprenticeshipsTabControlClass = Model.VacanciesSummary.VacanciesSummarySearch.VacancyType == VacancyType.Apprenticeship ? " active" : "";
                            var traineeshipsTabControlClass = Model.VacanciesSummary.VacanciesSummarySearch.VacancyType == VacancyType.Traineeship ? " active" : "";
                        }
                        @Html.RouteLink("Apprenticeships", RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacancyType.Apprenticeship), new {@class = "tabbed-tab no-js" + apprenticeshipsTabControlClass })
                        @Html.RouteLink("Traineeships", RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, VacancyType.Traineeship), new {@class = "tabbed-tab no-js" + traineeshipsTabControlClass })
                    </nav>
                    <div class="tabbed-content active width-all-1-1">
                        <table id="vacancies-table">
                            <colgroup>
                                <col class="t25">
                                <col class="t15">
                                <col class="t15">
                                <col class="t15">
                                <col class="t15">
                                <col class="t15">
                            </colgroup>
                            <thead>
                            <tr>
                                <th>Vacancy title</th>
                                <th>Employer</th>
                            	<th>Location</th>
                                <th>Applications / click-throughs</th>
                                <th>Vacancy status</th>
                                <th></th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var vacancy in Model.VacanciesSummary.Vacancies.Page)
                            {
                                var isOfflineVacancy = vacancy.NewVacancyViewModel.OfflineVacancy == true;
                                <tr>
                                    <td data-label="Vacancy title">
                                        <div class="vac-title">
                                            @{
                                                var title = string.IsNullOrEmpty(vacancy.NewVacancyViewModel.Title) ? "(No Title)" : vacancy.NewVacancyViewModel.Title;
                                                var routeName = RecruitmentRouteNames.PreviewVacancy;
                                                if (vacancy.Status == VacancyStatuses.Unknown || vacancy.Status == VacancyStatuses.Draft)
                                                {
                                                    routeName = RecruitmentRouteNames.ReviewCreateVacancy;
                                                }
                                                if (vacancy.Status.CanHaveApplicationsOrClickThroughs() && vacancy.ApplicationCount > 0)
                                                {
                                                    routeName = RecruitmentRouteNames.VacancyApplications;
                                                }
                                            }
                                            <a href="@Url.RouteUrl(routeName, new {vacancyReferenceNumber = vacancy.VacancyReferenceNumber})" class="disp-block">
                                                @title
                                                @if (isOfflineVacancy)
                                                {
                                                    <span class="subtitle"><br />(Applications managed externally)</span>
                                                }
                                            </a>
                                        </div>
                                    </td>
                                    <td class="vac-employer" data-label="Employer">
                                        @vacancy.NewVacancyViewModel.VacancyParty.Employer.Name
                                    </td>
                                    <td class="vac-ref-number" data-label="Vacancy ref">
                                    @if (vacancy.IsApprovedMultiLocationChildVacancy)
                                    {
                                        @vacancy.NewVacancyViewModel.LocationAddresses.First().Address.AddressLine4<br/>
                                        @vacancy.NewVacancyViewModel.LocationAddresses.First().Address.AddressLine1Ellipsis
                                    }
                                    else
                                    {
                                        @vacancy.NewVacancyViewModel.VacancyParty.Employer.Address.AddressLine4
                                    }
                                    </td>
                                    <td class="vac-no-of-applications" data-label="Number of applications">
                                        @if (vacancy.Status.CanHaveApplicationsOrClickThroughs())
                                        {
                                            var count = isOfflineVacancy ? vacancy.OfflineApplicationClickThroughCount : vacancy.ApplicationCount;
                                            var unit = isOfflineVacancy ? "click-through" : "application";
                                            var units = unit + "s";

                                            if (vacancy.Status == VacancyStatuses.Live && count == 0 && vacancy.VacancySummaryViewModel.VacancyDatesViewModel.ClosingDate.Date.CloseToClosingDate())
                                            {
                                                <span style="color: red; font-weight: bold">0<br/> @units</span>
                                            }
                                            else if (@vacancy.ApplicationCount == 1)
                                            {
                                                <span>1<br/> @unit</span>
                                            }
                                            else
                                            {
                                                <span>@count<br/> @units</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </td>
                                    <td class="vac-status">
                                        @{ Html.RenderPartial("_vacancyStatus", @vacancy.Status); }
                                        @if (vacancy.Status == VacancyStatuses.Live)
                                        {
                                            Html.RenderPartial("_closingDate", @vacancy.VacancySummaryViewModel.VacancyDatesViewModel.ClosingDate);
                                        }
                                    </td>
                                    <td class="vac-toolbox">
                                        @if (VacancyIsClonable(vacancy))
                                        {
                                    	    <a href="@Url.RouteUrl(RecruitmentRouteNames.CloneVacancy, new {vacancyReferenceNumber = vacancy.VacancyReferenceNumber})">Clone</a>
                                        }
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </section>
            </div>

            <div class="page-navigation">

                @{
                    var currentPage = Model.VacanciesSummary.Vacancies.CurrentPage;
                    var totalNumberOfPages = Model.VacanciesSummary.Vacancies.TotalNumberOfPages;
                    var prevLink = Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, currentPage - 1));
                    var nextLink = Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome, new VacanciesSummarySearchViewModel(Model.VacanciesSummary.VacanciesSummarySearch, currentPage + 1));
                }
            
                <a href="@prevLink"
                   style="visibility: @(currentPage == 1 ? "hidden" : "visible"); width: 33.333333333%"
                   class="page-navigation__btn previous grid grid-1-3">
                    <i class="arrow-button fa fa-angle-left"></i>
                    <span class="description">Previous <span class="hide-mob">page</span></span>
                    <span class="counter">@(currentPage - 1) of @totalNumberOfPages</span>
                </a>

                <div id="page-size-container" class="grid grid-1-3 page-navigation__btn" style="width: 33.333333333%; text-align: center">
                    <label for="page-size" class="heading-small inline">Display results</label>
                    @Html.DropDownListFor(m => m.VacanciesSummary.VacanciesSummarySearch.PageSize, Model.VacanciesSummary.VacanciesSummarySearch.PageSizes, new { id = "page-size" })
                    <noscript>
                        <button class="button" name="SearchVacanciesAction" value="SearchVacancies">View</button>
                    </noscript>
                </div>

                <a href="@nextLink"
                   style="visibility: @(currentPage == totalNumberOfPages ? "hidden" : "visible"); width: 33.333333333%"
                   class="page-navigation__btn next grid grid-1-3">
                    <i class="arrow-button fa fa-angle-right"></i>
                    <span class="description">Next <span class="hide-mob">page</span></span>
                    <span class="counter">@(currentPage + 1) of @totalNumberOfPages</span>
                </a>

            </div>

        </div>
    }
}

<div class="saving-prompt toggle-content hide-nojs" id="ajaxLoading">
    Loading
</div>

@section scripts
{
    @Scripts.Render("~/bundles/dashboard")
    <script>
        var searchUrl = '@Url.RouteUrl(RecruitmentRouteNames.RecruitmentHome)';
    </script>
}