@model LocationSearchViewModel
@using System.Web.Mvc.Html
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.VacancyPosting
@using SFA.Apprenticeships.Web.Recruit.Constants

@using (Html.BeginRouteForm(RecruitmentRouteNames.AddLocations, FormMethod.Post, new { @id = "add-locations-form" }))
{
    @Html.HiddenFor(m => m.LocationAddressesComment)
    @Html.HiddenFor(m => m.AdditionalLocationInformationComment)
    @Html.HiddenFor(m => m.AutoSaveTimeoutInSeconds)


    @Html.DisplayFor(m => m, LocationSearchViewModel.PartialView)

        <div class="grid-row">
            <div class="column-two-thirds sfa-xlarge-top-margin">
        @{        
            var saveButtonText = (Model.Status == VacancyStatus.Referred || Model.ComeFromPreview) ? "Save and return to Preview" : "Save and continue";
        }
        <button type="submit" class="button no-autosave" name="AddLocations" value="Locations">@saveButtonText</button>
        @Html.RouteLink("Return to previous page", RecruitmentRouteNames.ConfirmEmployer, new { providerSiteId = Model.ProviderSiteId, edsUrn = Model.EmployerEdsUrn, vacancyGuid = Model.VacancyGuid, comeFromPreview = Model.ComeFromPreview, useEmployerLocation = true }, new { @class = "no-autosave button sfa-button-secondary" })
        </div>
        </div>
}

@section scripts {
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">
        ko.observable.fn.appendError = function (error) {
            var thisError = this.error();
            if (thisError) {
                this.setError(thisError += '. ' + error);
            }
            else {
                this.setError(error);
            };
        };

        var addressesData = null;

        addressesData = @Html.Raw(Json.Encode(Model.Addresses));

        if (!addressesData) addressesData = [];

        function getLocationAddressesData() {
            return addressesData;
        }

        var modelState = null;
        modelState = @Html.Raw(Json.Encode(ViewData.ModelState.Where(k => k.Value.Errors.Any()).Select(t => new { Key = t.Key, Value = t.Value.Errors.Select(e => e.ErrorMessage) })));

        function getModelState() {
            return modelState;
        }
    </script>

    @Scripts.Render("~/bundles/location")

    @Scripts.Render("~/bundles/autosave")
}
