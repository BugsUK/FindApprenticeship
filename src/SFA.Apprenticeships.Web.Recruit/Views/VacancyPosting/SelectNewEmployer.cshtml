@using SFA.Apprenticeships.Web.Recruit.Constants
@using SFA.Apprenticeships.Web.Recruit.ViewModels.VacancyPosting

@model EmployerSearchViewModel

@{
    ViewBag.Title = "Recruit an Apprentice - Create New Vacancy - Link to a new employer";
    Layout = "~/Views/Shared/_Layout.cshtml";

    const string selected = "selected";

    var ernSearchSelected = Model.FilterType == EmployerFilterType.Ern ? selected : null;
    var nameAndLocationSearchSelected = Model.FilterType == EmployerFilterType.NameAndLocation ? selected : null;
}

<div class="grid-wrapper">
    <div class="hgroup">
        <h1 class="heading-xlarge">
            Link to a new employer
        </h1>
    </div>

    @Html.Partial("ValidationSummary", ViewData.ModelState)

    <div class="blocklabel-single-container">
        <div class="form-group inline clearfix blocklabel-single hide-nojs">
            @* ReSharper disable once Html.IdNotResolved *@
            <label data-target="name-location-search-panel" for="name-location-search" class="block-label @nameAndLocationSearchSelected">
                @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.NameAndLocation, new {id = "name-location-search", aria_controls = "name-location-search-panel"})
                Name and location
            </label>
            @* ReSharper disable once Html.IdNotResolved *@
            <label data-target="ern-search-panel" for="ern-search" class="block-label @ernSearchSelected">
                @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.Ern, new {id = "ern-search", aria_controls = "ern-search-panel"})
                ERN
            </label>
        </div>

        @using (Html.BeginRouteForm(RecruitmentRouteNames.SelectNewEmployer, FormMethod.Post, new {@id = "#ern-search-form"}))
        {
            @Html.AntiForgeryToken()

            @Html.HiddenFor(m => m.ProviderSiteErn)

            <div id="ern-search-panel" class="toggle-content blocklabel-content">
                @Html.FormTextFor(model => model.Ern)

                <button id="ern-search-button" type="submit" name="SelectNewEmployerByReferenceNumber" value="SelectNewEmployerByReferenceNumber" class="button">
                    Find employer
                </button>
            </div>
        }

        @using (Html.BeginRouteForm(RecruitmentRouteNames.SelectNewEmployer, FormMethod.Post, new {@id = "#name-location-search-form"}))
        {
            @Html.AntiForgeryToken()

            @Html.HiddenFor(m => m.ProviderSiteErn)

            <div id="name-location-search-panel" class="toggle-content blocklabel-content">
                @Html.FormTextFor(model => model.Name)
                @Html.FormTextFor(model => model.Location)

                <button id="name-location-search-button" type="submit" name="SelectNewEmployerByNameAndLocation" value="SelectNewEmployerByNameAndLocation" class="button">
                    Search
                </button>
            </div>
        }
    </div>

    @if (Model.ResultsCount > 0)
    {
        <section class="clearfix" id="providerSiteResults">
            @{
                var resultsMessage = Model.ResultsCount > 1 ? string.Format("Found {0} Employers", Model.ResultsCount) : "Found one employer";
            }
            <h2 class="heading-small">@resultsMessage</h2>
            <div class="grid grid-3-3 scrolling-panel max-height-15">
                <table>
                    <colgroup>
                        <col class="t30">
                        <col class="t40">
                        <col class="t15">
                        <col class="t15">
                        <col>
                    </colgroup>
                    <tbody>
                    <tr>
                        <th>Name</th>
                        <th>Address</th>
                        <th>ERN</th>
                        <th></th>
                    </tr>
                    @foreach (var employerResultsViewModel in @Model.EmployerResults)
                    {
                        <tr>
                            <th>
                                <h4 class="bold-small">@employerResultsViewModel.EmployerName</h4>
                            </th>
                            <td>
                                @employerResultsViewModel.Address.AddressLine1
                                <br/>@employerResultsViewModel.Address.AddressLine2
                                <br/>@employerResultsViewModel.Address.Postcode
                            </td>
                            <td>@employerResultsViewModel.Ern</td>
                            <td>
                                <a href="@Url.RouteUrl(RecruitmentRouteNames.ComfirmNewEmployer, new {providerSiteErn = Model.ProviderSiteErn, ern = employerResultsViewModel.Ern})">Select employer</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>

            <a href="@Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new {providerSiteErn = Model.ProviderSiteErn})">Link to a new employer</a>
        </section>

        <div class="page-navigation">
            <a href="#"
                style="visibility: @(Model.CurrentPage == 1 ? "hidden" : "visible")"
                class="page-navigation__btn previous">
                <i class="arrow-button fa fa-angle-left"></i>
                <span class="description">Previous <span class="hide-mob">page</span></span>
                <span class="counter">@(Model.CurrentPage + 1) of @Model.TotalNumberOfPages</span>
            </a>
            <a href="#"
                style="visibility: @(Model.CurrentPage == Model.TotalNumberOfPages ? "hidden" : "visible")"
                class="page-navigation__btn next">
                <i class="arrow-button fa fa-angle-right"></i>
                <span class="description">Next <span class="hide-mob">page</span></span>
                <span class="counter">@(Model.CurrentPage + 1) of @Model.TotalNumberOfPages</span>
            </a>
        </div>
    }
</div>
