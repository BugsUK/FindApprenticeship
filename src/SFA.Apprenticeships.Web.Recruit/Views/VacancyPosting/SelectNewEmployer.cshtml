@using SFA.Apprenticeships.Web.Recruit.Constants
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.VacancyPosting

@model EmployerSearchViewModel

@{
    ViewBag.Title = "Recruit an Apprentice - Create New Vacancy - Link to a new employer";
    Layout = "~/Views/Shared/_Layout.cshtml";

    const string selected = "selected";
    var vacancyGuidValue = Model.VacancyGuid ?? Guid.NewGuid();
    var ernSearchSelected = Model.FilterType == EmployerFilterType.EdsUrn ? selected : null;
    var nameAndLocationSearchSelected = Model.FilterType == EmployerFilterType.NameAndLocation ? selected : null;
    var noResults = (Model.EmployerResults == null || !Model.EmployerResults.Any()) && (Model.EmployerResultsPage == null || Model.EmployerResultsPage.ResultsCount == 0);
    var searchPerformed = !string.IsNullOrWhiteSpace(ernSearchSelected) || !string.IsNullOrWhiteSpace(nameAndLocationSearchSelected);
}

<div class="grid-wrapper">
    <div class="hgroup">
        <h1 class="heading-xlarge">
            Link to a new employer
        </h1>
    </div>

    @Html.Partial("ValidationSummary", ViewData.ModelState)

    @if (searchPerformed && noResults)
    {
        <div class="no-employers-found">
            <p>No employers matched your search:</p>
            <ul>
                @if (!string.IsNullOrWhiteSpace(ernSearchSelected))
                {
                    <li>check the ERN is correct</li>
                    <li>try searching by employer name or location</li>
                }
                @if (!string.IsNullOrWhiteSpace(nameAndLocationSearchSelected))
                {
                    <li>check the employer name or location are correct</li>
                    <li>try searching by ERN</li>
                }
            </ul>
            <p class="no-employers-optional-action">If you can't find the employer you wish to link to, login to <a href="https://edrs.lsc.gov.uk/security/login.aspx" target="_blank">EDS</a> to request an ERN</p>
        </div>
    }

    <div class="blocklabel-single-container">
        <p>Search for an employer</p>
        @if (!searchPerformed)
        {
            <div class="panel-indent grid grid-2-3">
                If you can't find the employer you want to link to, login to <a href="https://edrs.lsc.gov.uk/security/login.aspx" target="_blank">EDS</a> to request an ERN.
            </div>
        }

        <div class="form-group inline clearfix blocklabel-single hide-nojs">
            @* ReSharper disable once Html.IdNotResolved *@
            <label data-target="name-location-search-panel" for="name-location-search" class="block-label @nameAndLocationSearchSelected">
                @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.NameAndLocation, new { id = "name-location-search", aria_controls = "name-location-search-panel" })
                Name and location
            </label>
            @* ReSharper disable once Html.IdNotResolved *@
            <label data-target="edsUrn-search-panel" for="edsUrn-search" class="block-label @ernSearchSelected">
                @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.EdsUrn, new { id = "edsUrn-search", aria_controls = "edsUrn-search-panel" })
                ERN
            </label>
        </div>

        @using (Html.BeginForm(null, null, null, FormMethod.Get, new { @action = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer) + "#providerSiteResults", @id = "edsUrn-search-form" }))
        {
            @Html.HiddenFor(m => m.ProviderSiteId)
            @Html.HiddenFor(m => m.VacancyGuid)
            @Html.Hidden("FilterType", EmployerFilterType.EdsUrn)
            @Html.HiddenFor(m => m.ComeFromPreview)

            <div id="edsUrn-search-panel" class="toggle-content blocklabel-content">
                @Html.FormTextFor(model => model.EdsUrn)

                <button id="edsUrn-search-button" type="submit" class="button">
                    Find employer
                </button>
                <a href="@Url.RouteUrl(RecruitmentRouteNames.SelectExistingEmployer, new {providerSiteId = Model.ProviderSiteId, comeFromPreview = Model.ComeFromPreview})">Return to your linked employers</a>
            </div>
        }

        @using (Html.BeginForm(null, null, null, FormMethod.Get, new { @action = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer) + "#providerSiteResults", @id = "name-location-search-form" }))
        {
            @Html.HiddenFor(m => m.ProviderSiteId)
            @Html.HiddenFor(m => m.VacancyGuid)
            @Html.Hidden("FilterType", EmployerFilterType.NameAndLocation)
            @Html.HiddenFor(m => m.ComeFromPreview)

            <div id="name-location-search-panel" class="toggle-content blocklabel-content">
                @Html.FormTextFor(model => model.Name)
                @Html.FormTextFor(model => model.Location, hintText: "Enter town or postcode")

                <button id="name-location-search-button" type="submit" class="button">
                    Search
                </button>
                <a href="@Url.RouteUrl(RecruitmentRouteNames.SelectExistingEmployer, new {providerSiteId = Model.ProviderSiteId, vacancyGuid = vacancyGuidValue})">Return to your linked employers</a>
            </div>
        }
    </div>

    @if (Model.EmployerResultsPage.ResultsCount > 0)
    {
        <section class="clearfix" id="providerSiteResults">
            @{
                var resultsMessage = Model.EmployerResultsPage.ResultsCount > 1 ? string.Format("Found {0} Employers", Model.EmployerResultsPage.ResultsCount) : "Found one employer";
            }
            <h2 class="heading-small">@resultsMessage</h2>
            <div class="grid grid-3-3">
                <table>
                    <colgroup>
                        <col class="t30">
                        <col class="t40">
                        <col class="t15">
                        <col class="t15">
                        <col>
                    </colgroup>
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Address</th>
                            <th>ERN</th>
                            <th></th>
                        </tr>
                        @foreach (var employerResultsViewModel in @Model.EmployerResultsPage.Page)
                        {
                            <tr>
                                <th>
                                    <h4 class="bold-small">@employerResultsViewModel.EmployerName</h4>
                                </th>
                                <td>
                                    @employerResultsViewModel.Address.AddressLine1
                                    @if (!string.IsNullOrWhiteSpace(@employerResultsViewModel.Address.AddressLine2))
                                    {
                                        <br />@employerResultsViewModel.Address.AddressLine2
                                    }
                                    <br />@employerResultsViewModel.Address.AddressLine4 @employerResultsViewModel.Address.Postcode
                                </td>
                                <td>@employerResultsViewModel.EdsUrn</td>
                                <td>
                                    <a href="@Url.RouteUrl(RecruitmentRouteNames.ConfirmNewEmployerSelection, new {providerSiteId = Model.ProviderSiteId, edsUrn = employerResultsViewModel.EdsUrn, vacancyGuid = vacancyGuidValue, comeFromPreview = Model.ComeFromPreview})">Select employer</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </section>
        <div class="page-navigation">

            @{
                var prevLink = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&EmployerResultsPage.CurrentPage=" + (Model.EmployerResultsPage.CurrentPage - 1);
                var nextLink = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&EmployerResultsPage.CurrentPage=" + (Model.EmployerResultsPage.CurrentPage + 1);
            }

            <a href="@prevLink"
               style="visibility: @(Model.EmployerResultsPage.CurrentPage == 1 ? "hidden" : "visible")"
               class="page-navigation__btn previous">
                <i class="arrow-button fa fa-angle-left"></i>
                <span class="description">Previous <span class="hide-mob">page</span></span>
                <span class="counter">@(Model.EmployerResultsPage.CurrentPage - 1) of @Model.EmployerResultsPage.TotalNumberOfPages</span>
            </a>
            <a href="@nextLink"
               style="visibility: @(Model.EmployerResultsPage.CurrentPage == Model.EmployerResultsPage.TotalNumberOfPages ? "hidden" : "visible")"
               class="page-navigation__btn next">
                <i class="arrow-button fa fa-angle-right"></i>
                <span class="description">Next <span class="hide-mob">page</span></span>
                <span class="counter">@(Model.EmployerResultsPage.CurrentPage + 1) of @Model.EmployerResultsPage.TotalNumberOfPages</span>
            </a>

        </div>
        <div class="page-navigation" style="display: none">

            @for (var i = 1; i < Model.EmployerResultsPage.TotalNumberOfPages; i++)
            {
                var pageLink = Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&EmployerResultsPage.CurrentPage=" + (i + 1);

                <a href="@pageLink" style="font-weight: @(Model.EmployerResultsPage.CurrentPage == i ? "bold" : "normal")">@i</a>
                <span>&nbsp;</span>
            }

        </div>
                }
</div>
