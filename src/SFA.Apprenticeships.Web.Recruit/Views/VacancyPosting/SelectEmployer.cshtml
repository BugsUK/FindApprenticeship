@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.VacancyPosting
@using SFA.Apprenticeships.Web.Recruit.Constants
@model EmployerSearchViewModel
@{
    ViewBag.Title = "Recruit an Apprentice - Select an employer for your vacancy";
    Layout = "~/Views/Shared/_Layout.cshtml";

    const string selected = "selected";
    var vacancyGuidValue = Model.VacancyGuid ?? Guid.NewGuid();
    var ernSearchSelected = Model.FilterType == EmployerFilterType.Ern ? selected : null;
    var nameAndLocationSearchSelected = Model.FilterType == EmployerFilterType.NameAndLocation ? selected : null;
    var noResults = (Model.EmployerResults == null || !Model.EmployerResults.Any()) && (Model.EmployerResultsPage == null || Model.EmployerResultsPage.ResultsCount == 0);
    var detailsOpen = noResults && (!string.IsNullOrWhiteSpace(ernSearchSelected) || !string.IsNullOrWhiteSpace(nameAndLocationSearchSelected)) ? "open" : "";
}
<div class="grid-wrapper">
    <div class="hgroup">
        <h1 class="heading-xlarge">
            Select an employer for your vacancy
        </h1>
    </div>

    @Html.Partial("ValidationSummary", ViewData.ModelState)

    @if (noResults)
    {
        <div class="no-employers-found">
            <p>No employers matched your search:</p>
            <ul>
                @if (!string.IsNullOrWhiteSpace(ernSearchSelected))
                {
                    <li>check the ERN is correct</li>
                    <li>try searching by employer name or location</li>
                }
                @if (!string.IsNullOrWhiteSpace(nameAndLocationSearchSelected))
                {
                    <li>check the name or location are correct</li>
                    <li>try searching by ERN</li>
                }
            </ul>
            <p class="no-employers-optional-action">Alternatively, you might need to create a <a href="@Url.RouteUrl(RecruitmentRouteNames.SelectNewEmployer, new {providerSiteErn = Model.ProviderSiteErn, vacancyGuid = Model.VacancyGuid})">link to the employer</a></p>
        </div>
    }
    
    <section class="clearfix" id="providerSiteResults">
        <h2 class="heading-small">Search your employers</h2>
        <details @detailsOpen>
            <summary>Search your employers</summary>
            <div class="detail-content">
                <div class="blocklabel-single-container">
                    <div class="form-group inline clearfix blocklabel-single hide-nojs">
                        @* ReSharper disable once Html.IdNotResolved *@
                        <label data-target="name-location-search-panel" for="name-location-search" class="block-label @nameAndLocationSearchSelected">
                            @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.NameAndLocation, new {id = "name-location-search", aria_controls = "name-location-search-panel"})
                            Name and location
                        </label>
                        @* ReSharper disable once Html.IdNotResolved *@
                        <label data-target="ern-search-panel" for="ern-search" class="block-label @ernSearchSelected">
                            @Html.RadioButtonFor(model => model.FilterType, EmployerFilterType.Ern, new {id = "ern-search", aria_controls = "ern-search-panel"})
                            ERN
                        </label>
                    </div>

                    @using (Html.BeginForm(null, null, null, FormMethod.Get, new { @action = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer) + "#providerSiteResults", @id = "ern-search-form" }))
                    {
                        @Html.HiddenFor(model => model.ProviderSiteErn)
                        @Html.HiddenFor(model => model.VacancyGuid)

                        <div id="ern-search-panel" class="toggle-content blocklabel-content">
                            @Html.FormTextFor(model => model.Ern)

                            <button id="ern-search-button" type="submit" class="button">
                                Find employer
                            </button>
                        </div>
                    }

                    @using (Html.BeginForm(null, null, null, FormMethod.Get, new { @action = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer) + "#providerSiteResults", @id = "name-location-search-form" }))
                    {
                        @Html.HiddenFor(model => model.ProviderSiteErn)
                        @Html.HiddenFor(model => model.VacancyGuid)

                        <div id="name-location-search-panel" class="toggle-content blocklabel-content">
                            @Html.FormTextFor(model => model.Name)
                            @Html.FormTextFor(model => model.Location, hintText: "Enter town or postcode")

                            <button id="name-location-search-button" type="submit" class="button">
                                Search
                            </button>
                        </div>
                    }
                </div>
            </div>
        </details>
        
        @if (Model.EmployerResultsPage.ResultsCount > 0)
        {
            var resultsMessage = Model.EmployerResultsPage.ResultsCount > 1 ? string.Format("Found {0} Employers", Model.EmployerResultsPage.ResultsCount) : "Found one employer";

        <h2 class="heading-small">@resultsMessage</h2>

            <div class="grid grid-3-3">
                <table>
                    <colgroup>
                        <col class="t30">
                        <col class="t40">
                        <col class="t15">
                        <col class="t15">
                        <col>
                    </colgroup>
                    <tbody>
                    <tr>
                        <th>Name</th>
                        <th>Address</th>
                        <th>ERN</th>
                        <th></th>
                    </tr>
                    @foreach (var employerResultsViewModel in @Model.EmployerResultsPage.Page)
                    {
                        <tr>
                            <th>
                                <h4 class="bold-small">@employerResultsViewModel.EmployerName</h4>
                            </th>
                            <td>
                                @employerResultsViewModel.Address.AddressLine1
                                @if (!string.IsNullOrWhiteSpace(@employerResultsViewModel.Address.AddressLine2))
                                {
                                    <br />@employerResultsViewModel.Address.AddressLine2
                                }
                                <br />@employerResultsViewModel.Address.AddressLine4 @employerResultsViewModel.Address.Postcode
                            </td>
                            <td>@employerResultsViewModel.Ern</td>
                            <td>
                                <a href="@Url.RouteUrl(RecruitmentRouteNames.ComfirmEmployer, new {providerSiteErn = Model.ProviderSiteErn, ern = employerResultsViewModel.Ern, vacancyGuid = vacancyGuidValue })">Select employer</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </section>

    <div class="page-navigation">

        @{
            var prevLink = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&EmployerResultsPage.CurrentPage=" + (Model.EmployerResultsPage.CurrentPage - 1);
            var nextLink = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&EmployerResultsPage.CurrentPage=" + (Model.EmployerResultsPage.CurrentPage + 1);
        }

        <a href="@prevLink"
           style="visibility: @(Model.EmployerResultsPage.CurrentPage == 1 ? "hidden" : "visible")"
           class="page-navigation__btn previous">
            <i class="arrow-button fa fa-angle-left"></i>
            <span class="description">Previous <span class="hide-mob">page</span></span>
            <span class="counter">@(Model.EmployerResultsPage.CurrentPage - 1) of @Model.EmployerResultsPage.TotalNumberOfPages</span>
        </a>
        <a href="@nextLink"
           style="visibility: @(Model.EmployerResultsPage.CurrentPage == Model.EmployerResultsPage.TotalNumberOfPages ? "hidden" : "visible")"
           class="page-navigation__btn next">
            <i class="arrow-button fa fa-angle-right"></i>
            <span class="description">Next <span class="hide-mob">page</span></span>
            <span class="counter">@(Model.EmployerResultsPage.CurrentPage + 1) of @Model.EmployerResultsPage.TotalNumberOfPages</span>
        </a>

    </div>
    <div class="page-navigation" style="display: none">

        @for (var i = 1; i < Model.EmployerResultsPage.TotalNumberOfPages; i++)
            {
                var pageLink = Url.RouteUrl(RecruitmentRouteNames.SearchExistingEmployer, new EmployerSearchViewModel(Model).RouteValues) + "&EmployerResultsPage.CurrentPage=" + (i + 1);

            <a href="@pageLink" style="font-weight: @(Model.EmployerResultsPage.CurrentPage == i ? "bold" : "normal")">@i</a>
                <span>&nbsp;</span>
        }

    </div>

</div>
