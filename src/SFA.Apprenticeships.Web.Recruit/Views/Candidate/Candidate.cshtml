@using System.Web.Mvc.Html
@using SFA.Apprenticeships.Domain.Entities.Raa.Vacancies
@using SFA.Apprenticeships.Domain.Raa.Interfaces.Repositories.Models
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Application
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Candidate
@using SFA.Apprenticeships.Web.Recruit.Constants
@model CandidateApplicationSummariesViewModel

@{
    ViewBag.Title = "Candidate application";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.Partial("ValidationSummary", ViewData.ModelState)

<section>
    <div class="grid-row">
        <div class="column-two-thirds">
            <h1 class="heading-xlarge" itemprop="title">
                Applications for @Model.ApplicantDetails.Name
                <span class="heading-secondary " itemprop="ApplicantId">Applicant ID - @Model.ApplicantDetails.ApplicantId</span>
            </h1>
        </div>
        <div class="column-one-third">
            <details class="sfa-xlarge-top-margin">
                <summary><span class="summary">Contact details for @Model.ApplicantDetails.Name</span></summary>
                @Html.DisplayFor(m => m.ApplicantDetails, ApplicantDetailsViewModel.PartialView)
            </details>
        </div>
    </div>
</section>

<section class="sfa-no-bottom-margin" id="applicationsSection">
    <table class="vert-top" id="applicationTable">
        <colgroup>
            <col>
            <col>
            <col>
            <col>
            <col>
            <col>
        </colgroup>
        <thead>
        <tr>
            <th>
                @{
                    var orderByVacancyTitle = Model.CandidateApplicationsSearch.OrderByField == CandidateApplicationsSearchViewModel.OrderByFieldVacancyTitle;
                    var vacancyTitleNewOrder = orderByVacancyTitle ? Model.CandidateApplicationsSearch.Order == Order.Ascending ? Order.Descending : Order.Ascending : Order.Ascending;
                    var vacancyTitleSortClass = orderByVacancyTitle ? Model.CandidateApplicationsSearch.Order == Order.Ascending ? "fa-sort-up" : "fa-sort-down" : "fa-sort";
                }
                <a href="@Url.RouteUrl(RecruitmentRouteNames.ViewCandidate, new CandidateApplicationsSearchViewModel(Model.CandidateApplicationsSearch, CandidateApplicationsSearchViewModel.OrderByFieldVacancyTitle, vacancyTitleNewOrder).RouteValues)" class="vacancy-filter">
                    <span class="font-black">Vacancy title <i class="fa @vacancyTitleSortClass" aria-hidden="true"></i></span>
                </a>
            </th>
            <th>
                @{
                    var orderByEmployer = Model.CandidateApplicationsSearch.OrderByField == CandidateApplicationsSearchViewModel.OrderByFieldEmployer;
                    var employerNewOrder = orderByEmployer ? Model.CandidateApplicationsSearch.Order == Order.Ascending ? Order.Descending : Order.Ascending : Order.Ascending;
                    var employerSortClass = orderByEmployer ? Model.CandidateApplicationsSearch.Order == Order.Ascending ? "fa-sort-up" : "fa-sort-down" : "fa-sort";
                }
                <a href="@Url.RouteUrl(RecruitmentRouteNames.ViewCandidate, new CandidateApplicationsSearchViewModel(Model.CandidateApplicationsSearch, CandidateApplicationsSearchViewModel.OrderByFieldEmployer, employerNewOrder).RouteValues)" class="vacancy-filter">
                    <span class="font-black">Employer <i class="fa @employerSortClass" aria-hidden="true"></i></span>
                </a>
            </th>
            <th>
                <span class="font-black">Location</span>
            </th>
            <th>
                @{
                    var orderBySubmitted = Model.CandidateApplicationsSearch.OrderByField == CandidateApplicationsSearchViewModel.OrderByFieldSubmitted;
                    var submittedNewOrder = orderBySubmitted ? Model.CandidateApplicationsSearch.Order == Order.Ascending ? Order.Descending : Order.Ascending : Order.Ascending;
                    var submittedSortClass = orderBySubmitted ? Model.CandidateApplicationsSearch.Order == Order.Ascending ? "fa-sort-up" : "fa-sort-down" : "fa-sort";
                }
                <a href="@Url.RouteUrl(RecruitmentRouteNames.ViewCandidate, new CandidateApplicationsSearchViewModel(Model.CandidateApplicationsSearch, CandidateApplicationsSearchViewModel.OrderByFieldSubmitted, submittedNewOrder).RouteValues)" class="vacancy-filter">
                    <span class="font-black">Submitted <i class="fa @submittedSortClass" aria-hidden="true"></i></span>
                </a>
            </th>
            <th>
                @{
                    var orderByStatus = Model.CandidateApplicationsSearch.OrderByField == CandidateApplicationsSearchViewModel.OrderByFieldStatus;
                    var statusNewOrder = orderByStatus ? Model.CandidateApplicationsSearch.Order == Order.Ascending ? Order.Descending : Order.Ascending : Order.Ascending;
                    var statusSortClass = orderByStatus ? Model.CandidateApplicationsSearch.Order == Order.Ascending ? "fa-sort-up" : "fa-sort-down" : "fa-sort";
                }
                <a href="@Url.RouteUrl(RecruitmentRouteNames.ViewCandidate, new CandidateApplicationsSearchViewModel(Model.CandidateApplicationsSearch, CandidateApplicationsSearchViewModel.OrderByFieldStatus, statusNewOrder).RouteValues)" class="vacancy-filter">
                    <span class="font-black">Status <i class="fa @statusSortClass" aria-hidden="true"></i></span>
                </a>
            </th>
            <th>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var applicationSummary in Model.ApplicationSummaries.Page)
        {
            <tr class="applicant">
                <td>
                    <a href="@Url.RouteUrl(RecruitmentRouteNames.VacancyApplications, new {vacancyReferenceNumber = applicationSummary.VacancyReferenceNumber})">@applicationSummary.VacancyTitle</a>
                </td>
                <td>
                    @applicationSummary.EmployerName
                </td>
                <td>
                    @applicationSummary.EmployerLocation
                </td>
                <td>@Html.DisplayFor(m => applicationSummary.DateApplied)</td>
                <td>
                    @Html.Partial("_applicationStatus", applicationSummary.Status)
                </td>
                <td>
                    <a href="@Url.RouteUrl(applicationSummary.VacancyType == VacancyType.Traineeship ? RecruitmentRouteNames.ReviewTraineeshipApplication : RecruitmentRouteNames.ReviewApprenticeshipApplication, new ApplicationSelectionViewModel(applicationSummary.ApplicationId, applicationSummary.VacancyReferenceNumber).RouteValues)" title="View @applicationSummary.VacancyTitle application">View application</a><br/>
                    <a href="@Url.RouteUrl(applicationSummary.VacancyType == VacancyType.Traineeship ? RecruitmentRouteNames.ViewAnonymousTraineeshipApplication : RecruitmentRouteNames.ViewAnonymousApprenticeshipApplication, new {application = applicationSummary.AnonymousLinkData})" title="View anonymous application">Anonymous view</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</section>

<div class="page-navigation">

    @{
        var currentPage = Model.ApplicationSummaries.CurrentPage;
        var totalNumberOfPages = Model.ApplicationSummaries.TotalNumberOfPages;
        var prevLink = Url.RouteUrl(RecruitmentRouteNames.ViewCandidate, new CandidateApplicationsSearchViewModel(Model.CandidateApplicationsSearch, currentPage - 1).RouteValues);
        var nextLink = Url.RouteUrl(RecruitmentRouteNames.ViewCandidate, new CandidateApplicationsSearchViewModel(Model.CandidateApplicationsSearch, currentPage + 1).RouteValues);
    }

    <a href="@prevLink"
       style="visibility: @(currentPage == 1 ? "hidden" : "visible"); width: 33.333333333%"
       class="page-navigation__btn previous grid column-one-third">
        <i class="arrow-button fa fa-angle-left"></i>
        <span class="description">Previous <span class="sfa-hide-mobile">page</span></span>
        <span class="counter">@(currentPage - 1) of @totalNumberOfPages</span>
    </a>

@using (Html.BeginRouteForm(RecruitmentRouteNames.SortCandidate, FormMethod.Post, new { id = "sort-candidate-form" }))
{
    @Html.HiddenFor(m => m.CandidateApplicationsSearch.CandidateGuid)
    @Html.HiddenFor(m => m.CandidateApplicationsSearch.OrderByField)
    @Html.HiddenFor(m => m.CandidateApplicationsSearch.Order)
    <div id="page-size-container" class="column-one-third page-navigation__results" style="width: 33.333333333%; text-align: center">
        <label for="page-size" class="heading-small inline">Display results</label>
        @Html.DropDownListFor(m => m.CandidateApplicationsSearch.PageSize, Model.CandidateApplicationsSearch.PageSizes, new {id = "page-size", @class = "form-control" })
        <noscript>
            <button class="button" name="SearchVacanciesAction" value="SearchVacancies">View</button>
        </noscript>
    </div>
}

    <a href="@nextLink"
       style="visibility: @(currentPage == totalNumberOfPages ? "hidden" : "visible"); width: 33.333333333%"
       class="page-navigation__btn next grid column-one-third">
        <i class="arrow-button fa fa-angle-right"></i>
        <span class="description">Next <span class="sfa-hide-mobile">page</span></span>
        <span class="counter">@(currentPage + 1) of @totalNumberOfPages</span>
    </a>

</div>

@section scripts
{
    @Scripts.Render("~/bundles/vacancyApplications")
    <script>
        var searchUrl = '@Url.RouteUrl(RecruitmentRouteNames.SortCandidate)';
    </script>
}