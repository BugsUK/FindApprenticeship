@using SFA.Apprenticeships.Domain.Entities.Vacancies
@using SFA.Apprenticeships.Web.Common.Constants.ViewModels
@using SFA.Apprenticeships.Web.Common.ViewModels
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy
@using SFA.Apprenticeships.Web.Recruit.Constants
@model SFA.Apprenticeships.Web.Raa.Common.ViewModels.VacancyManagement.EditWageViewModel

@{
    ViewBag.Title = "Recruit an Apprentice - Increase vacancy wage";
}

<h1 class="heading-xlarge">
    Increase vacancy wage
</h1>

@using (Html.BeginRouteForm(RecruitmentRouteNames.EditWage, new { vacancyReferenceNumber = Model.VacancyReferenceNumber }, FormMethod.Post, new { id = "edit-wage-form" }))
{
    <div>
        @if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum || Model.ExistingWage.Type == WageType.NationalMinimum)
        {
            <h3 class="bold-small">
                Current wage
            </h3>
            if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum)
            {
                <p>National minimum wage for apprentices</p>
            }

            if (Model.ExistingWage.Type == WageType.NationalMinimum)
            {
                <p>National Minimum Wage</p>
            }

            <h3 class="bold-small">
                Wage displayed
            </h3>
            <p id="vacancy-wage">
                @WagePresenter.GetDisplayAmount(Model.ExistingWage.Type, Model.ExistingWage.Amount, Model.ExistingWage.AmountLowerBound, Model.ExistingWage.AmountUpperBound, Model.ExistingWage.Text, Model.ExistingWage.HoursPerWeek, Model.PossibleStartDate) (based on @Model.ExistingWage.HoursPerWeek) paid hours per week

                @if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum)
                {
                    @Html.Partial("_ApprenticeMinimumWageExplained", Model.PossibleStartDate)
                }

                @if (Model.ExistingWage.Type == WageType.NationalMinimum)
                {
                    @Html.Partial("_NationalMinimumWageExplained", Model.PossibleStartDate)
                }
            </p>
        }

        <div class="blocklabel-single-container">
            <a name="@Html.NameFor(m => m.Type).ToString().ToLower()"></a>
            <label class="form-label-bold" for="weekly-wage">Wage</label>
            <div class="form-group @HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.Type))">
                @* ReSharper disable once Html.IdNotResolved *@
                <label for="national-minimum-wage" class="block-label selection-button-radio vertically-stacked">
                    @Html.RadioButtonFor(model => model.Classification, WageClassification.NationalMinimum, new {id = "national-minimum-wage", aria_controls = "wage-type-panel"})
                    National Minimum Wage
                </label>
                @* ReSharper disable once Html.IdNotResolved *@
                <label for="apprenticeship-minimum-wage" class="block-label selection-button-radio vertically-stacked">
                    @Html.RadioButtonFor(model => model.Classification, WageClassification.ApprenticeshipMinimum, new {id = "apprenticeship-minimum-wage", aria_controls = "wage-type-panel"})
                    National Minimum Wage for apprentices
                </label>
                @* ReSharper disable once Html.IdNotResolved *@
                <label for="custom-wage" class="block-label selection-button-radio vertically-stacked" data-target="custom-wage-panel">
                    @Html.RadioButtonFor(model => model.Classification, WageClassification.Custom, new {id = "custom-wage", aria_controls = "wage-type-panel"})
                    Custom wage
                </label>
                <div id="custom-wage-panel" class="toggle-content blocklabel-content nested-panel-1 clearfix">
                    <div class="panel panel-border-narrow">
                        <fieldset class="form-group inline-fixed">
                            @* ReSharper disable once Html.IdNotResolved *@
                            <span class="clearfix">Select an option</span>
                            <label for="custom-wage-fixed" class="block-label selection-button-radio" data-target="custom-wage-fixed-panel">
                                @Html.RadioButtonFor(model => model.CustomType, CustomWageType.Fixed, new {id = "custom-wage-fixed", aria_controls = "custom-wage-panel"})
                                Fixed wage
                            </label>
                            @* ReSharper disable once Html.IdNotResolved *@
                            <label for="custom-wage-range" class="block-label selection-button-radio" data-target="custom-wage-range-panel">
                                @Html.RadioButtonFor(model => model.CustomType, CustomWageType.Ranged, new {id = "custom-wage-range", aria_controls = "custom-wage-panel"})
                                Wage range
                            </label>
                            @Html.ValidationMessageFor(m => m.CustomType)
                        </fieldset>
                        <div id="custom-wage-fixed-panel" class="toggle-content blocklabel-content">
                            <fieldset class="nested-panel-2 form-group inline-fixed">
                                <span class="clearfix">@Html.Label(WageViewModelMessages.AmountMessages.HelpText)</span>
                                £
                                @Html.FormTextFor(m => m.Amount, containerHtmlAttributes: new {@class = "form-group-compound"}, labelHtmlAttributes: new {style = "Display: none"}, controlHtmlAttributes: new {@class = "form-control-large", type = "tel", size = 12})
                                @Html.DropDownListFor(m => m.Unit, Model.WageUnits, new {@class = "form-control"})
                            </fieldset>
                        </div>
                        <div id="custom-wage-range-panel" class="toggle-content blocklabel-content">
                            <fieldset class="nested-panel-2 form-group inline-fixed @HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.AmountLowerBound))
                                            @HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.AmountUpperBound))">
                                <span class="clearfix">@Html.Label(WageViewModelMessages.AmountRangeMessages.HelpText, new {@class = "form-hint"})</span>
                                £
                                @Html.FormTextFor(m => m.AmountLowerBound, containerHtmlAttributes: new {@class = "form-group-compound"}, labelHtmlAttributes: new {style = "Display: none"}, controlHtmlAttributes: new {@class = "form-control-large", type = "tel", size = 12, placeholder = "min"})
                                &nbsp;to&nbsp;£
                                @Html.FormTextFor(m => m.AmountUpperBound, containerHtmlAttributes: new {@class = "form-group-compound"}, labelHtmlAttributes: new {style = "Display: none"}, controlHtmlAttributes: new {@class = "form-control-large", type = "tel", size = 12, placeholder = "max"})
                                @Html.DropDownListFor(m => m.RangeUnit, Model.WageUnits, new {@class = "form-control"})
                            </fieldset>
                        </div>
                    </div>
                </div>
            </div>
            @Html.ValidationMessageFor(m => m.Type)
        </div>

        <div class="form-group">
            <button class="button" type="submit" id="editWageButton" name="EditWage" value="EditWage">Save and return</button>

            @{
                var routeName = Model.VacancyApplicationsState == VacancyApplicationsState.HasApplications ?
                    RecruitmentRouteNames.VacancyApplications :
                    RecruitmentRouteNames.PreviewVacancy;

                @Html.RouteLink("Cancel", routeName, new {vacancyReferenceNumber = Model.VacancyReferenceNumber})
            }
        </div>
    </div>
}