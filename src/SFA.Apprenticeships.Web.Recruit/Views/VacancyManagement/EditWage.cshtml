@using SFA.Apprenticeships.Domain.Entities.Vacancies
@using SFA.Apprenticeships.Web.Common.ViewModels
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Vacancy
@using SFA.Apprenticeships.Web.Recruit.Constants
@model SFA.Apprenticeships.Web.Raa.Common.ViewModels.VacancyManagement.EditWageViewModel

@{
    ViewBag.Title = "Recruit an Apprentice - Increase vacancy wage";
}

<h1 class="heading-xlarge">
    Increase vacancy wage
</h1>

@using (Html.BeginRouteForm(RecruitmentRouteNames.EditWage, new { vacancyReferenceNumber = Model.VacancyReferenceNumber }, FormMethod.Post, new { id = "edit-wage-form" }))
{
    @Html.AntiForgeryToken()
    @Html.Partial("ValidationSummary", ViewData.ModelState)

    <div>
        @if (Model.Classification != WageClassification.Custom)
        {
            <h3 id="current-wage-header" class="bold-small">Current wage</h3>
        }

        @if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum)
        {
            <p id="current-wage-name">National minimum wage for apprentices</p>
        }

        @if (Model.ExistingWage.Type == WageType.NationalMinimum)
        {
            <p id="current-wage-name">National Minimum Wage</p>
        }

        @if (Model.ExistingWage.Type == WageType.Unwaged)
        {
            <p id="current-wage-name">Unwaged</p>
        }

        @if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum || Model.ExistingWage.Type == WageType.NationalMinimum)
        {
            <h3 id="vacancy-wage-header" class="bold-small">Wage displayed</h3>
            <p id="vacancy-wage">
                @WagePresenter.GetDisplayAmount(Model.ExistingWage.Type, Model.ExistingWage.Amount, Model.ExistingWage.AmountLowerBound, Model.ExistingWage.AmountUpperBound, Model.ExistingWage.Text, Model.ExistingWage.HoursPerWeek, Model.PossibleStartDate) (based on @Model.ExistingWage.HoursPerWeek paid hours per week)

                @if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum)
                {
                    @Html.Partial("_ApprenticeMinimumWageExplained", Model.PossibleStartDate)
                }

                @if (Model.ExistingWage.Type == WageType.NationalMinimum)
                {
                    @Html.Partial("_NationalMinimumWageExplained", Model.PossibleStartDate)
                }
            </p>
        }

        <div class="blocklabel-single-container">
            <a name="@Html.NameFor(m => m.Type).ToString().ToLower()"></a>
            @if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum || Model.ExistingWage.Type == WageType.Unwaged)
            {
                <label id="wage-type-label" class="form-label-bold">Change wage type</label>
            }
            <div class="form-group @HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.Classification))">
                @Html.ValidationMessageFor(m => m.Classification)
                @if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum || Model.ExistingWage.Type == WageType.Unwaged)
                {
                    @* ReSharper disable once Html.IdNotResolved *@
                    <label id="national-minimum-wage-radio-label" for="national-minimum-wage" class="block-label selection-button-radio">
                        @Html.RadioButtonFor(model => model.Classification, WageClassification.NationalMinimum, new {id = "national-minimum-wage", aria_controls = "wage-type-panel"})
                        National Minimum Wage
                    </label>
                    if (Model.ExistingWage.Type == WageType.Unwaged)
                    {
                        @* ReSharper disable once Html.IdNotResolved *@
                        <label id="apprenticeship-minimum-wage-radio-label" for="apprenticeship-minimum-wage" class="block-label selection-button-radio">
                            @Html.RadioButtonFor(model => model.Classification, WageClassification.ApprenticeshipMinimum, new {id = "apprenticeship-minimum-wage", aria_controls = "wage-type-panel"})
                            National Minimum Wage for apprentices
                        </label>
                    }
                    @* ReSharper disable once Html.IdNotResolved *@
                    <label id="custom-wage-radio-label" for="custom-wage" class="block-label selection-button-radio" data-target="custom-wage-panel">
                        @Html.RadioButtonFor(model => model.Classification, WageClassification.Custom, new {id = "custom-wage", aria_controls = "wage-type-panel"})
                        Custom wage
                    </label>
                }
                else
                {
                    @Html.HiddenFor(model => model.Classification)
                }
                <div id="custom-wage-panel" class="toggle-content blocklabel-content nested-panel-1 clearfix" style="@(Model.Classification == WageClassification.Custom ? "display: block;" : "")">
                    <div class="panel panel-border-narrow">
                        <fieldset class="form-group inline-fixed">
                            @if (Model.ExistingWage.Type == WageType.NationalMinimum || Model.ExistingWage.Type == WageType.ApprenticeshipMinimum || Model.ExistingWage.Type == WageType.Unwaged)
                            {
                                if (Model.ExistingWage.Type == WageType.NationalMinimum)
                                {
                                    <span id="custom-wage-label" class="clearfix">Select a custom wage option</span>
                                }
                                else if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum || Model.ExistingWage.Type == WageType.Unwaged)
                                {
                                    <span id="custom-wage-label" class="clearfix">Select an option</span>
                                }
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label id="custom-wage-fixed-label" for="custom-wage-fixed" class="block-label selection-button-radio" data-target="custom-wage-fixed-panel">
                                    @Html.RadioButtonFor(model => model.CustomType, CustomWageType.Fixed, new {id = "custom-wage-fixed", aria_controls = "custom-wage-panel"})
                                    <span id="custom-wage-fixed-label-text">Fixed wage</span>
                                </label>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label id="custom-wage-range-label" for="custom-wage-range" class="block-label selection-button-radio" data-target="custom-wage-range-panel">
                                    @Html.RadioButtonFor(model => model.CustomType, CustomWageType.Ranged, new {id = "custom-wage-range", aria_controls = "custom-wage-panel"})
                                    <span id="custom-wage-range-label-text">Wage range</span>
                                </label>
                            }
                            @if (Model.ExistingWage.Type == WageType.Custom)
                            {
                                <span id="custom-wage-label" class="clearfix">Keep as fixed wage?</span>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label id="custom-wage-fixed-label" for="custom-wage-fixed" class="block-label selection-button-radio" data-target="custom-wage-fixed-panel">
                                    @Html.RadioButtonFor(model => model.CustomType, CustomWageType.Fixed, new {id = "custom-wage-fixed", aria_controls = "custom-wage-panel"})
                                    <span id="custom-wage-fixed-label-text">Yes</span>
                                </label>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label id="custom-wage-range-label" for="custom-wage-range" class="block-label selection-button-radio" data-target="custom-wage-range-panel">
                                    @Html.RadioButtonFor(model => model.CustomType, CustomWageType.Ranged, new {id = "custom-wage-range", aria_controls = "custom-wage-panel"})
                                    <span id="custom-wage-range-label-text">No, change to wage range</span>
                                </label>
                            }
                            @if (Model.ExistingWage.Type == WageType.CustomRange)
                            {
                                <span id="custom-wage-label" class="clearfix">Keep as wage range?</span>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label id="custom-wage-range-label" for="custom-wage-range" class="block-label selection-button-radio" data-target="custom-wage-range-panel">
                                    @Html.RadioButtonFor(model => model.CustomType, CustomWageType.Ranged, new {id = "custom-wage-range", aria_controls = "custom-wage-panel"})
                                    <span id="custom-wage-range-label-text">Yes</span>
                                </label>
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label id="custom-wage-fixed-label" for="custom-wage-fixed" class="block-label selection-button-radio" data-target="custom-wage-fixed-panel">
                                    @Html.RadioButtonFor(model => model.CustomType, CustomWageType.Fixed, new {id = "custom-wage-fixed", aria_controls = "custom-wage-panel"})
                                    <span id="custom-wage-fixed-label-text">No, change to fixed wage</span>
                                </label>
                            }
                            @Html.ValidationMessageFor(m => m.CustomType)
                        </fieldset>
                        <div id="custom-wage-fixed-panel" class="toggle-content blocklabel-content">
                            <fieldset class="nested-panel-2 form-group inline-fixed">
                                @if (Model.ExistingWage.Type == WageType.Custom)
                                {
                                    <span id="custom-wage-fixed-help-text" class="clearfix">Enter a new increased wage</span>
                                }
                                @if (Model.ExistingWage.Type == WageType.CustomRange)
                                {
                                    <span id="custom-wage-fixed-hint-text" class="clearfix form-hint">The wage must not be less than the minimum amount set in the original wage range</span>
                                }
                                @if (Model.ExistingWage.HoursPerWeek.HasValue)
                                {
                                    if (Model.ExistingWage.Type == WageType.NationalMinimum)
                                    {
                                        <span id="custom-wage-fixed-hint-text" class="clearfix form-hint">The new increased wage must be more than @WagePresenter.GetWeeklyNationalMinimumWageMaximum(Model.ExistingWage.HoursPerWeek.Value, Model.PossibleStartDate)</span>
                                    }
                                    else if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum || Model.ExistingWage.Type == WageType.Unwaged)
                                    {
                                        <span id="custom-wage-fixed-hint-text" class="clearfix form-hint">The new increased wage must be more than @WagePresenter.GetWeeklyApprenticeshipMinimumWage(Model.ExistingWage.HoursPerWeek.Value, Model.PossibleStartDate)</span>
                                    }
                                }
                                £
                                @Html.FormTextFor(m => m.Amount, containerHtmlAttributes: new {@class = "form-group-compound"}, labelHtmlAttributes: new {style = "Display: none"}, controlHtmlAttributes: new {@class = "form-control-large", type = "tel", size = 12})
                                @Html.DropDownListFor(m => m.Unit, Model.WageUnits, new {@class = "form-control"})
                            </fieldset>
                        </div>
                        <div id="custom-wage-range-panel" class="toggle-content blocklabel-content">
                            <fieldset class="nested-panel-2 form-group inline-fixed @HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.AmountLowerBound)) @HtmlExtensions.GetValidationCssClass(Html.GetValidationType(m => m.AmountUpperBound))">
                                @if (Model.ExistingWage.Type == WageType.Custom)
                                {
                                    <span id="custom-wage-range-hint-text" class="clearfix form-hint">The minimum amount in the wage range must not be less than the original fixed wage</span>
                                }
                                @if (Model.ExistingWage.Type == WageType.CustomRange)
                                {
                                    <span id="custom-wage-range-help-text" class="clearfix">Enter increased wage range</span>
                                    <span id="custom-wage-range-hint-text" class="clearfix form-hint">You can increase one or both of these figures</span>
                                }
                                @if (Model.ExistingWage.HoursPerWeek.HasValue)
                                {
                                    if (Model.ExistingWage.Type == WageType.NationalMinimum)
                                    {
                                        <span id="custom-wage-range-hint-text" class="clearfix form-hint">The minimum amount in the wage range must be more than @WagePresenter.GetWeeklyNationalMinimumWageMaximum(Model.ExistingWage.HoursPerWeek.Value, Model.PossibleStartDate)</span>
                                    }
                                    else if (Model.ExistingWage.Type == WageType.ApprenticeshipMinimum || Model.ExistingWage.Type == WageType.Unwaged)
                                    {
                                        <span id="custom-wage-range-hint-text" class="clearfix form-hint">The minimum amount in the wage range must be more than @WagePresenter.GetWeeklyApprenticeshipMinimumWage(Model.ExistingWage.HoursPerWeek.Value, Model.PossibleStartDate)</span>
                                    }
                                }
                                £
                                @Html.FormTextFor(m => m.AmountLowerBound, containerHtmlAttributes: new {@class = "form-group-compound"}, labelHtmlAttributes: new {style = "Display: none"}, controlHtmlAttributes: new {@class = "form-control-large", type = "tel", size = 12, placeholder = "min"})
                                &nbsp;to&nbsp;£
                                @Html.FormTextFor(m => m.AmountUpperBound, containerHtmlAttributes: new {@class = "form-group-compound"}, labelHtmlAttributes: new {style = "Display: none"}, controlHtmlAttributes: new {@class = "form-control-large", type = "tel", size = 12, placeholder = "max"})
                                @Html.DropDownListFor(m => m.RangeUnit, Model.WageUnits, new {@class = "form-control"})
                            </fieldset>
                        </div>
                    </div>
                </div>
            </div>
            @Html.ValidationMessageFor(m => m.Type)
        </div>

        <div class="form-group inline">
            <button class="button" type="submit" id="editWageButton" name="EditWage" value="EditWage">Save and return</button>

            @{
                var routeName = Model.VacancyApplicationsState == VacancyApplicationsState.HasApplications ?
                    RecruitmentRouteNames.VacancyApplications :
                    RecruitmentRouteNames.PreviewVacancy;

                @Html.RouteLink("Cancel", routeName, new { vacancyReferenceNumber = Model.VacancyReferenceNumber }, new { @class = "button sfa-button-secondary" })
            }
        </div>
    </div>
                }