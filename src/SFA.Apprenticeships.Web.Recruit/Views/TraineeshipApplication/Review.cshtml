@using System.Web.Mvc.Html
@using SFA.Apprenticeships.Domain.Entities.Applications
@using SFA.Apprenticeships.Web.Raa.Common.ViewModels.Application
@using SFA.Apprenticeships.Web.Recruit.Constants

@model SFA.Apprenticeships.Web.Raa.Common.ViewModels.Application.Traineeship.TraineeshipApplicationViewModel

@{
    ViewBag.Title = "Recruit an Apprentice - Review application";
}

@using (Html.BeginRouteForm(RecruitmentRouteNames.ReviewTraineeshipApplication, FormMethod.Post, new { id = "review-traineeship-application-form" }))
{
    @Html.AntiForgeryToken()
    @Html.Partial("ValidationSummary", ViewData.ModelState)

    @Html.HiddenFor(m => m.ApplicationSelection.ApplicationId)
    @Html.HiddenFor(m => m.ApplicationSelection.VacancyReferenceNumber)
    @Html.HiddenFor(m => m.ApplicationSelection.FilterType)
    @Html.HiddenFor(m => m.ApplicationSelection.PageSize)
    var currentStatus = "&nbsp;(current status)";

    if (Model.Status == ApplicationStatuses.Successful || Model.Status == ApplicationStatuses.Unsuccessful)
    {
        var decision = Model.Status == ApplicationStatuses.Successful ? "successful" : "unsuccessful";
        var decisionDateTime = Model.Status == ApplicationStatuses.Successful ? Model.SuccessfulDateTime : Model.UnsuccessfulDateTime;

        <div class="grid-row">
            <div class="column-two-thirds">
                <div class="info-summary" role="group" aria-labelledby="info-summar" tabindex="-1">

                    <p id="info-summary">
                        This candidate was made @decision
                        @if (decisionDateTime.HasValue)
                        {
                            <span>on @Html.DisplayFor(m => decisionDateTime.Value)</span>
                        }
                    </p>
                    <p>
                        @Html.RouteLink("Return to opportunity applications", RecruitmentRouteNames.VacancyApplications, new { Model.Vacancy.VacancyReferenceNumber })
                    </p>

                </div>
            </div>
        </div>
    }

    <div class="grid-row hgroup">
        <div class="column-two-thirds grid">
            <h1 class="heading-xlarge sfa-medium-bottom-margin">@Model.Vacancy.Title</h1>
            <p class="heading-secondary ">@Model.Vacancy.EmployerName</p>
        </div>
        <div class="column-one-third">
            <div class="hide-nojs">
                <p>
                    <a class="print-trigger" href=""><i class="fa fa-print"></i>Print this page</a>
                </p>
            </div>
        </div>
        <div class="grid-row">
            <div class="column-two-thirds">
                @Html.DisplayFor(m => m.ApplicantDetails, ApplicantDetailsViewModel.PartialView)
            </div>
            <div class="column-one-third">
            </div>
        </div>
        @Html.DisplayFor(m => m.AboutYou, AboutYouViewModel.PartialView)
        @Html.DisplayFor(m => m.Qualifications, QualificationViewModel.PartialView)
        @Html.DisplayFor(m => m.WorkExperience, WorkExperienceViewModel.PartialView)
        @Html.DisplayFor(m => m.TrainingCourses, TrainingCourseViewModel.PartialView)

        <section class="sfa-section-bordered">
            <h2 class="heading-large">
                Answers to employer questions
            </h2>
            @Html.DisplayFor(m => m, "Application/EmployerQuestionAnswers")
            @Html.DisplayFor(m => m, "Application/MonitoringInformation")
        </section>

        @if (!(Model.Status == ApplicationStatuses.Successful || Model.Status == ApplicationStatuses.Unsuccessful))
        {
            <section>
                <div class="form-group">
                    <div class="detail-content qa-comment">
                        <p class="heading-medium">Notes (optional)</p>
                        <div class="blocklabel-single-container">
                            @Html.FormTextAreaFor(m => m.Notes, controlHtmlAttributes: new { @class = "form-control form-control-3-4 form-textarea-medium", type = "text" })
                        </div>
                        <p class="heading-medium">How would you like to assign this candidate's application?</p>
                        <p>
                            <label for="application-status-submitted" class="block-label selection-button-radio">
                                @Html.RadioButtonFor(model => model.Status, ApplicationStatuses.Submitted, new { id = "application-status-submitted" })
                                New @if (Model.Status == ApplicationStatuses.Submitted)
                                {
                                    @Html.Raw(currentStatus)
                                }
                            </label>
                            <br />
                            <label for="application-status-inprogress" class="block-label selection-button-radio">
                                @Html.RadioButtonFor(model => model.Status, ApplicationStatuses.InProgress, new { id = "application-status-inprogress" })
                                In progress @if (Model.Status == ApplicationStatuses.InProgress)
                                {
                                    @Html.Raw(currentStatus)
                                }
                            </label>
                        </p>
                    </div>
                </div>
                <div class="form-group inline sfa-xlarge-top-margin">
                    <button type="submit" class="button" name="Review" value="ReviewSaveAndExit">Save and exit</button>
                    @Html.RouteLink("Cancel", RecruitmentRouteNames.VacancyApplications, new { Model.Vacancy.VacancyReferenceNumber }, new { @class = "button sfa-button-secondary" })
                </div>
            </section>
        }
    </div>
}

@section scripts
{
    @Scripts.Render("~/bundles/print")
}